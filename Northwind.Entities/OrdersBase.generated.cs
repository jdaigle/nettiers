
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Orders.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Northwind.Entities.Validation;
#endregion

namespace Northwind.Entities
{
	///<summary>
	/// An object representation of the 'Orders' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class OrdersBase : EntityBase, IOrders, IEntityId<OrdersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private OrdersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private OrdersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private OrdersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Orders> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrdersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OrdersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OrdersBase"/> instance.
		///</summary>
		public OrdersBase()
		{
			this.entityData = new OrdersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OrdersBase"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_employeeId"></param>
		///<param name="_orderDate"></param>
		///<param name="_requiredDate"></param>
		///<param name="_shippedDate"></param>
		///<param name="_shipVia"></param>
		///<param name="_freight"></param>
		///<param name="_shipName"></param>
		///<param name="_shipAddress"></param>
		///<param name="_shipCity"></param>
		///<param name="_shipRegion"></param>
		///<param name="_shipPostalCode"></param>
		///<param name="_shipCountry"></param>
		public OrdersBase(System.String _customerId, System.Int32? _employeeId, System.DateTime? _orderDate, 
			System.DateTime? _requiredDate, System.DateTime? _shippedDate, System.Int32? _shipVia, System.Decimal? _freight, 
			System.String _shipName, System.String _shipAddress, System.String _shipCity, System.String _shipRegion, 
			System.String _shipPostalCode, System.String _shipCountry)
		{
			this.entityData = new OrdersEntityData();
			this.backupData = null;

			this.CustomerId = _customerId;
			this.EmployeeId = _employeeId;
			this.OrderDate = _orderDate;
			this.RequiredDate = _requiredDate;
			this.ShippedDate = _shippedDate;
			this.ShipVia = _shipVia;
			this.Freight = _freight;
			this.ShipName = _shipName;
			this.ShipAddress = _shipAddress;
			this.ShipCity = _shipCity;
			this.ShipRegion = _shipRegion;
			this.ShipPostalCode = _shipPostalCode;
			this.ShipCountry = _shipCountry;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Orders"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_employeeId"></param>
		///<param name="_orderDate"></param>
		///<param name="_requiredDate"></param>
		///<param name="_shippedDate"></param>
		///<param name="_shipVia"></param>
		///<param name="_freight"></param>
		///<param name="_shipName"></param>
		///<param name="_shipAddress"></param>
		///<param name="_shipCity"></param>
		///<param name="_shipRegion"></param>
		///<param name="_shipPostalCode"></param>
		///<param name="_shipCountry"></param>
		public static Orders CreateOrders(System.String _customerId, System.Int32? _employeeId, System.DateTime? _orderDate, 
			System.DateTime? _requiredDate, System.DateTime? _shippedDate, System.Int32? _shipVia, System.Decimal? _freight, 
			System.String _shipName, System.String _shipAddress, System.String _shipCity, System.String _shipRegion, 
			System.String _shipPostalCode, System.String _shipCountry)
		{
			Orders newOrders = new Orders();
			newOrders.CustomerId = _customerId;
			newOrders.EmployeeId = _employeeId;
			newOrders.OrderDate = _orderDate;
			newOrders.RequiredDate = _requiredDate;
			newOrders.ShippedDate = _shippedDate;
			newOrders.ShipVia = _shipVia;
			newOrders.Freight = _freight;
			newOrders.ShipName = _shipName;
			newOrders.ShipAddress = _shipAddress;
			newOrders.ShipCity = _shipCity;
			newOrders.ShipRegion = _shipRegion;
			newOrders.ShipPostalCode = _shipPostalCode;
			newOrders.ShipCountry = _shipCountry;
			return newOrders;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the OrderId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 OrderId
		{
			get
			{
				return this.entityData.OrderId; 
			}
			
			set
			{
				if (this.entityData.OrderId == value)
					return;
				
                OnPropertyChanging("OrderId");                    
				OnColumnChanging(OrdersColumn.OrderId, this.entityData.OrderId);
				this.entityData.OrderId = value;
				this.EntityId.OrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.OrderId, this.entityData.OrderId);
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
				
                OnPropertyChanging("CustomerId");                    
				OnColumnChanging(OrdersColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEmployeeIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EmployeeId
		{
			get
			{
				return this.entityData.EmployeeId; 
			}
			
			set
			{
				if (this.entityData.EmployeeId == value)
					return;
				
                OnPropertyChanging("EmployeeId");                    
				OnColumnChanging(OrdersColumn.EmployeeId, this.entityData.EmployeeId);
				this.entityData.EmployeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.EmployeeId, this.entityData.EmployeeId);
				OnPropertyChanged("EmployeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsOrderDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? OrderDate
		{
			get
			{
				return this.entityData.OrderDate; 
			}
			
			set
			{
				if (this.entityData.OrderDate == value)
					return;
				
                OnPropertyChanging("OrderDate");                    
				OnColumnChanging(OrdersColumn.OrderDate, this.entityData.OrderDate);
				this.entityData.OrderDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.OrderDate, this.entityData.OrderDate);
				OnPropertyChanged("OrderDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequiredDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRequiredDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RequiredDate
		{
			get
			{
				return this.entityData.RequiredDate; 
			}
			
			set
			{
				if (this.entityData.RequiredDate == value)
					return;
				
                OnPropertyChanging("RequiredDate");                    
				OnColumnChanging(OrdersColumn.RequiredDate, this.entityData.RequiredDate);
				this.entityData.RequiredDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.RequiredDate, this.entityData.RequiredDate);
				OnPropertyChanged("RequiredDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShippedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsShippedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ShippedDate
		{
			get
			{
				return this.entityData.ShippedDate; 
			}
			
			set
			{
				if (this.entityData.ShippedDate == value)
					return;
				
                OnPropertyChanging("ShippedDate");                    
				OnColumnChanging(OrdersColumn.ShippedDate, this.entityData.ShippedDate);
				this.entityData.ShippedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShippedDate, this.entityData.ShippedDate);
				OnPropertyChanged("ShippedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipVia property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsShipViaNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ShipVia
		{
			get
			{
				return this.entityData.ShipVia; 
			}
			
			set
			{
				if (this.entityData.ShipVia == value)
					return;
				
                OnPropertyChanging("ShipVia");                    
				OnColumnChanging(OrdersColumn.ShipVia, this.entityData.ShipVia);
				this.entityData.ShipVia = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShipVia, this.entityData.ShipVia);
				OnPropertyChanged("ShipVia");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Freight property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0m. It is up to the developer
		/// to check the value of IsFreightNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Freight
		{
			get
			{
				return this.entityData.Freight; 
			}
			
			set
			{
				if (this.entityData.Freight == value)
					return;
				
                OnPropertyChanging("Freight");                    
				OnColumnChanging(OrdersColumn.Freight, this.entityData.Freight);
				this.entityData.Freight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.Freight, this.entityData.Freight);
				OnPropertyChanged("Freight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String ShipName
		{
			get
			{
				return this.entityData.ShipName; 
			}
			
			set
			{
				if (this.entityData.ShipName == value)
					return;
				
                OnPropertyChanging("ShipName");                    
				OnColumnChanging(OrdersColumn.ShipName, this.entityData.ShipName);
				this.entityData.ShipName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShipName, this.entityData.ShipName);
				OnPropertyChanged("ShipName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String ShipAddress
		{
			get
			{
				return this.entityData.ShipAddress; 
			}
			
			set
			{
				if (this.entityData.ShipAddress == value)
					return;
				
                OnPropertyChanging("ShipAddress");                    
				OnColumnChanging(OrdersColumn.ShipAddress, this.entityData.ShipAddress);
				this.entityData.ShipAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShipAddress, this.entityData.ShipAddress);
				OnPropertyChanged("ShipAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCity property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String ShipCity
		{
			get
			{
				return this.entityData.ShipCity; 
			}
			
			set
			{
				if (this.entityData.ShipCity == value)
					return;
				
                OnPropertyChanging("ShipCity");                    
				OnColumnChanging(OrdersColumn.ShipCity, this.entityData.ShipCity);
				this.entityData.ShipCity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShipCity, this.entityData.ShipCity);
				OnPropertyChanged("ShipCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipRegion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String ShipRegion
		{
			get
			{
				return this.entityData.ShipRegion; 
			}
			
			set
			{
				if (this.entityData.ShipRegion == value)
					return;
				
                OnPropertyChanging("ShipRegion");                    
				OnColumnChanging(OrdersColumn.ShipRegion, this.entityData.ShipRegion);
				this.entityData.ShipRegion = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShipRegion, this.entityData.ShipRegion);
				OnPropertyChanged("ShipRegion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String ShipPostalCode
		{
			get
			{
				return this.entityData.ShipPostalCode; 
			}
			
			set
			{
				if (this.entityData.ShipPostalCode == value)
					return;
				
                OnPropertyChanging("ShipPostalCode");                    
				OnColumnChanging(OrdersColumn.ShipPostalCode, this.entityData.ShipPostalCode);
				this.entityData.ShipPostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShipPostalCode, this.entityData.ShipPostalCode);
				OnPropertyChanged("ShipPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShipCountry property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String ShipCountry
		{
			get
			{
				return this.entityData.ShipCountry; 
			}
			
			set
			{
				if (this.entityData.ShipCountry == value)
					return;
				
                OnPropertyChanging("ShipCountry");                    
				OnColumnChanging(OrdersColumn.ShipCountry, this.entityData.ShipCountry);
				this.entityData.ShipCountry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OrdersColumn.ShipCountry, this.entityData.ShipCountry);
				OnPropertyChanged("ShipCountry");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Customers"/>.
		/// </summary>
		/// <value>The source Customers for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customers CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Employees"/>.
		/// </summary>
		/// <value>The source Employees for EmployeeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Employees EmployeeIdSource
      	{
            get { return entityData.EmployeeIdSource; }
            set { entityData.EmployeeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Shippers"/>.
		/// </summary>
		/// <value>The source Shippers for ShipVia.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Shippers ShipViaSource
      	{
            get { return entityData.ShipViaSource; }
            set { entityData.ShipViaSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a collection of ProductsFromOrderDetails objects
		///	which are related to this object through the junction table OrderDetails
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Products> ProductIdProductsCollection_From_OrderDetails
		{
			get { return entityData.ProductIdProductsCollection_From_OrderDetails; }
			set { entityData.ProductIdProductsCollection_From_OrderDetails = value; }	
		}
	
		/// <summary>
		///	Holds a collection of OrderDetails objects
		///	which are related to this object through the relation FK_Order_Details_Orders
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<OrderDetails> OrderDetailsCollection
		{
			get { return entityData.OrderDetailsCollection; }
			set { entityData.OrderDetailsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomerId", "Customer Id", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipName", "Ship Name", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipAddress", "Ship Address", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipCity", "Ship City", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipRegion", "Ship Region", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipPostalCode", "Ship Postal Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShipCountry", "Ship Country", 15));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Orders"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OrderID", "CustomerID", "EmployeeID", "OrderDate", "RequiredDate", "ShippedDate", "ShipVia", "Freight", "ShipName", "ShipAddress", "ShipCity", "ShipRegion", "ShipPostalCode", "ShipCountry"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OrdersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Orders) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Orders>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Orders);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Orders Entity 
		///</summary>
		protected virtual Orders Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Orders copy = new Orders();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.OrderId = this.OrderId;
				copy.CustomerId = this.CustomerId;
				copy.EmployeeId = this.EmployeeId;
				copy.OrderDate = this.OrderDate;
				copy.RequiredDate = this.RequiredDate;
				copy.ShippedDate = this.ShippedDate;
				copy.ShipVia = this.ShipVia;
				copy.Freight = this.Freight;
				copy.ShipName = this.ShipName;
				copy.ShipAddress = this.ShipAddress;
				copy.ShipCity = this.ShipCity;
				copy.ShipRegion = this.ShipRegion;
				copy.ShipPostalCode = this.ShipPostalCode;
				copy.ShipCountry = this.ShipCountry;
			
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				copy.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customers;
			else
				copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customers;
			if (this.EmployeeIdSource != null && existingCopies.Contains(this.EmployeeIdSource))
				copy.EmployeeIdSource = existingCopies[this.EmployeeIdSource] as Employees;
			else
				copy.EmployeeIdSource = MakeCopyOf(this.EmployeeIdSource, existingCopies) as Employees;
			if (this.ShipViaSource != null && existingCopies.Contains(this.ShipViaSource))
				copy.ShipViaSource = existingCopies[this.ShipViaSource] as Shippers;
			else
				copy.ShipViaSource = MakeCopyOf(this.ShipViaSource, existingCopies) as Shippers;
		
			//deep copy nested objects
			copy.ProductIdProductsCollection_From_OrderDetails = (TList<Products>) MakeCopyOf(this.ProductIdProductsCollection_From_OrderDetails, existingCopies); 
			copy.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Orders Entity 
		///</summary>
		public virtual Orders Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Orders Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Orders DeepCopy()
		{
			return EntityHelper.Clone<Orders>(this as Orders);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as OrdersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new OrdersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as OrdersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(OrdersColumn column)
		{
			switch(column)
			{
					case OrdersColumn.OrderId:
					return entityData.OrderId != _originalData.OrderId;
					case OrdersColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case OrdersColumn.EmployeeId:
					return entityData.EmployeeId != _originalData.EmployeeId;
					case OrdersColumn.OrderDate:
					return entityData.OrderDate != _originalData.OrderDate;
					case OrdersColumn.RequiredDate:
					return entityData.RequiredDate != _originalData.RequiredDate;
					case OrdersColumn.ShippedDate:
					return entityData.ShippedDate != _originalData.ShippedDate;
					case OrdersColumn.ShipVia:
					return entityData.ShipVia != _originalData.ShipVia;
					case OrdersColumn.Freight:
					return entityData.Freight != _originalData.Freight;
					case OrdersColumn.ShipName:
					return entityData.ShipName != _originalData.ShipName;
					case OrdersColumn.ShipAddress:
					return entityData.ShipAddress != _originalData.ShipAddress;
					case OrdersColumn.ShipCity:
					return entityData.ShipCity != _originalData.ShipCity;
					case OrdersColumn.ShipRegion:
					return entityData.ShipRegion != _originalData.ShipRegion;
					case OrdersColumn.ShipPostalCode:
					return entityData.ShipPostalCode != _originalData.ShipPostalCode;
					case OrdersColumn.ShipCountry:
					return entityData.ShipCountry != _originalData.ShipCountry;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< OrdersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.OrderId != _originalData.OrderId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.EmployeeId != _originalData.EmployeeId;
			result = result || entityData.OrderDate != _originalData.OrderDate;
			result = result || entityData.RequiredDate != _originalData.RequiredDate;
			result = result || entityData.ShippedDate != _originalData.ShippedDate;
			result = result || entityData.ShipVia != _originalData.ShipVia;
			result = result || entityData.Freight != _originalData.Freight;
			result = result || entityData.ShipName != _originalData.ShipName;
			result = result || entityData.ShipAddress != _originalData.ShipAddress;
			result = result || entityData.ShipCity != _originalData.ShipCity;
			result = result || entityData.ShipRegion != _originalData.ShipRegion;
			result = result || entityData.ShipPostalCode != _originalData.ShipPostalCode;
			result = result || entityData.ShipCountry != _originalData.ShipCountry;
			return result;
		}	
		
		///<summary>
		///  Returns a Orders Entity with the original data.
		///</summary>
		public Orders GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateOrders(
				_originalData.CustomerId,
				_originalData.EmployeeId,
				_originalData.OrderDate,
				_originalData.RequiredDate,
				_originalData.ShippedDate,
				_originalData.ShipVia,
				_originalData.Freight,
				_originalData.ShipName,
				_originalData.ShipAddress,
				_originalData.ShipCity,
				_originalData.ShipRegion,
				_originalData.ShipPostalCode,
				_originalData.ShipCountry
				);
				
			return (Orders)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="OrdersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is OrdersBase)
				return ValueEquals(this, (OrdersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="OrdersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.OrderId.GetHashCode() ^ 
					((this.CustomerId == null) ? string.Empty : this.CustomerId.ToString()).GetHashCode() ^ 
					((this.EmployeeId == null) ? string.Empty : this.EmployeeId.ToString()).GetHashCode() ^ 
					((this.OrderDate == null) ? string.Empty : this.OrderDate.ToString()).GetHashCode() ^ 
					((this.RequiredDate == null) ? string.Empty : this.RequiredDate.ToString()).GetHashCode() ^ 
					((this.ShippedDate == null) ? string.Empty : this.ShippedDate.ToString()).GetHashCode() ^ 
					((this.ShipVia == null) ? string.Empty : this.ShipVia.ToString()).GetHashCode() ^ 
					((this.Freight == null) ? string.Empty : this.Freight.ToString()).GetHashCode() ^ 
					((this.ShipName == null) ? string.Empty : this.ShipName.ToString()).GetHashCode() ^ 
					((this.ShipAddress == null) ? string.Empty : this.ShipAddress.ToString()).GetHashCode() ^ 
					((this.ShipCity == null) ? string.Empty : this.ShipCity.ToString()).GetHashCode() ^ 
					((this.ShipRegion == null) ? string.Empty : this.ShipRegion.ToString()).GetHashCode() ^ 
					((this.ShipPostalCode == null) ? string.Empty : this.ShipPostalCode.ToString()).GetHashCode() ^ 
					((this.ShipCountry == null) ? string.Empty : this.ShipCountry.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OrdersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OrdersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="OrdersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="OrdersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OrdersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(OrdersBase Object1, OrdersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OrderId != Object2.OrderId)
				equal = false;
			if ( Object1.CustomerId != null && Object2.CustomerId != null )
			{
				if (Object1.CustomerId != Object2.CustomerId)
					equal = false;
			}
			else if (Object1.CustomerId == null ^ Object2.CustomerId == null )
			{
				equal = false;
			}
			if ( Object1.EmployeeId != null && Object2.EmployeeId != null )
			{
				if (Object1.EmployeeId != Object2.EmployeeId)
					equal = false;
			}
			else if (Object1.EmployeeId == null ^ Object2.EmployeeId == null )
			{
				equal = false;
			}
			if ( Object1.OrderDate != null && Object2.OrderDate != null )
			{
				if (Object1.OrderDate != Object2.OrderDate)
					equal = false;
			}
			else if (Object1.OrderDate == null ^ Object2.OrderDate == null )
			{
				equal = false;
			}
			if ( Object1.RequiredDate != null && Object2.RequiredDate != null )
			{
				if (Object1.RequiredDate != Object2.RequiredDate)
					equal = false;
			}
			else if (Object1.RequiredDate == null ^ Object2.RequiredDate == null )
			{
				equal = false;
			}
			if ( Object1.ShippedDate != null && Object2.ShippedDate != null )
			{
				if (Object1.ShippedDate != Object2.ShippedDate)
					equal = false;
			}
			else if (Object1.ShippedDate == null ^ Object2.ShippedDate == null )
			{
				equal = false;
			}
			if ( Object1.ShipVia != null && Object2.ShipVia != null )
			{
				if (Object1.ShipVia != Object2.ShipVia)
					equal = false;
			}
			else if (Object1.ShipVia == null ^ Object2.ShipVia == null )
			{
				equal = false;
			}
			if ( Object1.Freight != null && Object2.Freight != null )
			{
				if (Object1.Freight != Object2.Freight)
					equal = false;
			}
			else if (Object1.Freight == null ^ Object2.Freight == null )
			{
				equal = false;
			}
			if ( Object1.ShipName != null && Object2.ShipName != null )
			{
				if (Object1.ShipName != Object2.ShipName)
					equal = false;
			}
			else if (Object1.ShipName == null ^ Object2.ShipName == null )
			{
				equal = false;
			}
			if ( Object1.ShipAddress != null && Object2.ShipAddress != null )
			{
				if (Object1.ShipAddress != Object2.ShipAddress)
					equal = false;
			}
			else if (Object1.ShipAddress == null ^ Object2.ShipAddress == null )
			{
				equal = false;
			}
			if ( Object1.ShipCity != null && Object2.ShipCity != null )
			{
				if (Object1.ShipCity != Object2.ShipCity)
					equal = false;
			}
			else if (Object1.ShipCity == null ^ Object2.ShipCity == null )
			{
				equal = false;
			}
			if ( Object1.ShipRegion != null && Object2.ShipRegion != null )
			{
				if (Object1.ShipRegion != Object2.ShipRegion)
					equal = false;
			}
			else if (Object1.ShipRegion == null ^ Object2.ShipRegion == null )
			{
				equal = false;
			}
			if ( Object1.ShipPostalCode != null && Object2.ShipPostalCode != null )
			{
				if (Object1.ShipPostalCode != Object2.ShipPostalCode)
					equal = false;
			}
			else if (Object1.ShipPostalCode == null ^ Object2.ShipPostalCode == null )
			{
				equal = false;
			}
			if ( Object1.ShipCountry != null && Object2.ShipCountry != null )
			{
				if (Object1.ShipCountry != Object2.ShipCountry)
					equal = false;
			}
			else if (Object1.ShipCountry == null ^ Object2.ShipCountry == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((OrdersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static OrdersComparer GetComparer()
        {
            return new OrdersComparer();
        }
        */

        // Comparer delegates back to Orders
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Orders rhs, OrdersColumn which)
        {
            switch (which)
            {
            	
            	
            	case OrdersColumn.OrderId:
            		return this.OrderId.CompareTo(rhs.OrderId);
            		
            		                 
            	
            	
            	case OrdersColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case OrdersColumn.EmployeeId:
            		return this.EmployeeId.Value.CompareTo(rhs.EmployeeId.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.OrderDate:
            		return this.OrderDate.Value.CompareTo(rhs.OrderDate.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.RequiredDate:
            		return this.RequiredDate.Value.CompareTo(rhs.RequiredDate.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.ShippedDate:
            		return this.ShippedDate.Value.CompareTo(rhs.ShippedDate.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipVia:
            		return this.ShipVia.Value.CompareTo(rhs.ShipVia.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.Freight:
            		return this.Freight.Value.CompareTo(rhs.Freight.Value);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipName:
            		return this.ShipName.CompareTo(rhs.ShipName);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipAddress:
            		return this.ShipAddress.CompareTo(rhs.ShipAddress);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipCity:
            		return this.ShipCity.CompareTo(rhs.ShipCity);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipRegion:
            		return this.ShipRegion.CompareTo(rhs.ShipRegion);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipPostalCode:
            		return this.ShipPostalCode.CompareTo(rhs.ShipPostalCode);
            		
            		                 
            	
            	
            	case OrdersColumn.ShipCountry:
            		return this.ShipCountry.CompareTo(rhs.ShipCountry);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OrdersKey> Members
		
		// member variable for the EntityId property
		private OrdersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual OrdersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OrdersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Orders")
					.Append("|").Append( this.OrderId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- OrderId: {0}{14}- CustomerId: {1}{14}- EmployeeId: {2}{14}- OrderDate: {3}{14}- RequiredDate: {4}{14}- ShippedDate: {5}{14}- ShipVia: {6}{14}- Freight: {7}{14}- ShipName: {8}{14}- ShipAddress: {9}{14}- ShipCity: {10}{14}- ShipRegion: {11}{14}- ShipPostalCode: {12}{14}- ShipCountry: {13}{14}{16}", 
				this.OrderId,
				(this.CustomerId == null) ? string.Empty : this.CustomerId.ToString(),
				(this.EmployeeId == null) ? string.Empty : this.EmployeeId.ToString(),
				(this.OrderDate == null) ? string.Empty : this.OrderDate.ToString(),
				(this.RequiredDate == null) ? string.Empty : this.RequiredDate.ToString(),
				(this.ShippedDate == null) ? string.Empty : this.ShippedDate.ToString(),
				(this.ShipVia == null) ? string.Empty : this.ShipVia.ToString(),
				(this.Freight == null) ? string.Empty : this.Freight.ToString(),
				(this.ShipName == null) ? string.Empty : this.ShipName.ToString(),
				(this.ShipAddress == null) ? string.Empty : this.ShipAddress.ToString(),
				(this.ShipCity == null) ? string.Empty : this.ShipCity.ToString(),
				(this.ShipRegion == null) ? string.Empty : this.ShipRegion.ToString(),
				(this.ShipPostalCode == null) ? string.Empty : this.ShipPostalCode.ToString(),
				(this.ShipCountry == null) ? string.Empty : this.ShipCountry.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Orders' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class OrdersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// OrderID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Orders"</remarks>
		public System.Int32 OrderId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.String CustomerId = null;
		
		/// <summary>
		/// EmployeeID : 
		/// </summary>
		public System.Int32? EmployeeId = null;
		
		/// <summary>
		/// OrderDate : 
		/// </summary>
		public System.DateTime? OrderDate = null;
		
		/// <summary>
		/// RequiredDate : 
		/// </summary>
		public System.DateTime? RequiredDate = null;
		
		/// <summary>
		/// ShippedDate : 
		/// </summary>
		public System.DateTime? ShippedDate = null;
		
		/// <summary>
		/// ShipVia : 
		/// </summary>
		public System.Int32? ShipVia = null;
		
		/// <summary>
		/// Freight : 
		/// </summary>
		public System.Decimal? Freight = 0m;
		
		/// <summary>
		/// ShipName : 
		/// </summary>
		public System.String ShipName = null;
		
		/// <summary>
		/// ShipAddress : 
		/// </summary>
		public System.String ShipAddress = null;
		
		/// <summary>
		/// ShipCity : 
		/// </summary>
		public System.String ShipCity = null;
		
		/// <summary>
		/// ShipRegion : 
		/// </summary>
		public System.String ShipRegion = null;
		
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		public System.String ShipPostalCode = null;
		
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		public System.String ShipCountry = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Customers _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customers"/>.
		/// </summary>
		/// <value>The source Customers for CustomerId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Customers CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		private Employees _employeeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Employees"/>.
		/// </summary>
		/// <value>The source Employees for EmployeeId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Employees EmployeeIdSource
      	{
            get { return this._employeeIdSource; }
            set { this._employeeIdSource = value; }
      	}
		private Shippers _shipViaSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Shippers"/>.
		/// </summary>
		/// <value>The source Shippers for ShipVia.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Shippers ShipViaSource
      	{
            get { return this._shipViaSource; }
            set { this._shipViaSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region ProductIdProductsCollection_From_OrderDetails
		
		private TList<Products> productIdProductsCollectionFromOrderDetails;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table productIdProductsCollectionFromOrderDetails
		/// </summary>
		
		public TList<Products> ProductIdProductsCollection_From_OrderDetails
		{
			get
			{
				if (productIdProductsCollectionFromOrderDetails == null)
				{
				productIdProductsCollectionFromOrderDetails = new TList<Products>();
				}
	
				return productIdProductsCollectionFromOrderDetails;
			}
			set { productIdProductsCollectionFromOrderDetails = value; }
		}
		
		#endregion 

		#region OrderDetailsCollection
		
		private TList<OrderDetails> _orderDetailsOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _orderDetailsOrderId
		/// </summary>
		
		public TList<OrderDetails> OrderDetailsCollection
		{
			get
			{
				if (_orderDetailsOrderId == null)
				{
				_orderDetailsOrderId = new TList<OrderDetails>();
				}
	
				return _orderDetailsOrderId;
			}
			set { _orderDetailsOrderId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			OrdersEntityData _tmp = new OrdersEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.CustomerId = this.CustomerId;
			_tmp.EmployeeId = this.EmployeeId;
			_tmp.OrderDate = this.OrderDate;
			_tmp.RequiredDate = this.RequiredDate;
			_tmp.ShippedDate = this.ShippedDate;
			_tmp.ShipVia = this.ShipVia;
			_tmp.Freight = this.Freight;
			_tmp.ShipName = this.ShipName;
			_tmp.ShipAddress = this.ShipAddress;
			_tmp.ShipCity = this.ShipCity;
			_tmp.ShipRegion = this.ShipRegion;
			_tmp.ShipPostalCode = this.ShipPostalCode;
			_tmp.ShipCountry = this.ShipCountry;
			
			#region Source Parent Composite Entities
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customers;
			if (this.EmployeeIdSource != null)
				_tmp.EmployeeIdSource = MakeCopyOf(this.EmployeeIdSource) as Employees;
			if (this.ShipViaSource != null)
				_tmp.ShipViaSource = MakeCopyOf(this.ShipViaSource) as Shippers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.productIdProductsCollectionFromOrderDetails != null)
				_tmp.ProductIdProductsCollection_From_OrderDetails = (TList<Products>) MakeCopyOf(this.ProductIdProductsCollection_From_OrderDetails); 
			if (this._orderDetailsOrderId != null)
				_tmp.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			OrdersEntityData _tmp = new OrdersEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.CustomerId = this.CustomerId;
			_tmp.EmployeeId = this.EmployeeId;
			_tmp.OrderDate = this.OrderDate;
			_tmp.RequiredDate = this.RequiredDate;
			_tmp.ShippedDate = this.ShippedDate;
			_tmp.ShipVia = this.ShipVia;
			_tmp.Freight = this.Freight;
			_tmp.ShipName = this.ShipName;
			_tmp.ShipAddress = this.ShipAddress;
			_tmp.ShipCity = this.ShipCity;
			_tmp.ShipRegion = this.ShipRegion;
			_tmp.ShipPostalCode = this.ShipPostalCode;
			_tmp.ShipCountry = this.ShipCountry;
			
			#region Source Parent Composite Entities
			if (this.CustomerIdSource != null && existingCopies.Contains(this.CustomerIdSource))
				_tmp.CustomerIdSource = existingCopies[this.CustomerIdSource] as Customers;
			else
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource, existingCopies) as Customers;
			if (this.EmployeeIdSource != null && existingCopies.Contains(this.EmployeeIdSource))
				_tmp.EmployeeIdSource = existingCopies[this.EmployeeIdSource] as Employees;
			else
				_tmp.EmployeeIdSource = MakeCopyOf(this.EmployeeIdSource, existingCopies) as Employees;
			if (this.ShipViaSource != null && existingCopies.Contains(this.ShipViaSource))
				_tmp.ShipViaSource = existingCopies[this.ShipViaSource] as Shippers;
			else
				_tmp.ShipViaSource = MakeCopyOf(this.ShipViaSource, existingCopies) as Shippers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ProductIdProductsCollection_From_OrderDetails = (TList<Products>) MakeCopyOf(this.ProductIdProductsCollection_From_OrderDetails, existingCopies); 
			_tmp.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(OrdersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(OrdersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(OrdersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				OrdersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OrdersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OrdersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(OrdersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OrdersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OrdersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region OrdersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Orders"/> object.
	/// </remarks>
	public class OrdersEventArgs : System.EventArgs
	{
		private OrdersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the OrdersEventArgs class.
		///</summary>
		public OrdersEventArgs(OrdersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OrdersEventArgs class.
		///</summary>
		public OrdersEventArgs(OrdersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The OrdersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OrdersColumn" />
		public OrdersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Orders related events.
	///</summary>
	public delegate void OrdersEventHandler(object sender, OrdersEventArgs e);
	
	#region OrdersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OrdersComparer : System.Collections.Generic.IComparer<Orders>
	{
		OrdersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OrdersComparer"/> class.
        /// </summary>
		public OrdersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:OrdersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OrdersComparer(OrdersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Orders"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Orders"/> to compare.</param>
        /// <param name="b">The second <c>Orders</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Orders a, Orders b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Orders entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Orders a, Orders b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OrdersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OrdersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Orders"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OrdersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey(OrdersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.OrderId = entity.OrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OrdersKey class.
		/// </summary>
		public OrdersKey(System.Int32 _orderId)
		{
			#region Init Properties

			this.OrderId = _orderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OrdersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OrdersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OrderId property
		private System.Int32 _orderId;
		
		/// <summary>
		/// Gets or sets the OrderId property.
		/// </summary>
		public System.Int32 OrderId
		{
			get { return _orderId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.OrderId = value;
				
				_orderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OrderId = ( values["OrderId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["OrderId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OrderId", OrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OrderId: {0}{1}",
								OrderId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OrdersColumn Enum
	
	/// <summary>
	/// Enumerate the Orders columns.
	/// </summary>
	[Serializable]
	public enum OrdersColumn : int
	{
		/// <summary>
		/// OrderId : 
		/// </summary>
		[EnumTextValue("OrderID")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		OrderId = 1,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 5)]
		CustomerId = 2,
		/// <summary>
		/// EmployeeId : 
		/// </summary>
		[EnumTextValue("EmployeeID")]
		[ColumnEnum("EmployeeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EmployeeId = 3,
		/// <summary>
		/// OrderDate : 
		/// </summary>
		[EnumTextValue("OrderDate")]
		[ColumnEnum("OrderDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		OrderDate = 4,
		/// <summary>
		/// RequiredDate : 
		/// </summary>
		[EnumTextValue("RequiredDate")]
		[ColumnEnum("RequiredDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RequiredDate = 5,
		/// <summary>
		/// ShippedDate : 
		/// </summary>
		[EnumTextValue("ShippedDate")]
		[ColumnEnum("ShippedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ShippedDate = 6,
		/// <summary>
		/// ShipVia : 
		/// </summary>
		[EnumTextValue("ShipVia")]
		[ColumnEnum("ShipVia", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ShipVia = 7,
		/// <summary>
		/// Freight : 
		/// </summary>
		[EnumTextValue("Freight")]
		[ColumnEnum("Freight", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		Freight = 8,
		/// <summary>
		/// ShipName : 
		/// </summary>
		[EnumTextValue("ShipName")]
		[ColumnEnum("ShipName", typeof(System.String), System.Data.DbType.String, false, false, true, 40)]
		ShipName = 9,
		/// <summary>
		/// ShipAddress : 
		/// </summary>
		[EnumTextValue("ShipAddress")]
		[ColumnEnum("ShipAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		ShipAddress = 10,
		/// <summary>
		/// ShipCity : 
		/// </summary>
		[EnumTextValue("ShipCity")]
		[ColumnEnum("ShipCity", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		ShipCity = 11,
		/// <summary>
		/// ShipRegion : 
		/// </summary>
		[EnumTextValue("ShipRegion")]
		[ColumnEnum("ShipRegion", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		ShipRegion = 12,
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		[EnumTextValue("ShipPostalCode")]
		[ColumnEnum("ShipPostalCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		ShipPostalCode = 13,
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		[EnumTextValue("ShipCountry")]
		[ColumnEnum("ShipCountry", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		ShipCountry = 14
	}//End enum

	#endregion OrdersColumn Enum

} // end namespace
