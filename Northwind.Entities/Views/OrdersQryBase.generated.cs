/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file OrdersQry.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Northwind.Entities
{
	///<summary>
	/// An object representation of the 'Orders Qry' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	public abstract partial class OrdersQryBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// OrderID : 
		/// </summary>
		private System.Int32		  _orderId = (int)0;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		private System.String		  _customerId = null;
		
		/// <summary>
		/// EmployeeID : 
		/// </summary>
		private System.Int32?		  _employeeId = null;
		
		/// <summary>
		/// OrderDate : 
		/// </summary>
		private System.DateTime?		  _orderDate = null;
		
		/// <summary>
		/// RequiredDate : 
		/// </summary>
		private System.DateTime?		  _requiredDate = null;
		
		/// <summary>
		/// ShippedDate : 
		/// </summary>
		private System.DateTime?		  _shippedDate = null;
		
		/// <summary>
		/// ShipVia : 
		/// </summary>
		private System.Int32?		  _shipVia = null;
		
		/// <summary>
		/// Freight : 
		/// </summary>
		private System.Decimal?		  _freight = null;
		
		/// <summary>
		/// ShipName : 
		/// </summary>
		private System.String		  _shipName = null;
		
		/// <summary>
		/// ShipAddress : 
		/// </summary>
		private System.String		  _shipAddress = null;
		
		/// <summary>
		/// ShipCity : 
		/// </summary>
		private System.String		  _shipCity = null;
		
		/// <summary>
		/// ShipRegion : 
		/// </summary>
		private System.String		  _shipRegion = null;
		
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		private System.String		  _shipPostalCode = null;
		
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		private System.String		  _shipCountry = null;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		private System.String		  _companyName = string.Empty;
		
		/// <summary>
		/// Address : 
		/// </summary>
		private System.String		  _address = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		private System.String		  _city = null;
		
		/// <summary>
		/// Region : 
		/// </summary>
		private System.String		  _region = null;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		private System.String		  _postalCode = null;
		
		/// <summary>
		/// Country : 
		/// </summary>
		private System.String		  _country = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OrdersQryBase"/> instance.
		///</summary>
		public OrdersQryBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="OrdersQryBase"/> instance.
		///</summary>
		///<param name="_orderId"></param>
		///<param name="_customerId"></param>
		///<param name="_employeeId"></param>
		///<param name="_orderDate"></param>
		///<param name="_requiredDate"></param>
		///<param name="_shippedDate"></param>
		///<param name="_shipVia"></param>
		///<param name="_freight"></param>
		///<param name="_shipName"></param>
		///<param name="_shipAddress"></param>
		///<param name="_shipCity"></param>
		///<param name="_shipRegion"></param>
		///<param name="_shipPostalCode"></param>
		///<param name="_shipCountry"></param>
		///<param name="_companyName"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_country"></param>
		public OrdersQryBase(System.Int32 _orderId, System.String _customerId, System.Int32? _employeeId, System.DateTime? _orderDate, System.DateTime? _requiredDate, System.DateTime? _shippedDate, System.Int32? _shipVia, System.Decimal? _freight, System.String _shipName, System.String _shipAddress, System.String _shipCity, System.String _shipRegion, System.String _shipPostalCode, System.String _shipCountry, System.String _companyName, System.String _address, System.String _city, System.String _region, System.String _postalCode, System.String _country)
		{
			this._orderId = _orderId;
			this._customerId = _customerId;
			this._employeeId = _employeeId;
			this._orderDate = _orderDate;
			this._requiredDate = _requiredDate;
			this._shippedDate = _shippedDate;
			this._shipVia = _shipVia;
			this._freight = _freight;
			this._shipName = _shipName;
			this._shipAddress = _shipAddress;
			this._shipCity = _shipCity;
			this._shipRegion = _shipRegion;
			this._shipPostalCode = _shipPostalCode;
			this._shipCountry = _shipCountry;
			this._companyName = _companyName;
			this._address = _address;
			this._city = _city;
			this._region = _region;
			this._postalCode = _postalCode;
			this._country = _country;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="OrdersQry"/> instance.
		///</summary>
		///<param name="_orderId"></param>
		///<param name="_customerId"></param>
		///<param name="_employeeId"></param>
		///<param name="_orderDate"></param>
		///<param name="_requiredDate"></param>
		///<param name="_shippedDate"></param>
		///<param name="_shipVia"></param>
		///<param name="_freight"></param>
		///<param name="_shipName"></param>
		///<param name="_shipAddress"></param>
		///<param name="_shipCity"></param>
		///<param name="_shipRegion"></param>
		///<param name="_shipPostalCode"></param>
		///<param name="_shipCountry"></param>
		///<param name="_companyName"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_country"></param>
		public static OrdersQry CreateOrdersQry(System.Int32 _orderId, System.String _customerId, System.Int32? _employeeId, System.DateTime? _orderDate, System.DateTime? _requiredDate, System.DateTime? _shippedDate, System.Int32? _shipVia, System.Decimal? _freight, System.String _shipName, System.String _shipAddress, System.String _shipCity, System.String _shipRegion, System.String _shipPostalCode, System.String _shipCountry, System.String _companyName, System.String _address, System.String _city, System.String _region, System.String _postalCode, System.String _country)
		{
			OrdersQry newOrdersQry = new OrdersQry();
			newOrdersQry.OrderId = _orderId;
			newOrdersQry.CustomerId = _customerId;
			newOrdersQry.EmployeeId = _employeeId;
			newOrdersQry.OrderDate = _orderDate;
			newOrdersQry.RequiredDate = _requiredDate;
			newOrdersQry.ShippedDate = _shippedDate;
			newOrdersQry.ShipVia = _shipVia;
			newOrdersQry.Freight = _freight;
			newOrdersQry.ShipName = _shipName;
			newOrdersQry.ShipAddress = _shipAddress;
			newOrdersQry.ShipCity = _shipCity;
			newOrdersQry.ShipRegion = _shipRegion;
			newOrdersQry.ShipPostalCode = _shipPostalCode;
			newOrdersQry.ShipCountry = _shipCountry;
			newOrdersQry.CompanyName = _companyName;
			newOrdersQry.Address = _address;
			newOrdersQry.City = _city;
			newOrdersQry.Region = _region;
			newOrdersQry.PostalCode = _postalCode;
			newOrdersQry.Country = _country;
			return newOrdersQry;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the OrderID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 OrderId
		{
			get
			{
				return this._orderId; 
			}
			set
			{
				if (_orderId == value)
					return;
					
				this._orderId = value;
				this._isDirty = true;
				
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomerID property. 
		///		
		/// </summary>
		/// <value>This type is nchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CustomerId
		{
			get
			{
				return this._customerId; 
			}
			set
			{
				if (_customerId == value)
					return;
					
				this._customerId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EmployeeID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEmployeeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? EmployeeId
		{
			get
			{
				return this._employeeId; 
			}
			set
			{
				if (_employeeId == value && EmployeeId != null )
					return;
					
				this._employeeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmployeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the OrderDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsOrderDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? OrderDate
		{
			get
			{
				return this._orderDate; 
			}
			set
			{
				if (_orderDate == value && OrderDate != null )
					return;
					
				this._orderDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("OrderDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RequiredDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRequiredDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? RequiredDate
		{
			get
			{
				return this._requiredDate; 
			}
			set
			{
				if (_requiredDate == value && RequiredDate != null )
					return;
					
				this._requiredDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("RequiredDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShippedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsShippedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? ShippedDate
		{
			get
			{
				return this._shippedDate; 
			}
			set
			{
				if (_shippedDate == value && ShippedDate != null )
					return;
					
				this._shippedDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShippedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShipVia property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsShipViaNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? ShipVia
		{
			get
			{
				return this._shipVia; 
			}
			set
			{
				if (_shipVia == value && ShipVia != null )
					return;
					
				this._shipVia = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShipVia");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Freight property. 
		///		
		/// </summary>
		/// <value>This type is money</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0. It is up to the developer
		/// to check the value of IsFreightNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Decimal? Freight
		{
			get
			{
				return this._freight; 
			}
			set
			{
				if (_freight == value && Freight != null )
					return;
					
				this._freight = value;
				this._isDirty = true;
				
				OnPropertyChanged("Freight");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShipName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ShipName
		{
			get
			{
				return this._shipName; 
			}
			set
			{
				if (_shipName == value)
					return;
					
				this._shipName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShipName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShipAddress property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ShipAddress
		{
			get
			{
				return this._shipAddress; 
			}
			set
			{
				if (_shipAddress == value)
					return;
					
				this._shipAddress = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShipAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShipCity property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ShipCity
		{
			get
			{
				return this._shipCity; 
			}
			set
			{
				if (_shipCity == value)
					return;
					
				this._shipCity = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShipCity");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShipRegion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ShipRegion
		{
			get
			{
				return this._shipRegion; 
			}
			set
			{
				if (_shipRegion == value)
					return;
					
				this._shipRegion = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShipRegion");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShipPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ShipPostalCode
		{
			get
			{
				return this._shipPostalCode; 
			}
			set
			{
				if (_shipPostalCode == value)
					return;
					
				this._shipPostalCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShipPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ShipCountry property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ShipCountry
		{
			get
			{
				return this._shipCountry; 
			}
			set
			{
				if (_shipCountry == value)
					return;
					
				this._shipCountry = value;
				this._isDirty = true;
				
				OnPropertyChanged("ShipCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyName
		{
			get
			{
				return this._companyName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CompanyName does not allow null values.");
				if (_companyName == value)
					return;
					
				this._companyName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Address
		{
			get
			{
				return this._address; 
			}
			set
			{
				if (_address == value)
					return;
					
				this._address = value;
				this._isDirty = true;
				
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String City
		{
			get
			{
				return this._city; 
			}
			set
			{
				if (_city == value)
					return;
					
				this._city = value;
				this._isDirty = true;
				
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Region property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Region
		{
			get
			{
				return this._region; 
			}
			set
			{
				if (_region == value)
					return;
					
				this._region = value;
				this._isDirty = true;
				
				OnPropertyChanged("Region");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PostalCode
		{
			get
			{
				return this._postalCode; 
			}
			set
			{
				if (_postalCode == value)
					return;
					
				this._postalCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Country
		{
			get
			{
				return this._country; 
			}
			set
			{
				if (_country == value)
					return;
					
				this._country = value;
				this._isDirty = true;
				
				OnPropertyChanged("Country");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "Orders Qry"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed OrdersQryBase Entity 
		///</summary>
		public virtual OrdersQryBase Copy()
		{
			//shallow copy entity
			OrdersQry copy = new OrdersQry();
				copy.OrderId = this.OrderId;
				copy.CustomerId = this.CustomerId;
				copy.EmployeeId = this.EmployeeId;
				copy.OrderDate = this.OrderDate;
				copy.RequiredDate = this.RequiredDate;
				copy.ShippedDate = this.ShippedDate;
				copy.ShipVia = this.ShipVia;
				copy.Freight = this.Freight;
				copy.ShipName = this.ShipName;
				copy.ShipAddress = this.ShipAddress;
				copy.ShipCity = this.ShipCity;
				copy.ShipRegion = this.ShipRegion;
				copy.ShipPostalCode = this.ShipPostalCode;
				copy.ShipCountry = this.ShipCountry;
				copy.CompanyName = this.CompanyName;
				copy.Address = this.Address;
				copy.City = this.City;
				copy.Region = this.Region;
				copy.PostalCode = this.PostalCode;
				copy.Country = this.Country;
			copy.AcceptChanges();
			return (OrdersQry)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OrdersQryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OrdersQryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="OrdersQryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="OrdersQryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OrdersQryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(OrdersQryBase Object1, OrdersQryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.OrderId != Object2.OrderId)
				equal = false;
			if (Object1.CustomerId != null && Object2.CustomerId != null )
			{
				if (Object1.CustomerId != Object2.CustomerId)
					equal = false;
			}
			else if (Object1.CustomerId == null ^ Object1.CustomerId == null )
			{
				equal = false;
			}
			if (Object1.EmployeeId != null && Object2.EmployeeId != null )
			{
				if (Object1.EmployeeId != Object2.EmployeeId)
					equal = false;
			}
			else if (Object1.EmployeeId == null ^ Object1.EmployeeId == null )
			{
				equal = false;
			}
			if (Object1.OrderDate != null && Object2.OrderDate != null )
			{
				if (Object1.OrderDate != Object2.OrderDate)
					equal = false;
			}
			else if (Object1.OrderDate == null ^ Object1.OrderDate == null )
			{
				equal = false;
			}
			if (Object1.RequiredDate != null && Object2.RequiredDate != null )
			{
				if (Object1.RequiredDate != Object2.RequiredDate)
					equal = false;
			}
			else if (Object1.RequiredDate == null ^ Object1.RequiredDate == null )
			{
				equal = false;
			}
			if (Object1.ShippedDate != null && Object2.ShippedDate != null )
			{
				if (Object1.ShippedDate != Object2.ShippedDate)
					equal = false;
			}
			else if (Object1.ShippedDate == null ^ Object1.ShippedDate == null )
			{
				equal = false;
			}
			if (Object1.ShipVia != null && Object2.ShipVia != null )
			{
				if (Object1.ShipVia != Object2.ShipVia)
					equal = false;
			}
			else if (Object1.ShipVia == null ^ Object1.ShipVia == null )
			{
				equal = false;
			}
			if (Object1.Freight != null && Object2.Freight != null )
			{
				if (Object1.Freight != Object2.Freight)
					equal = false;
			}
			else if (Object1.Freight == null ^ Object1.Freight == null )
			{
				equal = false;
			}
			if (Object1.ShipName != null && Object2.ShipName != null )
			{
				if (Object1.ShipName != Object2.ShipName)
					equal = false;
			}
			else if (Object1.ShipName == null ^ Object1.ShipName == null )
			{
				equal = false;
			}
			if (Object1.ShipAddress != null && Object2.ShipAddress != null )
			{
				if (Object1.ShipAddress != Object2.ShipAddress)
					equal = false;
			}
			else if (Object1.ShipAddress == null ^ Object1.ShipAddress == null )
			{
				equal = false;
			}
			if (Object1.ShipCity != null && Object2.ShipCity != null )
			{
				if (Object1.ShipCity != Object2.ShipCity)
					equal = false;
			}
			else if (Object1.ShipCity == null ^ Object1.ShipCity == null )
			{
				equal = false;
			}
			if (Object1.ShipRegion != null && Object2.ShipRegion != null )
			{
				if (Object1.ShipRegion != Object2.ShipRegion)
					equal = false;
			}
			else if (Object1.ShipRegion == null ^ Object1.ShipRegion == null )
			{
				equal = false;
			}
			if (Object1.ShipPostalCode != null && Object2.ShipPostalCode != null )
			{
				if (Object1.ShipPostalCode != Object2.ShipPostalCode)
					equal = false;
			}
			else if (Object1.ShipPostalCode == null ^ Object1.ShipPostalCode == null )
			{
				equal = false;
			}
			if (Object1.ShipCountry != null && Object2.ShipCountry != null )
			{
				if (Object1.ShipCountry != Object2.ShipCountry)
					equal = false;
			}
			else if (Object1.ShipCountry == null ^ Object1.ShipCountry == null )
			{
				equal = false;
			}
			if (Object1.CompanyName != Object2.CompanyName)
				equal = false;
			if (Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object1.Address == null )
			{
				equal = false;
			}
			if (Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object1.City == null )
			{
				equal = false;
			}
			if (Object1.Region != null && Object2.Region != null )
			{
				if (Object1.Region != Object2.Region)
					equal = false;
			}
			else if (Object1.Region == null ^ Object1.Region == null )
			{
				equal = false;
			}
			if (Object1.PostalCode != null && Object2.PostalCode != null )
			{
				if (Object1.PostalCode != Object2.PostalCode)
					equal = false;
			}
			else if (Object1.PostalCode == null ^ Object1.PostalCode == null )
			{
				equal = false;
			}
			if (Object1.Country != null && Object2.Country != null )
			{
				if (Object1.Country != Object2.Country)
					equal = false;
			}
			else if (Object1.Country == null ^ Object1.Country == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(OrdersQry entity, string propertyName)
		{
			switch (propertyName)
			{
				case "OrderId":
					return entity.OrderId;
				case "CustomerId":
					return entity.CustomerId;
				case "EmployeeId":
					return entity.EmployeeId;
				case "OrderDate":
					return entity.OrderDate;
				case "RequiredDate":
					return entity.RequiredDate;
				case "ShippedDate":
					return entity.ShippedDate;
				case "ShipVia":
					return entity.ShipVia;
				case "Freight":
					return entity.Freight;
				case "ShipName":
					return entity.ShipName;
				case "ShipAddress":
					return entity.ShipAddress;
				case "ShipCity":
					return entity.ShipCity;
				case "ShipRegion":
					return entity.ShipRegion;
				case "ShipPostalCode":
					return entity.ShipPostalCode;
				case "ShipCountry":
					return entity.ShipCountry;
				case "CompanyName":
					return entity.CompanyName;
				case "Address":
					return entity.Address;
				case "City":
					return entity.City;
				case "Region":
					return entity.Region;
				case "PostalCode":
					return entity.PostalCode;
				case "Country":
					return entity.Country;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as OrdersQry, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- OrderId: {0}{20}- CustomerId: {1}{20}- EmployeeId: {2}{20}- OrderDate: {3}{20}- RequiredDate: {4}{20}- ShippedDate: {5}{20}- ShipVia: {6}{20}- Freight: {7}{20}- ShipName: {8}{20}- ShipAddress: {9}{20}- ShipCity: {10}{20}- ShipRegion: {11}{20}- ShipPostalCode: {12}{20}- ShipCountry: {13}{20}- CompanyName: {14}{20}- Address: {15}{20}- City: {16}{20}- Region: {17}{20}- PostalCode: {18}{20}- Country: {19}{20}", 
				this.OrderId,
				(this.CustomerId == null) ? string.Empty : this.CustomerId.ToString(),
			     
				(this.EmployeeId == null) ? string.Empty : this.EmployeeId.ToString(),
			     
				(this.OrderDate == null) ? string.Empty : this.OrderDate.ToString(),
			     
				(this.RequiredDate == null) ? string.Empty : this.RequiredDate.ToString(),
			     
				(this.ShippedDate == null) ? string.Empty : this.ShippedDate.ToString(),
			     
				(this.ShipVia == null) ? string.Empty : this.ShipVia.ToString(),
			     
				(this.Freight == null) ? string.Empty : this.Freight.ToString(),
			     
				(this.ShipName == null) ? string.Empty : this.ShipName.ToString(),
			     
				(this.ShipAddress == null) ? string.Empty : this.ShipAddress.ToString(),
			     
				(this.ShipCity == null) ? string.Empty : this.ShipCity.ToString(),
			     
				(this.ShipRegion == null) ? string.Empty : this.ShipRegion.ToString(),
			     
				(this.ShipPostalCode == null) ? string.Empty : this.ShipPostalCode.ToString(),
			     
				(this.ShipCountry == null) ? string.Empty : this.ShipCountry.ToString(),
			     
				this.CompanyName,
				(this.Address == null) ? string.Empty : this.Address.ToString(),
			     
				(this.City == null) ? string.Empty : this.City.ToString(),
			     
				(this.Region == null) ? string.Empty : this.Region.ToString(),
			     
				(this.PostalCode == null) ? string.Empty : this.PostalCode.ToString(),
			     
				(this.Country == null) ? string.Empty : this.Country.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the OrdersQry columns.
	/// </summary>
	[Serializable]
	public enum OrdersQryColumn
	{
		/// <summary>
		/// OrderID : 
		/// </summary>
		[EnumTextValue("OrderID")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		OrderId,
		/// <summary>
		/// CustomerID : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 5)]
		CustomerId,
		/// <summary>
		/// EmployeeID : 
		/// </summary>
		[EnumTextValue("EmployeeID")]
		[ColumnEnum("EmployeeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EmployeeId,
		/// <summary>
		/// OrderDate : 
		/// </summary>
		[EnumTextValue("OrderDate")]
		[ColumnEnum("OrderDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		OrderDate,
		/// <summary>
		/// RequiredDate : 
		/// </summary>
		[EnumTextValue("RequiredDate")]
		[ColumnEnum("RequiredDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RequiredDate,
		/// <summary>
		/// ShippedDate : 
		/// </summary>
		[EnumTextValue("ShippedDate")]
		[ColumnEnum("ShippedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ShippedDate,
		/// <summary>
		/// ShipVia : 
		/// </summary>
		[EnumTextValue("ShipVia")]
		[ColumnEnum("ShipVia", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ShipVia,
		/// <summary>
		/// Freight : 
		/// </summary>
		[EnumTextValue("Freight")]
		[ColumnEnum("Freight", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		Freight,
		/// <summary>
		/// ShipName : 
		/// </summary>
		[EnumTextValue("ShipName")]
		[ColumnEnum("ShipName", typeof(System.String), System.Data.DbType.String, false, false, true, 40)]
		ShipName,
		/// <summary>
		/// ShipAddress : 
		/// </summary>
		[EnumTextValue("ShipAddress")]
		[ColumnEnum("ShipAddress", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		ShipAddress,
		/// <summary>
		/// ShipCity : 
		/// </summary>
		[EnumTextValue("ShipCity")]
		[ColumnEnum("ShipCity", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		ShipCity,
		/// <summary>
		/// ShipRegion : 
		/// </summary>
		[EnumTextValue("ShipRegion")]
		[ColumnEnum("ShipRegion", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		ShipRegion,
		/// <summary>
		/// ShipPostalCode : 
		/// </summary>
		[EnumTextValue("ShipPostalCode")]
		[ColumnEnum("ShipPostalCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		ShipPostalCode,
		/// <summary>
		/// ShipCountry : 
		/// </summary>
		[EnumTextValue("ShipCountry")]
		[ColumnEnum("ShipCountry", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		ShipCountry,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.String, false, false, false, 40)]
		CompanyName,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		Address,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		City,
		/// <summary>
		/// Region : 
		/// </summary>
		[EnumTextValue("Region")]
		[ColumnEnum("Region", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Region,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		[EnumTextValue("PostalCode")]
		[ColumnEnum("PostalCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		PostalCode,
		/// <summary>
		/// Country : 
		/// </summary>
		[EnumTextValue("Country")]
		[ColumnEnum("Country", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Country
	}//End enum

} // end namespace
