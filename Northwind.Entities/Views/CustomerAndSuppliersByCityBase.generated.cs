/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CustomerAndSuppliersByCity.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace Northwind.Entities
{
	///<summary>
	/// An object representation of the 'Customer and Suppliers by City' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("CustomerAndSuppliersByCityBase")]
	public abstract partial class CustomerAndSuppliersByCityBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// City : 
		/// </summary>
		private System.String		  _city = null;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		private System.String		  _companyName = string.Empty;
		
		/// <summary>
		/// ContactName : 
		/// </summary>
		private System.String		  _contactName = null;
		
		/// <summary>
		/// Relationship : 
		/// </summary>
		private System.String		  _relationship = string.Empty;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomerAndSuppliersByCityBase"/> instance.
		///</summary>
		public CustomerAndSuppliersByCityBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomerAndSuppliersByCityBase"/> instance.
		///</summary>
		///<param name="_city"></param>
		///<param name="_companyName"></param>
		///<param name="_contactName"></param>
		///<param name="_relationship"></param>
		public CustomerAndSuppliersByCityBase(System.String _city, System.String _companyName, System.String _contactName, System.String _relationship)
		{
			this._city = _city;
			this._companyName = _companyName;
			this._contactName = _contactName;
			this._relationship = _relationship;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomerAndSuppliersByCity"/> instance.
		///</summary>
		///<param name="_city"></param>
		///<param name="_companyName"></param>
		///<param name="_contactName"></param>
		///<param name="_relationship"></param>
		public static CustomerAndSuppliersByCity CreateCustomerAndSuppliersByCity(System.String _city, System.String _companyName, System.String _contactName, System.String _relationship)
		{
			CustomerAndSuppliersByCity newCustomerAndSuppliersByCity = new CustomerAndSuppliersByCity();
			newCustomerAndSuppliersByCity.City = _city;
			newCustomerAndSuppliersByCity.CompanyName = _companyName;
			newCustomerAndSuppliersByCity.ContactName = _contactName;
			newCustomerAndSuppliersByCity.Relationship = _relationship;
			return newCustomerAndSuppliersByCity;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String City
		{
			get
			{
				return this._city; 
			}
			set
			{
				if (_city == value)
					return;
					
				this._city = value;
				this._isDirty = true;
				
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyName
		{
			get
			{
				return this._companyName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "CompanyName does not allow null values.");
				if (_companyName == value)
					return;
					
				this._companyName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ContactName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ContactName
		{
			get
			{
				return this._contactName; 
			}
			set
			{
				if (_contactName == value)
					return;
					
				this._contactName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Relationship property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Relationship
		{
			get
			{
				return this._relationship; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Relationship does not allow null values.");
				if (_relationship == value)
					return;
					
				this._relationship = value;
				this._isDirty = true;
				
				OnPropertyChanged("Relationship");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "Customer and Suppliers by City"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomerAndSuppliersByCityBase Entity 
		///</summary>
		public virtual CustomerAndSuppliersByCityBase Copy()
		{
			//shallow copy entity
			CustomerAndSuppliersByCity copy = new CustomerAndSuppliersByCity();
				copy.City = this.City;
				copy.CompanyName = this.CompanyName;
				copy.ContactName = this.ContactName;
				copy.Relationship = this.Relationship;
			copy.AcceptChanges();
			return (CustomerAndSuppliersByCity)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomerAndSuppliersByCityBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomerAndSuppliersByCityBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CustomerAndSuppliersByCityBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CustomerAndSuppliersByCityBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomerAndSuppliersByCityBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CustomerAndSuppliersByCityBase Object1, CustomerAndSuppliersByCityBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object1.City == null )
			{
				equal = false;
			}
			if (Object1.CompanyName != Object2.CompanyName)
				equal = false;
			if (Object1.ContactName != null && Object2.ContactName != null )
			{
				if (Object1.ContactName != Object2.ContactName)
					equal = false;
			}
			else if (Object1.ContactName == null ^ Object1.ContactName == null )
			{
				equal = false;
			}
			if (Object1.Relationship != Object2.Relationship)
				equal = false;
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(CustomerAndSuppliersByCity entity, string propertyName)
		{
			switch (propertyName)
			{
				case "City":
					return entity.City;
				case "CompanyName":
					return entity.CompanyName;
				case "ContactName":
					return entity.ContactName;
				case "Relationship":
					return entity.Relationship;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as CustomerAndSuppliersByCity, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{5}{4}- City: {0}{4}- CompanyName: {1}{4}- ContactName: {2}{4}- Relationship: {3}{4}", 
				(this.City == null) ? string.Empty : this.City.ToString(),
			     
				this.CompanyName,
				(this.ContactName == null) ? string.Empty : this.ContactName.ToString(),
			     
				this.Relationship,
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the CustomerAndSuppliersByCity columns.
	/// </summary>
	[Serializable]
	public enum CustomerAndSuppliersByCityColumn
	{
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		City,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.String, false, false, false, 40)]
		CompanyName,
		/// <summary>
		/// ContactName : 
		/// </summary>
		[EnumTextValue("ContactName")]
		[ColumnEnum("ContactName", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ContactName,
		/// <summary>
		/// Relationship : 
		/// </summary>
		[EnumTextValue("Relationship")]
		[ColumnEnum("Relationship", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 9)]
		Relationship
	}//End enum

} // end namespace
