
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Products.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Northwind.Entities.Validation;
#endregion

namespace Northwind.Entities
{
	///<summary>
	/// An object representation of the 'Products' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ProductsBase : EntityBase, IProducts, IEntityId<ProductsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ProductsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ProductsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ProductsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Products> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProductsBase"/> instance.
		///</summary>
		public ProductsBase()
		{
			this.entityData = new ProductsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProductsBase"/> instance.
		///</summary>
		///<param name="_productName"></param>
		///<param name="_supplierId"></param>
		///<param name="_categoryId"></param>
		///<param name="_quantityPerUnit"></param>
		///<param name="_unitPrice"></param>
		///<param name="_unitsInStock"></param>
		///<param name="_unitsOnOrder"></param>
		///<param name="_reorderLevel"></param>
		///<param name="_discontinued"></param>
		public ProductsBase(System.String _productName, System.Int32? _supplierId, System.Int32? _categoryId, 
			System.String _quantityPerUnit, System.Decimal? _unitPrice, System.Int16? _unitsInStock, System.Int16? _unitsOnOrder, 
			System.Int16? _reorderLevel, System.Boolean _discontinued)
		{
			this.entityData = new ProductsEntityData();
			this.backupData = null;

			this.ProductName = _productName;
			this.SupplierId = _supplierId;
			this.CategoryId = _categoryId;
			this.QuantityPerUnit = _quantityPerUnit;
			this.UnitPrice = _unitPrice;
			this.UnitsInStock = _unitsInStock;
			this.UnitsOnOrder = _unitsOnOrder;
			this.ReorderLevel = _reorderLevel;
			this.Discontinued = _discontinued;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Products"/> instance.
		///</summary>
		///<param name="_productName"></param>
		///<param name="_supplierId"></param>
		///<param name="_categoryId"></param>
		///<param name="_quantityPerUnit"></param>
		///<param name="_unitPrice"></param>
		///<param name="_unitsInStock"></param>
		///<param name="_unitsOnOrder"></param>
		///<param name="_reorderLevel"></param>
		///<param name="_discontinued"></param>
		public static Products CreateProducts(System.String _productName, System.Int32? _supplierId, System.Int32? _categoryId, 
			System.String _quantityPerUnit, System.Decimal? _unitPrice, System.Int16? _unitsInStock, System.Int16? _unitsOnOrder, 
			System.Int16? _reorderLevel, System.Boolean _discontinued)
		{
			Products newProducts = new Products();
			newProducts.ProductName = _productName;
			newProducts.SupplierId = _supplierId;
			newProducts.CategoryId = _categoryId;
			newProducts.QuantityPerUnit = _quantityPerUnit;
			newProducts.UnitPrice = _unitPrice;
			newProducts.UnitsInStock = _unitsInStock;
			newProducts.UnitsOnOrder = _unitsOnOrder;
			newProducts.ReorderLevel = _reorderLevel;
			newProducts.Discontinued = _discontinued;
			return newProducts;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 ProductId
		{
			get
			{
				return this.entityData.ProductId; 
			}
			
			set
			{
				if (this.entityData.ProductId == value)
					return;
				
                OnPropertyChanging("ProductId");                    
				OnColumnChanging(ProductsColumn.ProductId, this.entityData.ProductId);
				this.entityData.ProductId = value;
				this.EntityId.ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.ProductId, this.entityData.ProductId);
				OnPropertyChanged("ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 40)]
		public virtual System.String ProductName
		{
			get
			{
				return this.entityData.ProductName; 
			}
			
			set
			{
				if (this.entityData.ProductName == value)
					return;
				
                OnPropertyChanging("ProductName");                    
				OnColumnChanging(ProductsColumn.ProductName, this.entityData.ProductName);
				this.entityData.ProductName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.ProductName, this.entityData.ProductName);
				OnPropertyChanged("ProductName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SupplierId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSupplierIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SupplierId
		{
			get
			{
				return this.entityData.SupplierId; 
			}
			
			set
			{
				if (this.entityData.SupplierId == value)
					return;
				
                OnPropertyChanging("SupplierId");                    
				OnColumnChanging(ProductsColumn.SupplierId, this.entityData.SupplierId);
				this.entityData.SupplierId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.SupplierId, this.entityData.SupplierId);
				OnPropertyChanged("SupplierId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CategoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCategoryIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CategoryId
		{
			get
			{
				return this.entityData.CategoryId; 
			}
			
			set
			{
				if (this.entityData.CategoryId == value)
					return;
				
                OnPropertyChanging("CategoryId");                    
				OnColumnChanging(ProductsColumn.CategoryId, this.entityData.CategoryId);
				this.entityData.CategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.CategoryId, this.entityData.CategoryId);
				OnPropertyChanged("CategoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuantityPerUnit property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String QuantityPerUnit
		{
			get
			{
				return this.entityData.QuantityPerUnit; 
			}
			
			set
			{
				if (this.entityData.QuantityPerUnit == value)
					return;
				
                OnPropertyChanging("QuantityPerUnit");                    
				OnColumnChanging(ProductsColumn.QuantityPerUnit, this.entityData.QuantityPerUnit);
				this.entityData.QuantityPerUnit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.QuantityPerUnit, this.entityData.QuantityPerUnit);
				OnPropertyChanged("QuantityPerUnit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitPrice property. 
		///		
		/// </summary>
		/// <value>This type is money.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0m. It is up to the developer
		/// to check the value of IsUnitPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? UnitPrice
		{
			get
			{
				return this.entityData.UnitPrice; 
			}
			
			set
			{
				if (this.entityData.UnitPrice == value)
					return;
				
                OnPropertyChanging("UnitPrice");                    
				OnColumnChanging(ProductsColumn.UnitPrice, this.entityData.UnitPrice);
				this.entityData.UnitPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.UnitPrice, this.entityData.UnitPrice);
				OnPropertyChanged("UnitPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitsInStock property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsUnitsInStockNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? UnitsInStock
		{
			get
			{
				return this.entityData.UnitsInStock; 
			}
			
			set
			{
				if (this.entityData.UnitsInStock == value)
					return;
				
                OnPropertyChanging("UnitsInStock");                    
				OnColumnChanging(ProductsColumn.UnitsInStock, this.entityData.UnitsInStock);
				this.entityData.UnitsInStock = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.UnitsInStock, this.entityData.UnitsInStock);
				OnPropertyChanged("UnitsInStock");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitsOnOrder property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsUnitsOnOrderNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? UnitsOnOrder
		{
			get
			{
				return this.entityData.UnitsOnOrder; 
			}
			
			set
			{
				if (this.entityData.UnitsOnOrder == value)
					return;
				
                OnPropertyChanging("UnitsOnOrder");                    
				OnColumnChanging(ProductsColumn.UnitsOnOrder, this.entityData.UnitsOnOrder);
				this.entityData.UnitsOnOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.UnitsOnOrder, this.entityData.UnitsOnOrder);
				OnPropertyChanged("UnitsOnOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReorderLevel property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsReorderLevelNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? ReorderLevel
		{
			get
			{
				return this.entityData.ReorderLevel; 
			}
			
			set
			{
				if (this.entityData.ReorderLevel == value)
					return;
				
                OnPropertyChanging("ReorderLevel");                    
				OnColumnChanging(ProductsColumn.ReorderLevel, this.entityData.ReorderLevel);
				this.entityData.ReorderLevel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.ReorderLevel, this.entityData.ReorderLevel);
				OnPropertyChanged("ReorderLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Discontinued property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Discontinued
		{
			get
			{
				return this.entityData.Discontinued; 
			}
			
			set
			{
				if (this.entityData.Discontinued == value)
					return;
				
                OnPropertyChanging("Discontinued");                    
				OnColumnChanging(ProductsColumn.Discontinued, this.entityData.Discontinued);
				this.entityData.Discontinued = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductsColumn.Discontinued, this.entityData.Discontinued);
				OnPropertyChanged("Discontinued");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Categories"/>.
		/// </summary>
		/// <value>The source Categories for CategoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Categories CategoryIdSource
      	{
            get { return entityData.CategoryIdSource; }
            set { entityData.CategoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Suppliers"/>.
		/// </summary>
		/// <value>The source Suppliers for SupplierId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Suppliers SupplierIdSource
      	{
            get { return entityData.SupplierIdSource; }
            set { entityData.SupplierIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of OrderDetails objects
		///	which are related to this object through the relation FK_Order_Details_Products
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<OrderDetails> OrderDetailsCollection
		{
			get { return entityData.OrderDetailsCollection; }
			set { entityData.OrderDetailsCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of OrdersFromOrderDetails objects
		///	which are related to this object through the junction table OrderDetails
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Orders> OrderIdOrdersCollection_From_OrderDetails
		{
			get { return entityData.OrderIdOrdersCollection_From_OrderDetails; }
			set { entityData.OrderIdOrdersCollection_From_OrderDetails = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ProductName", "Product Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ProductName", "Product Name", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("QuantityPerUnit", "Quantity Per Unit", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Products"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ProductID", "ProductName", "SupplierID", "CategoryID", "QuantityPerUnit", "UnitPrice", "UnitsInStock", "UnitsOnOrder", "ReorderLevel", "Discontinued"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProductsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Products) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Products>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Products);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Products Entity 
		///</summary>
		protected virtual Products Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Products copy = new Products();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ProductId = this.ProductId;
				copy.ProductName = this.ProductName;
				copy.SupplierId = this.SupplierId;
				copy.CategoryId = this.CategoryId;
				copy.QuantityPerUnit = this.QuantityPerUnit;
				copy.UnitPrice = this.UnitPrice;
				copy.UnitsInStock = this.UnitsInStock;
				copy.UnitsOnOrder = this.UnitsOnOrder;
				copy.ReorderLevel = this.ReorderLevel;
				copy.Discontinued = this.Discontinued;
			
			if (this.CategoryIdSource != null && existingCopies.Contains(this.CategoryIdSource))
				copy.CategoryIdSource = existingCopies[this.CategoryIdSource] as Categories;
			else
				copy.CategoryIdSource = MakeCopyOf(this.CategoryIdSource, existingCopies) as Categories;
			if (this.SupplierIdSource != null && existingCopies.Contains(this.SupplierIdSource))
				copy.SupplierIdSource = existingCopies[this.SupplierIdSource] as Suppliers;
			else
				copy.SupplierIdSource = MakeCopyOf(this.SupplierIdSource, existingCopies) as Suppliers;
		
			//deep copy nested objects
			copy.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection, existingCopies); 
			copy.OrderIdOrdersCollection_From_OrderDetails = (TList<Orders>) MakeCopyOf(this.OrderIdOrdersCollection_From_OrderDetails, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Products Entity 
		///</summary>
		public virtual Products Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Products Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Products DeepCopy()
		{
			return EntityHelper.Clone<Products>(this as Products);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ProductsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ProductsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ProductsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ProductsColumn column)
		{
			switch(column)
			{
					case ProductsColumn.ProductId:
					return entityData.ProductId != _originalData.ProductId;
					case ProductsColumn.ProductName:
					return entityData.ProductName != _originalData.ProductName;
					case ProductsColumn.SupplierId:
					return entityData.SupplierId != _originalData.SupplierId;
					case ProductsColumn.CategoryId:
					return entityData.CategoryId != _originalData.CategoryId;
					case ProductsColumn.QuantityPerUnit:
					return entityData.QuantityPerUnit != _originalData.QuantityPerUnit;
					case ProductsColumn.UnitPrice:
					return entityData.UnitPrice != _originalData.UnitPrice;
					case ProductsColumn.UnitsInStock:
					return entityData.UnitsInStock != _originalData.UnitsInStock;
					case ProductsColumn.UnitsOnOrder:
					return entityData.UnitsOnOrder != _originalData.UnitsOnOrder;
					case ProductsColumn.ReorderLevel:
					return entityData.ReorderLevel != _originalData.ReorderLevel;
					case ProductsColumn.Discontinued:
					return entityData.Discontinued != _originalData.Discontinued;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ProductsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ProductId != _originalData.ProductId;
			result = result || entityData.ProductName != _originalData.ProductName;
			result = result || entityData.SupplierId != _originalData.SupplierId;
			result = result || entityData.CategoryId != _originalData.CategoryId;
			result = result || entityData.QuantityPerUnit != _originalData.QuantityPerUnit;
			result = result || entityData.UnitPrice != _originalData.UnitPrice;
			result = result || entityData.UnitsInStock != _originalData.UnitsInStock;
			result = result || entityData.UnitsOnOrder != _originalData.UnitsOnOrder;
			result = result || entityData.ReorderLevel != _originalData.ReorderLevel;
			result = result || entityData.Discontinued != _originalData.Discontinued;
			return result;
		}	
		
		///<summary>
		///  Returns a Products Entity with the original data.
		///</summary>
		public Products GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateProducts(
				_originalData.ProductName,
				_originalData.SupplierId,
				_originalData.CategoryId,
				_originalData.QuantityPerUnit,
				_originalData.UnitPrice,
				_originalData.UnitsInStock,
				_originalData.UnitsOnOrder,
				_originalData.ReorderLevel,
				_originalData.Discontinued
				);
				
			return (Products)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ProductsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ProductsBase)
				return ValueEquals(this, (ProductsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ProductsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ProductId.GetHashCode() ^ 
					this.ProductName.GetHashCode() ^ 
					((this.SupplierId == null) ? string.Empty : this.SupplierId.ToString()).GetHashCode() ^ 
					((this.CategoryId == null) ? string.Empty : this.CategoryId.ToString()).GetHashCode() ^ 
					((this.QuantityPerUnit == null) ? string.Empty : this.QuantityPerUnit.ToString()).GetHashCode() ^ 
					((this.UnitPrice == null) ? string.Empty : this.UnitPrice.ToString()).GetHashCode() ^ 
					((this.UnitsInStock == null) ? string.Empty : this.UnitsInStock.ToString()).GetHashCode() ^ 
					((this.UnitsOnOrder == null) ? string.Empty : this.UnitsOnOrder.ToString()).GetHashCode() ^ 
					((this.ReorderLevel == null) ? string.Empty : this.ReorderLevel.ToString()).GetHashCode() ^ 
					this.Discontinued.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProductsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProductsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ProductsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ProductsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProductsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ProductsBase Object1, ProductsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if (Object1.ProductName != Object2.ProductName)
				equal = false;
			if ( Object1.SupplierId != null && Object2.SupplierId != null )
			{
				if (Object1.SupplierId != Object2.SupplierId)
					equal = false;
			}
			else if (Object1.SupplierId == null ^ Object2.SupplierId == null )
			{
				equal = false;
			}
			if ( Object1.CategoryId != null && Object2.CategoryId != null )
			{
				if (Object1.CategoryId != Object2.CategoryId)
					equal = false;
			}
			else if (Object1.CategoryId == null ^ Object2.CategoryId == null )
			{
				equal = false;
			}
			if ( Object1.QuantityPerUnit != null && Object2.QuantityPerUnit != null )
			{
				if (Object1.QuantityPerUnit != Object2.QuantityPerUnit)
					equal = false;
			}
			else if (Object1.QuantityPerUnit == null ^ Object2.QuantityPerUnit == null )
			{
				equal = false;
			}
			if ( Object1.UnitPrice != null && Object2.UnitPrice != null )
			{
				if (Object1.UnitPrice != Object2.UnitPrice)
					equal = false;
			}
			else if (Object1.UnitPrice == null ^ Object2.UnitPrice == null )
			{
				equal = false;
			}
			if ( Object1.UnitsInStock != null && Object2.UnitsInStock != null )
			{
				if (Object1.UnitsInStock != Object2.UnitsInStock)
					equal = false;
			}
			else if (Object1.UnitsInStock == null ^ Object2.UnitsInStock == null )
			{
				equal = false;
			}
			if ( Object1.UnitsOnOrder != null && Object2.UnitsOnOrder != null )
			{
				if (Object1.UnitsOnOrder != Object2.UnitsOnOrder)
					equal = false;
			}
			else if (Object1.UnitsOnOrder == null ^ Object2.UnitsOnOrder == null )
			{
				equal = false;
			}
			if ( Object1.ReorderLevel != null && Object2.ReorderLevel != null )
			{
				if (Object1.ReorderLevel != Object2.ReorderLevel)
					equal = false;
			}
			else if (Object1.ReorderLevel == null ^ Object2.ReorderLevel == null )
			{
				equal = false;
			}
			if (Object1.Discontinued != Object2.Discontinued)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ProductsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ProductsComparer GetComparer()
        {
            return new ProductsComparer();
        }
        */

        // Comparer delegates back to Products
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Products rhs, ProductsColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProductsColumn.ProductId:
            		return this.ProductId.CompareTo(rhs.ProductId);
            		
            		                 
            	
            	
            	case ProductsColumn.ProductName:
            		return this.ProductName.CompareTo(rhs.ProductName);
            		
            		                 
            	
            	
            	case ProductsColumn.SupplierId:
            		return this.SupplierId.Value.CompareTo(rhs.SupplierId.Value);
            		
            		                 
            	
            	
            	case ProductsColumn.CategoryId:
            		return this.CategoryId.Value.CompareTo(rhs.CategoryId.Value);
            		
            		                 
            	
            	
            	case ProductsColumn.QuantityPerUnit:
            		return this.QuantityPerUnit.CompareTo(rhs.QuantityPerUnit);
            		
            		                 
            	
            	
            	case ProductsColumn.UnitPrice:
            		return this.UnitPrice.Value.CompareTo(rhs.UnitPrice.Value);
            		
            		                 
            	
            	
            	case ProductsColumn.UnitsInStock:
            		return this.UnitsInStock.Value.CompareTo(rhs.UnitsInStock.Value);
            		
            		                 
            	
            	
            	case ProductsColumn.UnitsOnOrder:
            		return this.UnitsOnOrder.Value.CompareTo(rhs.UnitsOnOrder.Value);
            		
            		                 
            	
            	
            	case ProductsColumn.ReorderLevel:
            		return this.ReorderLevel.Value.CompareTo(rhs.ReorderLevel.Value);
            		
            		                 
            	
            	
            	case ProductsColumn.Discontinued:
            		return this.Discontinued.CompareTo(rhs.Discontinued);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProductsKey> Members
		
		// member variable for the EntityId property
		private ProductsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ProductsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProductsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Products")
					.Append("|").Append( this.ProductId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- ProductId: {0}{10}- ProductName: {1}{10}- SupplierId: {2}{10}- CategoryId: {3}{10}- QuantityPerUnit: {4}{10}- UnitPrice: {5}{10}- UnitsInStock: {6}{10}- UnitsOnOrder: {7}{10}- ReorderLevel: {8}{10}- Discontinued: {9}{10}{12}", 
				this.ProductId,
				this.ProductName,
				(this.SupplierId == null) ? string.Empty : this.SupplierId.ToString(),
				(this.CategoryId == null) ? string.Empty : this.CategoryId.ToString(),
				(this.QuantityPerUnit == null) ? string.Empty : this.QuantityPerUnit.ToString(),
				(this.UnitPrice == null) ? string.Empty : this.UnitPrice.ToString(),
				(this.UnitsInStock == null) ? string.Empty : this.UnitsInStock.ToString(),
				(this.UnitsOnOrder == null) ? string.Empty : this.UnitsOnOrder.ToString(),
				(this.ReorderLevel == null) ? string.Empty : this.ReorderLevel.ToString(),
				this.Discontinued,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Products' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ProductsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ProductID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Products"</remarks>
		public System.Int32 ProductId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ProductName : 
		/// </summary>
		public System.String ProductName = string.Empty;
		
		/// <summary>
		/// SupplierID : 
		/// </summary>
		public System.Int32? SupplierId = null;
		
		/// <summary>
		/// CategoryID : 
		/// </summary>
		public System.Int32? CategoryId = null;
		
		/// <summary>
		/// QuantityPerUnit : 
		/// </summary>
		public System.String QuantityPerUnit = null;
		
		/// <summary>
		/// UnitPrice : 
		/// </summary>
		public System.Decimal? UnitPrice = 0m;
		
		/// <summary>
		/// UnitsInStock : 
		/// </summary>
		public System.Int16? UnitsInStock = null;
		
		/// <summary>
		/// UnitsOnOrder : 
		/// </summary>
		public System.Int16? UnitsOnOrder = null;
		
		/// <summary>
		/// ReorderLevel : 
		/// </summary>
		public System.Int16? ReorderLevel = null;
		
		/// <summary>
		/// Discontinued : 
		/// </summary>
		public System.Boolean Discontinued = false;
		#endregion
			
		#region Source Foreign Key Property
				
		private Categories _categoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Categories"/>.
		/// </summary>
		/// <value>The source Categories for CategoryId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Categories CategoryIdSource
      	{
            get { return this._categoryIdSource; }
            set { this._categoryIdSource = value; }
      	}
		private Suppliers _supplierIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Suppliers"/>.
		/// </summary>
		/// <value>The source Suppliers for SupplierId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Suppliers SupplierIdSource
      	{
            get { return this._supplierIdSource; }
            set { this._supplierIdSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region OrderDetailsCollection
		
		private TList<OrderDetails> _orderDetailsProductId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _orderDetailsProductId
		/// </summary>
		
		public TList<OrderDetails> OrderDetailsCollection
		{
			get
			{
				if (_orderDetailsProductId == null)
				{
				_orderDetailsProductId = new TList<OrderDetails>();
				}
	
				return _orderDetailsProductId;
			}
			set { _orderDetailsProductId = value; }
		}
		
		#endregion

		#region OrderIdOrdersCollection_From_OrderDetails
		
		private TList<Orders> orderIdOrdersCollectionFromOrderDetails;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table orderIdOrdersCollectionFromOrderDetails
		/// </summary>
		
		public TList<Orders> OrderIdOrdersCollection_From_OrderDetails
		{
			get
			{
				if (orderIdOrdersCollectionFromOrderDetails == null)
				{
				orderIdOrdersCollectionFromOrderDetails = new TList<Orders>();
				}
	
				return orderIdOrdersCollectionFromOrderDetails;
			}
			set { orderIdOrdersCollectionFromOrderDetails = value; }
		}
		
		#endregion 

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ProductsEntityData _tmp = new ProductsEntityData();
						
			_tmp.ProductId = this.ProductId;
			
			_tmp.ProductName = this.ProductName;
			_tmp.SupplierId = this.SupplierId;
			_tmp.CategoryId = this.CategoryId;
			_tmp.QuantityPerUnit = this.QuantityPerUnit;
			_tmp.UnitPrice = this.UnitPrice;
			_tmp.UnitsInStock = this.UnitsInStock;
			_tmp.UnitsOnOrder = this.UnitsOnOrder;
			_tmp.ReorderLevel = this.ReorderLevel;
			_tmp.Discontinued = this.Discontinued;
			
			#region Source Parent Composite Entities
			if (this.CategoryIdSource != null)
				_tmp.CategoryIdSource = MakeCopyOf(this.CategoryIdSource) as Categories;
			if (this.SupplierIdSource != null)
				_tmp.SupplierIdSource = MakeCopyOf(this.SupplierIdSource) as Suppliers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._orderDetailsProductId != null)
				_tmp.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection); 
			if (this.orderIdOrdersCollectionFromOrderDetails != null)
				_tmp.OrderIdOrdersCollection_From_OrderDetails = (TList<Orders>) MakeCopyOf(this.OrderIdOrdersCollection_From_OrderDetails); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ProductsEntityData _tmp = new ProductsEntityData();
						
			_tmp.ProductId = this.ProductId;
			
			_tmp.ProductName = this.ProductName;
			_tmp.SupplierId = this.SupplierId;
			_tmp.CategoryId = this.CategoryId;
			_tmp.QuantityPerUnit = this.QuantityPerUnit;
			_tmp.UnitPrice = this.UnitPrice;
			_tmp.UnitsInStock = this.UnitsInStock;
			_tmp.UnitsOnOrder = this.UnitsOnOrder;
			_tmp.ReorderLevel = this.ReorderLevel;
			_tmp.Discontinued = this.Discontinued;
			
			#region Source Parent Composite Entities
			if (this.CategoryIdSource != null && existingCopies.Contains(this.CategoryIdSource))
				_tmp.CategoryIdSource = existingCopies[this.CategoryIdSource] as Categories;
			else
				_tmp.CategoryIdSource = MakeCopyOf(this.CategoryIdSource, existingCopies) as Categories;
			if (this.SupplierIdSource != null && existingCopies.Contains(this.SupplierIdSource))
				_tmp.SupplierIdSource = existingCopies[this.SupplierIdSource] as Suppliers;
			else
				_tmp.SupplierIdSource = MakeCopyOf(this.SupplierIdSource, existingCopies) as Suppliers;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.OrderDetailsCollection = (TList<OrderDetails>) MakeCopyOf(this.OrderDetailsCollection, existingCopies); 
			_tmp.OrderIdOrdersCollection_From_OrderDetails = (TList<Orders>) MakeCopyOf(this.OrderIdOrdersCollection_From_OrderDetails, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ProductsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ProductsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ProductsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ProductsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProductsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ProductsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProductsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProductsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ProductsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Products"/> object.
	/// </remarks>
	public class ProductsEventArgs : System.EventArgs
	{
		private ProductsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ProductsEventArgs class.
		///</summary>
		public ProductsEventArgs(ProductsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProductsEventArgs class.
		///</summary>
		public ProductsEventArgs(ProductsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ProductsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProductsColumn" />
		public ProductsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Products related events.
	///</summary>
	public delegate void ProductsEventHandler(object sender, ProductsEventArgs e);
	
	#region ProductsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProductsComparer : System.Collections.Generic.IComparer<Products>
	{
		ProductsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProductsComparer"/> class.
        /// </summary>
		public ProductsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProductsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProductsComparer(ProductsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Products"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Products"/> to compare.</param>
        /// <param name="b">The second <c>Products</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Products a, Products b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Products entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Products a, Products b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProductsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProductsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Products"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProductsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProductsKey class.
		/// </summary>
		public ProductsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductsKey class.
		/// </summary>
		public ProductsKey(ProductsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ProductId = entity.ProductId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductsKey class.
		/// </summary>
		public ProductsKey(System.Int32 _productId)
		{
			#region Init Properties

			this.ProductId = _productId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProductsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProductsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ProductId property
		private System.Int32 _productId;
		
		/// <summary>
		/// Gets or sets the ProductId property.
		/// </summary>
		public System.Int32 ProductId
		{
			get { return _productId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ProductId = value;
				
				_productId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ProductId = ( values["ProductId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProductId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ProductId", ProductId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ProductId: {0}{1}",
								ProductId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProductsColumn Enum
	
	/// <summary>
	/// Enumerate the Products columns.
	/// </summary>
	[Serializable]
	public enum ProductsColumn : int
	{
		/// <summary>
		/// ProductId : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		ProductId = 1,
		/// <summary>
		/// ProductName : 
		/// </summary>
		[EnumTextValue("ProductName")]
		[ColumnEnum("ProductName", typeof(System.String), System.Data.DbType.String, false, false, false, 40)]
		ProductName = 2,
		/// <summary>
		/// SupplierId : 
		/// </summary>
		[EnumTextValue("SupplierID")]
		[ColumnEnum("SupplierID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SupplierId = 3,
		/// <summary>
		/// CategoryId : 
		/// </summary>
		[EnumTextValue("CategoryID")]
		[ColumnEnum("CategoryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CategoryId = 4,
		/// <summary>
		/// QuantityPerUnit : 
		/// </summary>
		[EnumTextValue("QuantityPerUnit")]
		[ColumnEnum("QuantityPerUnit", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		QuantityPerUnit = 5,
		/// <summary>
		/// UnitPrice : 
		/// </summary>
		[EnumTextValue("UnitPrice")]
		[ColumnEnum("UnitPrice", typeof(System.Decimal), System.Data.DbType.Currency, false, false, true)]
		UnitPrice = 6,
		/// <summary>
		/// UnitsInStock : 
		/// </summary>
		[EnumTextValue("UnitsInStock")]
		[ColumnEnum("UnitsInStock", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		UnitsInStock = 7,
		/// <summary>
		/// UnitsOnOrder : 
		/// </summary>
		[EnumTextValue("UnitsOnOrder")]
		[ColumnEnum("UnitsOnOrder", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		UnitsOnOrder = 8,
		/// <summary>
		/// ReorderLevel : 
		/// </summary>
		[EnumTextValue("ReorderLevel")]
		[ColumnEnum("ReorderLevel", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		ReorderLevel = 9,
		/// <summary>
		/// Discontinued : 
		/// </summary>
		[EnumTextValue("Discontinued")]
		[ColumnEnum("Discontinued", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Discontinued = 10
	}//End enum

	#endregion ProductsColumn Enum

} // end namespace
