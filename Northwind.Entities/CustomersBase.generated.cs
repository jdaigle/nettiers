
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Customers.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Northwind.Entities.Validation;
#endregion

namespace Northwind.Entities
{
	///<summary>
	/// An object representation of the 'Customers' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CustomersBase : EntityBase, ICustomers, IEntityId<CustomersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Customers> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomersBase"/> instance.
		///</summary>
		public CustomersBase()
		{
			this.entityData = new CustomersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomersBase"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_companyName"></param>
		///<param name="_contactName"></param>
		///<param name="_contactTitle"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_country"></param>
		///<param name="_phone"></param>
		///<param name="_fax"></param>
		public CustomersBase(System.String _customerId, System.String _companyName, System.String _contactName, 
			System.String _contactTitle, System.String _address, System.String _city, System.String _region, 
			System.String _postalCode, System.String _country, System.String _phone, System.String _fax)
		{
			this.entityData = new CustomersEntityData();
			this.backupData = null;

			this.CustomerId = _customerId;
			this.CompanyName = _companyName;
			this.ContactName = _contactName;
			this.ContactTitle = _contactTitle;
			this.Address = _address;
			this.City = _city;
			this.Region = _region;
			this.PostalCode = _postalCode;
			this.Country = _country;
			this.Phone = _phone;
			this.Fax = _fax;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Customers"/> instance.
		///</summary>
		///<param name="_customerId"></param>
		///<param name="_companyName"></param>
		///<param name="_contactName"></param>
		///<param name="_contactTitle"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_country"></param>
		///<param name="_phone"></param>
		///<param name="_fax"></param>
		public static Customers CreateCustomers(System.String _customerId, System.String _companyName, System.String _contactName, 
			System.String _contactTitle, System.String _address, System.String _city, System.String _region, 
			System.String _postalCode, System.String _country, System.String _phone, System.String _fax)
		{
			Customers newCustomers = new Customers();
			newCustomers.CustomerId = _customerId;
			newCustomers.CompanyName = _companyName;
			newCustomers.ContactName = _contactName;
			newCustomers.ContactTitle = _contactTitle;
			newCustomers.Address = _address;
			newCustomers.City = _city;
			newCustomers.Region = _region;
			newCustomers.PostalCode = _postalCode;
			newCustomers.Country = _country;
			newCustomers.Phone = _phone;
			newCustomers.Fax = _fax;
			return newCustomers;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 5)]
		public virtual System.String CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
				
                OnPropertyChanging("CustomerId");                    
				OnColumnChanging(CustomersColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				this.EntityId.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CustomerID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the CustomerID property.</remarks>
		/// <value>This type is nchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalCustomerId
		{
			get { return this.entityData.OriginalCustomerId; }
			set { this.entityData.OriginalCustomerId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 40)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
				
                OnPropertyChanging("CompanyName");                    
				OnColumnChanging(CustomersColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String ContactName
		{
			get
			{
				return this.entityData.ContactName; 
			}
			
			set
			{
				if (this.entityData.ContactName == value)
					return;
				
                OnPropertyChanging("ContactName");                    
				OnColumnChanging(CustomersColumn.ContactName, this.entityData.ContactName);
				this.entityData.ContactName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.ContactName, this.entityData.ContactName);
				OnPropertyChanged("ContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactTitle property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String ContactTitle
		{
			get
			{
				return this.entityData.ContactTitle; 
			}
			
			set
			{
				if (this.entityData.ContactTitle == value)
					return;
				
                OnPropertyChanging("ContactTitle");                    
				OnColumnChanging(CustomersColumn.ContactTitle, this.entityData.ContactTitle);
				this.entityData.ContactTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.ContactTitle, this.entityData.ContactTitle);
				OnPropertyChanged("ContactTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(CustomersColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
				
                OnPropertyChanging("City");                    
				OnColumnChanging(CustomersColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Region property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Region
		{
			get
			{
				return this.entityData.Region; 
			}
			
			set
			{
				if (this.entityData.Region == value)
					return;
				
                OnPropertyChanging("Region");                    
				OnColumnChanging(CustomersColumn.Region, this.entityData.Region);
				this.entityData.Region = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.Region, this.entityData.Region);
				OnPropertyChanged("Region");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String PostalCode
		{
			get
			{
				return this.entityData.PostalCode; 
			}
			
			set
			{
				if (this.entityData.PostalCode == value)
					return;
				
                OnPropertyChanging("PostalCode");                    
				OnColumnChanging(CustomersColumn.PostalCode, this.entityData.PostalCode);
				this.entityData.PostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.PostalCode, this.entityData.PostalCode);
				OnPropertyChanged("PostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Country
		{
			get
			{
				return this.entityData.Country; 
			}
			
			set
			{
				if (this.entityData.Country == value)
					return;
				
                OnPropertyChanging("Country");                    
				OnColumnChanging(CustomersColumn.Country, this.entityData.Country);
				this.entityData.Country = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.Country, this.entityData.Country);
				OnPropertyChanged("Country");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 24)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
				
                OnPropertyChanging("Phone");                    
				OnColumnChanging(CustomersColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 24)]
		public virtual System.String Fax
		{
			get
			{
				return this.entityData.Fax; 
			}
			
			set
			{
				if (this.entityData.Fax == value)
					return;
				
                OnPropertyChanging("Fax");                    
				OnColumnChanging(CustomersColumn.Fax, this.entityData.Fax);
				this.entityData.Fax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomersColumn.Fax, this.entityData.Fax);
				OnPropertyChanged("Fax");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Orders objects
		///	which are related to this object through the relation FK_Orders_Customers
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Orders> OrdersCollection
		{
			get { return entityData.OrdersCollection; }
			set { entityData.OrdersCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of CustomerDemographicsFromCustomerCustomerDemo objects
		///	which are related to this object through the junction table CustomerCustomerDemo
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerDemographics> CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo
		{
			get { return entityData.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo; }
			set { entityData.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CustomerCustomerDemo objects
		///	which are related to this object through the relation FK_CustomerCustomerDemo_Customers
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerCustomerDemo> CustomerCustomerDemoCollection
		{
			get { return entityData.CustomerCustomerDemoCollection; }
			set { entityData.CustomerCustomerDemoCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CustomerId", "Customer Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomerId", "Customer Id", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CompanyName", "Company Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CompanyName", "Company Name", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ContactName", "Contact Name", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ContactTitle", "Contact Title", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("City", "City", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Region", "Region", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PostalCode", "Postal Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Country", "Country", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 24));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fax", "Fax", 24));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Customers"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CustomerID", "CompanyName", "ContactName", "ContactTitle", "Address", "City", "Region", "PostalCode", "Country", "Phone", "Fax"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Customers) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Customers>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Customers);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Customers Entity 
		///</summary>
		protected virtual Customers Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Customers copy = new Customers();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CustomerId = this.CustomerId;
					copy.OriginalCustomerId = this.OriginalCustomerId;
				copy.CompanyName = this.CompanyName;
				copy.ContactName = this.ContactName;
				copy.ContactTitle = this.ContactTitle;
				copy.Address = this.Address;
				copy.City = this.City;
				copy.Region = this.Region;
				copy.PostalCode = this.PostalCode;
				copy.Country = this.Country;
				copy.Phone = this.Phone;
				copy.Fax = this.Fax;
			
		
			//deep copy nested objects
			copy.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection, existingCopies); 
			copy.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo = (TList<CustomerDemographics>) MakeCopyOf(this.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo, existingCopies); 
			copy.CustomerCustomerDemoCollection = (TList<CustomerCustomerDemo>) MakeCopyOf(this.CustomerCustomerDemoCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Customers Entity 
		///</summary>
		public virtual Customers Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Customers Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Customers DeepCopy()
		{
			return EntityHelper.Clone<Customers>(this as Customers);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CustomersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomersColumn column)
		{
			switch(column)
			{
					case CustomersColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case CustomersColumn.CompanyName:
					return entityData.CompanyName != _originalData.CompanyName;
					case CustomersColumn.ContactName:
					return entityData.ContactName != _originalData.ContactName;
					case CustomersColumn.ContactTitle:
					return entityData.ContactTitle != _originalData.ContactTitle;
					case CustomersColumn.Address:
					return entityData.Address != _originalData.Address;
					case CustomersColumn.City:
					return entityData.City != _originalData.City;
					case CustomersColumn.Region:
					return entityData.Region != _originalData.Region;
					case CustomersColumn.PostalCode:
					return entityData.PostalCode != _originalData.PostalCode;
					case CustomersColumn.Country:
					return entityData.Country != _originalData.Country;
					case CustomersColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case CustomersColumn.Fax:
					return entityData.Fax != _originalData.Fax;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CustomersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.CompanyName != _originalData.CompanyName;
			result = result || entityData.ContactName != _originalData.ContactName;
			result = result || entityData.ContactTitle != _originalData.ContactTitle;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.Region != _originalData.Region;
			result = result || entityData.PostalCode != _originalData.PostalCode;
			result = result || entityData.Country != _originalData.Country;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Fax != _originalData.Fax;
			return result;
		}	
		
		///<summary>
		///  Returns a Customers Entity with the original data.
		///</summary>
		public Customers GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCustomers(
				_originalData.CustomerId,
				_originalData.CompanyName,
				_originalData.ContactName,
				_originalData.ContactTitle,
				_originalData.Address,
				_originalData.City,
				_originalData.Region,
				_originalData.PostalCode,
				_originalData.Country,
				_originalData.Phone,
				_originalData.Fax
				);
				
			return (Customers)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CustomersBase)
				return ValueEquals(this, (CustomersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CustomerId.GetHashCode() ^ 
					this.CompanyName.GetHashCode() ^ 
					((this.ContactName == null) ? string.Empty : this.ContactName.ToString()).GetHashCode() ^ 
					((this.ContactTitle == null) ? string.Empty : this.ContactTitle.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					((this.Region == null) ? string.Empty : this.Region.ToString()).GetHashCode() ^ 
					((this.PostalCode == null) ? string.Empty : this.PostalCode.ToString()).GetHashCode() ^ 
					((this.Country == null) ? string.Empty : this.Country.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.Fax == null) ? string.Empty : this.Fax.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CustomersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CustomersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CustomersBase Object1, CustomersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.CompanyName != Object2.CompanyName)
				equal = false;
			if ( Object1.ContactName != null && Object2.ContactName != null )
			{
				if (Object1.ContactName != Object2.ContactName)
					equal = false;
			}
			else if (Object1.ContactName == null ^ Object2.ContactName == null )
			{
				equal = false;
			}
			if ( Object1.ContactTitle != null && Object2.ContactTitle != null )
			{
				if (Object1.ContactTitle != Object2.ContactTitle)
					equal = false;
			}
			else if (Object1.ContactTitle == null ^ Object2.ContactTitle == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if ( Object1.Region != null && Object2.Region != null )
			{
				if (Object1.Region != Object2.Region)
					equal = false;
			}
			else if (Object1.Region == null ^ Object2.Region == null )
			{
				equal = false;
			}
			if ( Object1.PostalCode != null && Object2.PostalCode != null )
			{
				if (Object1.PostalCode != Object2.PostalCode)
					equal = false;
			}
			else if (Object1.PostalCode == null ^ Object2.PostalCode == null )
			{
				equal = false;
			}
			if ( Object1.Country != null && Object2.Country != null )
			{
				if (Object1.Country != Object2.Country)
					equal = false;
			}
			else if (Object1.Country == null ^ Object2.Country == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object2.Fax == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomersComparer GetComparer()
        {
            return new CustomersComparer();
        }
        */

        // Comparer delegates back to Customers
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Customers rhs, CustomersColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomersColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case CustomersColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case CustomersColumn.ContactName:
            		return this.ContactName.CompareTo(rhs.ContactName);
            		
            		                 
            	
            	
            	case CustomersColumn.ContactTitle:
            		return this.ContactTitle.CompareTo(rhs.ContactTitle);
            		
            		                 
            	
            	
            	case CustomersColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case CustomersColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case CustomersColumn.Region:
            		return this.Region.CompareTo(rhs.Region);
            		
            		                 
            	
            	
            	case CustomersColumn.PostalCode:
            		return this.PostalCode.CompareTo(rhs.PostalCode);
            		
            		                 
            	
            	
            	case CustomersColumn.Country:
            		return this.Country.CompareTo(rhs.Country);
            		
            		                 
            	
            	
            	case CustomersColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case CustomersColumn.Fax:
            		return this.Fax.CompareTo(rhs.Fax);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomersKey> Members
		
		// member variable for the EntityId property
		private CustomersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Customers")
					.Append("|").Append( this.CustomerId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- CustomerId: {0}{11}- CompanyName: {1}{11}- ContactName: {2}{11}- ContactTitle: {3}{11}- Address: {4}{11}- City: {5}{11}- Region: {6}{11}- PostalCode: {7}{11}- Country: {8}{11}- Phone: {9}{11}- Fax: {10}{11}{13}", 
				this.CustomerId,
				this.CompanyName,
				(this.ContactName == null) ? string.Empty : this.ContactName.ToString(),
				(this.ContactTitle == null) ? string.Empty : this.ContactTitle.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.Region == null) ? string.Empty : this.Region.ToString(),
				(this.PostalCode == null) ? string.Empty : this.PostalCode.ToString(),
				(this.Country == null) ? string.Empty : this.Country.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Customers' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CustomerID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Customers"</remarks>
		public System.String CustomerId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalCustomerId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String CompanyName = string.Empty;
		
		/// <summary>
		/// ContactName : 
		/// </summary>
		public System.String ContactName = null;
		
		/// <summary>
		/// ContactTitle : 
		/// </summary>
		public System.String ContactTitle = null;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String Address = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String City = null;
		
		/// <summary>
		/// Region : 
		/// </summary>
		public System.String Region = null;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		public System.String PostalCode = null;
		
		/// <summary>
		/// Country : 
		/// </summary>
		public System.String Country = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String Phone = null;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		public System.String Fax = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region OrdersCollection
		
		private TList<Orders> _ordersCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ordersCustomerId
		/// </summary>
		
		public TList<Orders> OrdersCollection
		{
			get
			{
				if (_ordersCustomerId == null)
				{
				_ordersCustomerId = new TList<Orders>();
				}
	
				return _ordersCustomerId;
			}
			set { _ordersCustomerId = value; }
		}
		
		#endregion

		#region CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo
		
		private TList<CustomerDemographics> customerTypeIdCustomerDemographicsCollectionFromCustomerCustomerDemo;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table customerTypeIdCustomerDemographicsCollectionFromCustomerCustomerDemo
		/// </summary>
		
		public TList<CustomerDemographics> CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo
		{
			get
			{
				if (customerTypeIdCustomerDemographicsCollectionFromCustomerCustomerDemo == null)
				{
				customerTypeIdCustomerDemographicsCollectionFromCustomerCustomerDemo = new TList<CustomerDemographics>();
				}
	
				return customerTypeIdCustomerDemographicsCollectionFromCustomerCustomerDemo;
			}
			set { customerTypeIdCustomerDemographicsCollectionFromCustomerCustomerDemo = value; }
		}
		
		#endregion 

		#region CustomerCustomerDemoCollection
		
		private TList<CustomerCustomerDemo> _customerCustomerDemoCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerCustomerDemoCustomerId
		/// </summary>
		
		public TList<CustomerCustomerDemo> CustomerCustomerDemoCollection
		{
			get
			{
				if (_customerCustomerDemoCustomerId == null)
				{
				_customerCustomerDemoCustomerId = new TList<CustomerCustomerDemo>();
				}
	
				return _customerCustomerDemoCustomerId;
			}
			set { _customerCustomerDemoCustomerId = value; }
		}
		
		#endregion

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomersEntityData _tmp = new CustomersEntityData();
						
			_tmp.CustomerId = this.CustomerId;
			_tmp.OriginalCustomerId = this.OriginalCustomerId;
			
			_tmp.CompanyName = this.CompanyName;
			_tmp.ContactName = this.ContactName;
			_tmp.ContactTitle = this.ContactTitle;
			_tmp.Address = this.Address;
			_tmp.City = this.City;
			_tmp.Region = this.Region;
			_tmp.PostalCode = this.PostalCode;
			_tmp.Country = this.Country;
			_tmp.Phone = this.Phone;
			_tmp.Fax = this.Fax;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._ordersCustomerId != null)
				_tmp.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection); 
			if (this.customerTypeIdCustomerDemographicsCollectionFromCustomerCustomerDemo != null)
				_tmp.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo = (TList<CustomerDemographics>) MakeCopyOf(this.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo); 
			if (this._customerCustomerDemoCustomerId != null)
				_tmp.CustomerCustomerDemoCollection = (TList<CustomerCustomerDemo>) MakeCopyOf(this.CustomerCustomerDemoCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CustomersEntityData _tmp = new CustomersEntityData();
						
			_tmp.CustomerId = this.CustomerId;
			_tmp.OriginalCustomerId = this.OriginalCustomerId;
			
			_tmp.CompanyName = this.CompanyName;
			_tmp.ContactName = this.ContactName;
			_tmp.ContactTitle = this.ContactTitle;
			_tmp.Address = this.Address;
			_tmp.City = this.City;
			_tmp.Region = this.Region;
			_tmp.PostalCode = this.PostalCode;
			_tmp.Country = this.Country;
			_tmp.Phone = this.Phone;
			_tmp.Fax = this.Fax;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection, existingCopies); 
			_tmp.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo = (TList<CustomerDemographics>) MakeCopyOf(this.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo, existingCopies); 
			_tmp.CustomerCustomerDemoCollection = (TList<CustomerCustomerDemo>) MakeCopyOf(this.CustomerCustomerDemoCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CustomersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CustomersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CustomersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				CustomersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CustomersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Customers"/> object.
	/// </remarks>
	public class CustomersEventArgs : System.EventArgs
	{
		private CustomersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomersEventArgs class.
		///</summary>
		public CustomersEventArgs(CustomersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomersEventArgs class.
		///</summary>
		public CustomersEventArgs(CustomersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomersColumn" />
		public CustomersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Customers related events.
	///</summary>
	public delegate void CustomersEventHandler(object sender, CustomersEventArgs e);
	
	#region CustomersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomersComparer : System.Collections.Generic.IComparer<Customers>
	{
		CustomersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomersComparer"/> class.
        /// </summary>
		public CustomersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomersComparer(CustomersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Customers"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Customers"/> to compare.</param>
        /// <param name="b">The second <c>Customers</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Customers a, Customers b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Customers entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Customers a, Customers b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Customers"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomersKey class.
		/// </summary>
		public CustomersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomersKey class.
		/// </summary>
		public CustomersKey(CustomersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CustomerId = entity.CustomerId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomersKey class.
		/// </summary>
		public CustomersKey(System.String _customerId)
		{
			#region Init Properties

			this.CustomerId = _customerId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CustomerId property
		private System.String _customerId;
		
		/// <summary>
		/// Gets or sets the CustomerId property.
		/// </summary>
		public System.String CustomerId
		{
			get { return _customerId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CustomerId = value;
				
				_customerId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CustomerId = ( values["CustomerId"] != null ) ? (System.String) EntityUtil.ChangeType(values["CustomerId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CustomerId", CustomerId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CustomerId: {0}{1}",
								CustomerId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomersColumn Enum
	
	/// <summary>
	/// Enumerate the Customers columns.
	/// </summary>
	[Serializable]
	public enum CustomersColumn : int
	{
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.String), System.Data.DbType.StringFixedLength, true, false, false, 5)]
		CustomerId = 1,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.String, false, false, false, 40)]
		CompanyName = 2,
		/// <summary>
		/// ContactName : 
		/// </summary>
		[EnumTextValue("ContactName")]
		[ColumnEnum("ContactName", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ContactName = 3,
		/// <summary>
		/// ContactTitle : 
		/// </summary>
		[EnumTextValue("ContactTitle")]
		[ColumnEnum("ContactTitle", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ContactTitle = 4,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		Address = 5,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		City = 6,
		/// <summary>
		/// Region : 
		/// </summary>
		[EnumTextValue("Region")]
		[ColumnEnum("Region", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Region = 7,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		[EnumTextValue("PostalCode")]
		[ColumnEnum("PostalCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		PostalCode = 8,
		/// <summary>
		/// Country : 
		/// </summary>
		[EnumTextValue("Country")]
		[ColumnEnum("Country", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Country = 9,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.String, false, false, true, 24)]
		Phone = 10,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.String, false, false, true, 24)]
		Fax = 11
	}//End enum

	#endregion CustomersColumn Enum

} // end namespace
