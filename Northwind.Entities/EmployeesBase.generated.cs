
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Employees.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using Northwind.Entities.Validation;
#endregion

namespace Northwind.Entities
{
	///<summary>
	/// An object representation of the 'Employees' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class EmployeesBase : EntityBase, IEmployees, IEntityId<EmployeesKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EmployeesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EmployeesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EmployeesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Employees> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmployeesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmployeesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EmployeesBase"/> instance.
		///</summary>
		public EmployeesBase()
		{
			this.entityData = new EmployeesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EmployeesBase"/> instance.
		///</summary>
		///<param name="_lastName"></param>
		///<param name="_firstName"></param>
		///<param name="_title"></param>
		///<param name="_titleOfCourtesy"></param>
		///<param name="_birthDate"></param>
		///<param name="_hireDate"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_country"></param>
		///<param name="_homePhone"></param>
		///<param name="_extension"></param>
		///<param name="_photo"></param>
		///<param name="_notes"></param>
		///<param name="_reportsTo"></param>
		///<param name="_photoPath"></param>
		public EmployeesBase(System.String _lastName, System.String _firstName, System.String _title, 
			System.String _titleOfCourtesy, System.DateTime? _birthDate, System.DateTime? _hireDate, System.String _address, 
			System.String _city, System.String _region, System.String _postalCode, System.String _country, 
			System.String _homePhone, System.String _extension, System.Byte[] _photo, System.String _notes, 
			System.Int32? _reportsTo, System.String _photoPath)
		{
			this.entityData = new EmployeesEntityData();
			this.backupData = null;

			this.LastName = _lastName;
			this.FirstName = _firstName;
			this.Title = _title;
			this.TitleOfCourtesy = _titleOfCourtesy;
			this.BirthDate = _birthDate;
			this.HireDate = _hireDate;
			this.Address = _address;
			this.City = _city;
			this.Region = _region;
			this.PostalCode = _postalCode;
			this.Country = _country;
			this.HomePhone = _homePhone;
			this.Extension = _extension;
			this.Photo = _photo;
			this.Notes = _notes;
			this.ReportsTo = _reportsTo;
			this.PhotoPath = _photoPath;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Employees"/> instance.
		///</summary>
		///<param name="_lastName"></param>
		///<param name="_firstName"></param>
		///<param name="_title"></param>
		///<param name="_titleOfCourtesy"></param>
		///<param name="_birthDate"></param>
		///<param name="_hireDate"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_country"></param>
		///<param name="_homePhone"></param>
		///<param name="_extension"></param>
		///<param name="_photo"></param>
		///<param name="_notes"></param>
		///<param name="_reportsTo"></param>
		///<param name="_photoPath"></param>
		public static Employees CreateEmployees(System.String _lastName, System.String _firstName, System.String _title, 
			System.String _titleOfCourtesy, System.DateTime? _birthDate, System.DateTime? _hireDate, System.String _address, 
			System.String _city, System.String _region, System.String _postalCode, System.String _country, 
			System.String _homePhone, System.String _extension, System.Byte[] _photo, System.String _notes, 
			System.Int32? _reportsTo, System.String _photoPath)
		{
			Employees newEmployees = new Employees();
			newEmployees.LastName = _lastName;
			newEmployees.FirstName = _firstName;
			newEmployees.Title = _title;
			newEmployees.TitleOfCourtesy = _titleOfCourtesy;
			newEmployees.BirthDate = _birthDate;
			newEmployees.HireDate = _hireDate;
			newEmployees.Address = _address;
			newEmployees.City = _city;
			newEmployees.Region = _region;
			newEmployees.PostalCode = _postalCode;
			newEmployees.Country = _country;
			newEmployees.HomePhone = _homePhone;
			newEmployees.Extension = _extension;
			newEmployees.Photo = _photo;
			newEmployees.Notes = _notes;
			newEmployees.ReportsTo = _reportsTo;
			newEmployees.PhotoPath = _photoPath;
			return newEmployees;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EmployeeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 EmployeeId
		{
			get
			{
				return this.entityData.EmployeeId; 
			}
			
			set
			{
				if (this.entityData.EmployeeId == value)
					return;
				
                OnPropertyChanging("EmployeeId");                    
				OnColumnChanging(EmployeesColumn.EmployeeId, this.entityData.EmployeeId);
				this.entityData.EmployeeId = value;
				this.EntityId.EmployeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.EmployeeId, this.entityData.EmployeeId);
				OnPropertyChanged("EmployeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String LastName
		{
			get
			{
				return this.entityData.LastName; 
			}
			
			set
			{
				if (this.entityData.LastName == value)
					return;
				
                OnPropertyChanging("LastName");                    
				OnColumnChanging(EmployeesColumn.LastName, this.entityData.LastName);
				this.entityData.LastName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.LastName, this.entityData.LastName);
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String FirstName
		{
			get
			{
				return this.entityData.FirstName; 
			}
			
			set
			{
				if (this.entityData.FirstName == value)
					return;
				
                OnPropertyChanging("FirstName");                    
				OnColumnChanging(EmployeesColumn.FirstName, this.entityData.FirstName);
				this.entityData.FirstName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.FirstName, this.entityData.FirstName);
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
				
                OnPropertyChanging("Title");                    
				OnColumnChanging(EmployeesColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TitleOfCourtesy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String TitleOfCourtesy
		{
			get
			{
				return this.entityData.TitleOfCourtesy; 
			}
			
			set
			{
				if (this.entityData.TitleOfCourtesy == value)
					return;
				
                OnPropertyChanging("TitleOfCourtesy");                    
				OnColumnChanging(EmployeesColumn.TitleOfCourtesy, this.entityData.TitleOfCourtesy);
				this.entityData.TitleOfCourtesy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.TitleOfCourtesy, this.entityData.TitleOfCourtesy);
				OnPropertyChanged("TitleOfCourtesy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BirthDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBirthDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BirthDate
		{
			get
			{
				return this.entityData.BirthDate; 
			}
			
			set
			{
				if (this.entityData.BirthDate == value)
					return;
				
                OnPropertyChanging("BirthDate");                    
				OnColumnChanging(EmployeesColumn.BirthDate, this.entityData.BirthDate);
				this.entityData.BirthDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.BirthDate, this.entityData.BirthDate);
				OnPropertyChanged("BirthDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HireDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsHireDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? HireDate
		{
			get
			{
				return this.entityData.HireDate; 
			}
			
			set
			{
				if (this.entityData.HireDate == value)
					return;
				
                OnPropertyChanging("HireDate");                    
				OnColumnChanging(EmployeesColumn.HireDate, this.entityData.HireDate);
				this.entityData.HireDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.HireDate, this.entityData.HireDate);
				OnPropertyChanged("HireDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 60)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(EmployeesColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
				
                OnPropertyChanging("City");                    
				OnColumnChanging(EmployeesColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Region property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Region
		{
			get
			{
				return this.entityData.Region; 
			}
			
			set
			{
				if (this.entityData.Region == value)
					return;
				
                OnPropertyChanging("Region");                    
				OnColumnChanging(EmployeesColumn.Region, this.entityData.Region);
				this.entityData.Region = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.Region, this.entityData.Region);
				OnPropertyChanged("Region");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String PostalCode
		{
			get
			{
				return this.entityData.PostalCode; 
			}
			
			set
			{
				if (this.entityData.PostalCode == value)
					return;
				
                OnPropertyChanging("PostalCode");                    
				OnColumnChanging(EmployeesColumn.PostalCode, this.entityData.PostalCode);
				this.entityData.PostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.PostalCode, this.entityData.PostalCode);
				OnPropertyChanged("PostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Country
		{
			get
			{
				return this.entityData.Country; 
			}
			
			set
			{
				if (this.entityData.Country == value)
					return;
				
                OnPropertyChanging("Country");                    
				OnColumnChanging(EmployeesColumn.Country, this.entityData.Country);
				this.entityData.Country = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.Country, this.entityData.Country);
				OnPropertyChanged("Country");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HomePhone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 24)]
		public virtual System.String HomePhone
		{
			get
			{
				return this.entityData.HomePhone; 
			}
			
			set
			{
				if (this.entityData.HomePhone == value)
					return;
				
                OnPropertyChanging("HomePhone");                    
				OnColumnChanging(EmployeesColumn.HomePhone, this.entityData.HomePhone);
				this.entityData.HomePhone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.HomePhone, this.entityData.HomePhone);
				OnPropertyChanged("HomePhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Extension property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String Extension
		{
			get
			{
				return this.entityData.Extension; 
			}
			
			set
			{
				if (this.entityData.Extension == value)
					return;
				
                OnPropertyChanging("Extension");                    
				OnColumnChanging(EmployeesColumn.Extension, this.entityData.Extension);
				this.entityData.Extension = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.Extension, this.entityData.Extension);
				OnPropertyChanged("Extension");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Photo property. 
		///		
		/// </summary>
		/// <value>This type is image.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] Photo
		{
			get
			{
				return this.entityData.Photo; 
			}
			
			set
			{
				if (this.entityData.Photo == value)
					return;
				
                OnPropertyChanging("Photo");                    
				OnColumnChanging(EmployeesColumn.Photo, this.entityData.Photo);
				this.entityData.Photo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.Photo, this.entityData.Photo);
				OnPropertyChanged("Photo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
				
                OnPropertyChanging("Notes");                    
				OnColumnChanging(EmployeesColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReportsTo property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReportsToNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ReportsTo
		{
			get
			{
				return this.entityData.ReportsTo; 
			}
			
			set
			{
				if (this.entityData.ReportsTo == value)
					return;
				
                OnPropertyChanging("ReportsTo");                    
				OnColumnChanging(EmployeesColumn.ReportsTo, this.entityData.ReportsTo);
				this.entityData.ReportsTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.ReportsTo, this.entityData.ReportsTo);
				OnPropertyChanged("ReportsTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhotoPath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String PhotoPath
		{
			get
			{
				return this.entityData.PhotoPath; 
			}
			
			set
			{
				if (this.entityData.PhotoPath == value)
					return;
				
                OnPropertyChanging("PhotoPath");                    
				OnColumnChanging(EmployeesColumn.PhotoPath, this.entityData.PhotoPath);
				this.entityData.PhotoPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmployeesColumn.PhotoPath, this.entityData.PhotoPath);
				OnPropertyChanged("PhotoPath");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Employees"/>.
		/// </summary>
		/// <value>The source Employees for ReportsTo.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Employees ReportsToSource
      	{
            get { return entityData.ReportsToSource; }
            set { entityData.ReportsToSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Employees objects
		///	which are related to this object through the relation FK_Employees_Employees
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Employees> EmployeesCollection
		{
			get { return entityData.EmployeesCollection; }
			set { entityData.EmployeesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Orders objects
		///	which are related to this object through the relation FK_Orders_Employees
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Orders> OrdersCollection
		{
			get { return entityData.OrdersCollection; }
			set { entityData.OrdersCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EmployeeTerritories objects
		///	which are related to this object through the relation FK_EmployeeTerritories_Employees
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EmployeeTerritories> EmployeeTerritoriesCollection
		{
			get { return entityData.EmployeeTerritoriesCollection; }
			set { entityData.EmployeeTerritoriesCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of TerritoriesFromEmployeeTerritories objects
		///	which are related to this object through the junction table EmployeeTerritories
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Territories> TerritoryIdTerritoriesCollection_From_EmployeeTerritories
		{
			get { return entityData.TerritoryIdTerritoriesCollection_From_EmployeeTerritories; }
			set { entityData.TerritoryIdTerritoriesCollection_From_EmployeeTerritories = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LastName", "Last Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LastName", "Last Name", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FirstName", "First Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FirstName", "First Name", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Title", "Title", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TitleOfCourtesy", "Title Of Courtesy", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 60));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("City", "City", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Region", "Region", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PostalCode", "Postal Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Country", "Country", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HomePhone", "Home Phone", 24));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Extension", "Extension", 4));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PhotoPath", "Photo Path", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Employees"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"EmployeeID", "LastName", "FirstName", "Title", "TitleOfCourtesy", "BirthDate", "HireDate", "Address", "City", "Region", "PostalCode", "Country", "HomePhone", "Extension", "Photo", "Notes", "ReportsTo", "PhotoPath"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EmployeesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Employees) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Employees>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Employees);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Employees Entity 
		///</summary>
		protected virtual Employees Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Employees copy = new Employees();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EmployeeId = this.EmployeeId;
				copy.LastName = this.LastName;
				copy.FirstName = this.FirstName;
				copy.Title = this.Title;
				copy.TitleOfCourtesy = this.TitleOfCourtesy;
				copy.BirthDate = this.BirthDate;
				copy.HireDate = this.HireDate;
				copy.Address = this.Address;
				copy.City = this.City;
				copy.Region = this.Region;
				copy.PostalCode = this.PostalCode;
				copy.Country = this.Country;
				copy.HomePhone = this.HomePhone;
				copy.Extension = this.Extension;
				copy.Photo = this.Photo;
				copy.Notes = this.Notes;
				copy.ReportsTo = this.ReportsTo;
				copy.PhotoPath = this.PhotoPath;
			
			if (this.ReportsToSource != null && existingCopies.Contains(this.ReportsToSource))
				copy.ReportsToSource = existingCopies[this.ReportsToSource] as Employees;
			else
				copy.ReportsToSource = MakeCopyOf(this.ReportsToSource, existingCopies) as Employees;
		
			//deep copy nested objects
			copy.EmployeesCollection = (TList<Employees>) MakeCopyOf(this.EmployeesCollection, existingCopies); 
			copy.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection, existingCopies); 
			copy.EmployeeTerritoriesCollection = (TList<EmployeeTerritories>) MakeCopyOf(this.EmployeeTerritoriesCollection, existingCopies); 
			copy.TerritoryIdTerritoriesCollection_From_EmployeeTerritories = (TList<Territories>) MakeCopyOf(this.TerritoryIdTerritoriesCollection_From_EmployeeTerritories, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Employees Entity 
		///</summary>
		public virtual Employees Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Employees Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Employees DeepCopy()
		{
			return EntityHelper.Clone<Employees>(this as Employees);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EmployeesEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new EmployeesEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EmployeesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EmployeesColumn column)
		{
			switch(column)
			{
					case EmployeesColumn.EmployeeId:
					return entityData.EmployeeId != _originalData.EmployeeId;
					case EmployeesColumn.LastName:
					return entityData.LastName != _originalData.LastName;
					case EmployeesColumn.FirstName:
					return entityData.FirstName != _originalData.FirstName;
					case EmployeesColumn.Title:
					return entityData.Title != _originalData.Title;
					case EmployeesColumn.TitleOfCourtesy:
					return entityData.TitleOfCourtesy != _originalData.TitleOfCourtesy;
					case EmployeesColumn.BirthDate:
					return entityData.BirthDate != _originalData.BirthDate;
					case EmployeesColumn.HireDate:
					return entityData.HireDate != _originalData.HireDate;
					case EmployeesColumn.Address:
					return entityData.Address != _originalData.Address;
					case EmployeesColumn.City:
					return entityData.City != _originalData.City;
					case EmployeesColumn.Region:
					return entityData.Region != _originalData.Region;
					case EmployeesColumn.PostalCode:
					return entityData.PostalCode != _originalData.PostalCode;
					case EmployeesColumn.Country:
					return entityData.Country != _originalData.Country;
					case EmployeesColumn.HomePhone:
					return entityData.HomePhone != _originalData.HomePhone;
					case EmployeesColumn.Extension:
					return entityData.Extension != _originalData.Extension;
					case EmployeesColumn.Photo:
					return entityData.Photo != _originalData.Photo;
					case EmployeesColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case EmployeesColumn.ReportsTo:
					return entityData.ReportsTo != _originalData.ReportsTo;
					case EmployeesColumn.PhotoPath:
					return entityData.PhotoPath != _originalData.PhotoPath;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< EmployeesColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EmployeeId != _originalData.EmployeeId;
			result = result || entityData.LastName != _originalData.LastName;
			result = result || entityData.FirstName != _originalData.FirstName;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.TitleOfCourtesy != _originalData.TitleOfCourtesy;
			result = result || entityData.BirthDate != _originalData.BirthDate;
			result = result || entityData.HireDate != _originalData.HireDate;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.Region != _originalData.Region;
			result = result || entityData.PostalCode != _originalData.PostalCode;
			result = result || entityData.Country != _originalData.Country;
			result = result || entityData.HomePhone != _originalData.HomePhone;
			result = result || entityData.Extension != _originalData.Extension;
			result = result || entityData.Photo != _originalData.Photo;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.ReportsTo != _originalData.ReportsTo;
			result = result || entityData.PhotoPath != _originalData.PhotoPath;
			return result;
		}	
		
		///<summary>
		///  Returns a Employees Entity with the original data.
		///</summary>
		public Employees GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateEmployees(
				_originalData.LastName,
				_originalData.FirstName,
				_originalData.Title,
				_originalData.TitleOfCourtesy,
				_originalData.BirthDate,
				_originalData.HireDate,
				_originalData.Address,
				_originalData.City,
				_originalData.Region,
				_originalData.PostalCode,
				_originalData.Country,
				_originalData.HomePhone,
				_originalData.Extension,
				_originalData.Photo,
				_originalData.Notes,
				_originalData.ReportsTo,
				_originalData.PhotoPath
				);
				
			return (Employees)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EmployeesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is EmployeesBase)
				return ValueEquals(this, (EmployeesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EmployeesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EmployeeId.GetHashCode() ^ 
					this.LastName.GetHashCode() ^ 
					this.FirstName.GetHashCode() ^ 
					((this.Title == null) ? string.Empty : this.Title.ToString()).GetHashCode() ^ 
					((this.TitleOfCourtesy == null) ? string.Empty : this.TitleOfCourtesy.ToString()).GetHashCode() ^ 
					((this.BirthDate == null) ? string.Empty : this.BirthDate.ToString()).GetHashCode() ^ 
					((this.HireDate == null) ? string.Empty : this.HireDate.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					((this.Region == null) ? string.Empty : this.Region.ToString()).GetHashCode() ^ 
					((this.PostalCode == null) ? string.Empty : this.PostalCode.ToString()).GetHashCode() ^ 
					((this.Country == null) ? string.Empty : this.Country.ToString()).GetHashCode() ^ 
					((this.HomePhone == null) ? string.Empty : this.HomePhone.ToString()).GetHashCode() ^ 
					((this.Extension == null) ? string.Empty : this.Extension.ToString()).GetHashCode() ^ 
					((this.Photo == null) ? string.Empty : this.Photo.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.ReportsTo == null) ? string.Empty : this.ReportsTo.ToString()).GetHashCode() ^ 
					((this.PhotoPath == null) ? string.Empty : this.PhotoPath.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EmployeesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EmployeesBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="EmployeesBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="EmployeesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EmployeesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(EmployeesBase Object1, EmployeesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EmployeeId != Object2.EmployeeId)
				equal = false;
			if (Object1.LastName != Object2.LastName)
				equal = false;
			if (Object1.FirstName != Object2.FirstName)
				equal = false;
			if ( Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object2.Title == null )
			{
				equal = false;
			}
			if ( Object1.TitleOfCourtesy != null && Object2.TitleOfCourtesy != null )
			{
				if (Object1.TitleOfCourtesy != Object2.TitleOfCourtesy)
					equal = false;
			}
			else if (Object1.TitleOfCourtesy == null ^ Object2.TitleOfCourtesy == null )
			{
				equal = false;
			}
			if ( Object1.BirthDate != null && Object2.BirthDate != null )
			{
				if (Object1.BirthDate != Object2.BirthDate)
					equal = false;
			}
			else if (Object1.BirthDate == null ^ Object2.BirthDate == null )
			{
				equal = false;
			}
			if ( Object1.HireDate != null && Object2.HireDate != null )
			{
				if (Object1.HireDate != Object2.HireDate)
					equal = false;
			}
			else if (Object1.HireDate == null ^ Object2.HireDate == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if ( Object1.Region != null && Object2.Region != null )
			{
				if (Object1.Region != Object2.Region)
					equal = false;
			}
			else if (Object1.Region == null ^ Object2.Region == null )
			{
				equal = false;
			}
			if ( Object1.PostalCode != null && Object2.PostalCode != null )
			{
				if (Object1.PostalCode != Object2.PostalCode)
					equal = false;
			}
			else if (Object1.PostalCode == null ^ Object2.PostalCode == null )
			{
				equal = false;
			}
			if ( Object1.Country != null && Object2.Country != null )
			{
				if (Object1.Country != Object2.Country)
					equal = false;
			}
			else if (Object1.Country == null ^ Object2.Country == null )
			{
				equal = false;
			}
			if ( Object1.HomePhone != null && Object2.HomePhone != null )
			{
				if (Object1.HomePhone != Object2.HomePhone)
					equal = false;
			}
			else if (Object1.HomePhone == null ^ Object2.HomePhone == null )
			{
				equal = false;
			}
			if ( Object1.Extension != null && Object2.Extension != null )
			{
				if (Object1.Extension != Object2.Extension)
					equal = false;
			}
			else if (Object1.Extension == null ^ Object2.Extension == null )
			{
				equal = false;
			}
			if ( Object1.Photo != null && Object2.Photo != null )
			{
				if (Object1.Photo != Object2.Photo)
					equal = false;
			}
			else if (Object1.Photo == null ^ Object2.Photo == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.ReportsTo != null && Object2.ReportsTo != null )
			{
				if (Object1.ReportsTo != Object2.ReportsTo)
					equal = false;
			}
			else if (Object1.ReportsTo == null ^ Object2.ReportsTo == null )
			{
				equal = false;
			}
			if ( Object1.PhotoPath != null && Object2.PhotoPath != null )
			{
				if (Object1.PhotoPath != Object2.PhotoPath)
					equal = false;
			}
			else if (Object1.PhotoPath == null ^ Object2.PhotoPath == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EmployeesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EmployeesComparer GetComparer()
        {
            return new EmployeesComparer();
        }
        */

        // Comparer delegates back to Employees
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Employees rhs, EmployeesColumn which)
        {
            switch (which)
            {
            	
            	
            	case EmployeesColumn.EmployeeId:
            		return this.EmployeeId.CompareTo(rhs.EmployeeId);
            		
            		                 
            	
            	
            	case EmployeesColumn.LastName:
            		return this.LastName.CompareTo(rhs.LastName);
            		
            		                 
            	
            	
            	case EmployeesColumn.FirstName:
            		return this.FirstName.CompareTo(rhs.FirstName);
            		
            		                 
            	
            	
            	case EmployeesColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case EmployeesColumn.TitleOfCourtesy:
            		return this.TitleOfCourtesy.CompareTo(rhs.TitleOfCourtesy);
            		
            		                 
            	
            	
            	case EmployeesColumn.BirthDate:
            		return this.BirthDate.Value.CompareTo(rhs.BirthDate.Value);
            		
            		                 
            	
            	
            	case EmployeesColumn.HireDate:
            		return this.HireDate.Value.CompareTo(rhs.HireDate.Value);
            		
            		                 
            	
            	
            	case EmployeesColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case EmployeesColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case EmployeesColumn.Region:
            		return this.Region.CompareTo(rhs.Region);
            		
            		                 
            	
            	
            	case EmployeesColumn.PostalCode:
            		return this.PostalCode.CompareTo(rhs.PostalCode);
            		
            		                 
            	
            	
            	case EmployeesColumn.Country:
            		return this.Country.CompareTo(rhs.Country);
            		
            		                 
            	
            	
            	case EmployeesColumn.HomePhone:
            		return this.HomePhone.CompareTo(rhs.HomePhone);
            		
            		                 
            	
            	
            	case EmployeesColumn.Extension:
            		return this.Extension.CompareTo(rhs.Extension);
            		
            		                 
            	
            		                 
            	
            	
            	case EmployeesColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case EmployeesColumn.ReportsTo:
            		return this.ReportsTo.Value.CompareTo(rhs.ReportsTo.Value);
            		
            		                 
            	
            	
            	case EmployeesColumn.PhotoPath:
            		return this.PhotoPath.CompareTo(rhs.PhotoPath);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EmployeesKey> Members
		
		// member variable for the EntityId property
		private EmployeesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EmployeesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EmployeesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Employees")
					.Append("|").Append( this.EmployeeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- EmployeeId: {0}{18}- LastName: {1}{18}- FirstName: {2}{18}- Title: {3}{18}- TitleOfCourtesy: {4}{18}- BirthDate: {5}{18}- HireDate: {6}{18}- Address: {7}{18}- City: {8}{18}- Region: {9}{18}- PostalCode: {10}{18}- Country: {11}{18}- HomePhone: {12}{18}- Extension: {13}{18}- Photo: {14}{18}- Notes: {15}{18}- ReportsTo: {16}{18}- PhotoPath: {17}{18}{20}", 
				this.EmployeeId,
				this.LastName,
				this.FirstName,
				(this.Title == null) ? string.Empty : this.Title.ToString(),
				(this.TitleOfCourtesy == null) ? string.Empty : this.TitleOfCourtesy.ToString(),
				(this.BirthDate == null) ? string.Empty : this.BirthDate.ToString(),
				(this.HireDate == null) ? string.Empty : this.HireDate.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.Region == null) ? string.Empty : this.Region.ToString(),
				(this.PostalCode == null) ? string.Empty : this.PostalCode.ToString(),
				(this.Country == null) ? string.Empty : this.Country.ToString(),
				(this.HomePhone == null) ? string.Empty : this.HomePhone.ToString(),
				(this.Extension == null) ? string.Empty : this.Extension.ToString(),
				(this.Photo == null) ? string.Empty : this.Photo.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.ReportsTo == null) ? string.Empty : this.ReportsTo.ToString(),
				(this.PhotoPath == null) ? string.Empty : this.PhotoPath.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Employees' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EmployeesEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// EmployeeID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Employees"</remarks>
		public System.Int32 EmployeeId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// LastName : 
		/// </summary>
		public System.String LastName = string.Empty;
		
		/// <summary>
		/// FirstName : 
		/// </summary>
		public System.String FirstName = string.Empty;
		
		/// <summary>
		/// Title : 
		/// </summary>
		public System.String Title = null;
		
		/// <summary>
		/// TitleOfCourtesy : 
		/// </summary>
		public System.String TitleOfCourtesy = null;
		
		/// <summary>
		/// BirthDate : 
		/// </summary>
		public System.DateTime? BirthDate = null;
		
		/// <summary>
		/// HireDate : 
		/// </summary>
		public System.DateTime? HireDate = null;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String Address = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String City = null;
		
		/// <summary>
		/// Region : 
		/// </summary>
		public System.String Region = null;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		public System.String PostalCode = null;
		
		/// <summary>
		/// Country : 
		/// </summary>
		public System.String Country = null;
		
		/// <summary>
		/// HomePhone : 
		/// </summary>
		public System.String HomePhone = null;
		
		/// <summary>
		/// Extension : 
		/// </summary>
		public System.String Extension = null;
		
		/// <summary>
		/// Photo : 
		/// </summary>
		public System.Byte[] Photo = null;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		public System.String Notes = null;
		
		/// <summary>
		/// ReportsTo : 
		/// </summary>
		public System.Int32? ReportsTo = null;
		
		/// <summary>
		/// PhotoPath : 
		/// </summary>
		public System.String PhotoPath = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Employees _reportsToSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Employees"/>.
		/// </summary>
		/// <value>The source Employees for ReportsTo.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual Employees ReportsToSource
      	{
            get { return this._reportsToSource; }
            set { this._reportsToSource = value; }
      	}
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#region EmployeesCollection
		
		private TList<Employees> _employeesReportsTo;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeesReportsTo
		/// </summary>
		
		public TList<Employees> EmployeesCollection
		{
			get
			{
				if (_employeesReportsTo == null)
				{
				_employeesReportsTo = new TList<Employees>();
				}
	
				return _employeesReportsTo;
			}
			set { _employeesReportsTo = value; }
		}
		
		#endregion

		#region OrdersCollection
		
		private TList<Orders> _ordersEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ordersEmployeeId
		/// </summary>
		
		public TList<Orders> OrdersCollection
		{
			get
			{
				if (_ordersEmployeeId == null)
				{
				_ordersEmployeeId = new TList<Orders>();
				}
	
				return _ordersEmployeeId;
			}
			set { _ordersEmployeeId = value; }
		}
		
		#endregion

		#region EmployeeTerritoriesCollection
		
		private TList<EmployeeTerritories> _employeeTerritoriesEmployeeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _employeeTerritoriesEmployeeId
		/// </summary>
		
		public TList<EmployeeTerritories> EmployeeTerritoriesCollection
		{
			get
			{
				if (_employeeTerritoriesEmployeeId == null)
				{
				_employeeTerritoriesEmployeeId = new TList<EmployeeTerritories>();
				}
	
				return _employeeTerritoriesEmployeeId;
			}
			set { _employeeTerritoriesEmployeeId = value; }
		}
		
		#endregion

		#region TerritoryIdTerritoriesCollection_From_EmployeeTerritories
		
		private TList<Territories> territoryIdTerritoriesCollectionFromEmployeeTerritories;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table territoryIdTerritoriesCollectionFromEmployeeTerritories
		/// </summary>
		
		public TList<Territories> TerritoryIdTerritoriesCollection_From_EmployeeTerritories
		{
			get
			{
				if (territoryIdTerritoriesCollectionFromEmployeeTerritories == null)
				{
				territoryIdTerritoriesCollectionFromEmployeeTerritories = new TList<Territories>();
				}
	
				return territoryIdTerritoriesCollectionFromEmployeeTerritories;
			}
			set { territoryIdTerritoriesCollectionFromEmployeeTerritories = value; }
		}
		
		#endregion 

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EmployeesEntityData _tmp = new EmployeesEntityData();
						
			_tmp.EmployeeId = this.EmployeeId;
			
			_tmp.LastName = this.LastName;
			_tmp.FirstName = this.FirstName;
			_tmp.Title = this.Title;
			_tmp.TitleOfCourtesy = this.TitleOfCourtesy;
			_tmp.BirthDate = this.BirthDate;
			_tmp.HireDate = this.HireDate;
			_tmp.Address = this.Address;
			_tmp.City = this.City;
			_tmp.Region = this.Region;
			_tmp.PostalCode = this.PostalCode;
			_tmp.Country = this.Country;
			_tmp.HomePhone = this.HomePhone;
			_tmp.Extension = this.Extension;
			_tmp.Photo = this.Photo;
			_tmp.Notes = this.Notes;
			_tmp.ReportsTo = this.ReportsTo;
			_tmp.PhotoPath = this.PhotoPath;
			
			#region Source Parent Composite Entities
			if (this.ReportsToSource != null)
				_tmp.ReportsToSource = MakeCopyOf(this.ReportsToSource) as Employees;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._employeesReportsTo != null)
				_tmp.EmployeesCollection = (TList<Employees>) MakeCopyOf(this.EmployeesCollection); 
			if (this._ordersEmployeeId != null)
				_tmp.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection); 
			if (this._employeeTerritoriesEmployeeId != null)
				_tmp.EmployeeTerritoriesCollection = (TList<EmployeeTerritories>) MakeCopyOf(this.EmployeeTerritoriesCollection); 
			if (this.territoryIdTerritoriesCollectionFromEmployeeTerritories != null)
				_tmp.TerritoryIdTerritoriesCollection_From_EmployeeTerritories = (TList<Territories>) MakeCopyOf(this.TerritoryIdTerritoriesCollection_From_EmployeeTerritories); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			EmployeesEntityData _tmp = new EmployeesEntityData();
						
			_tmp.EmployeeId = this.EmployeeId;
			
			_tmp.LastName = this.LastName;
			_tmp.FirstName = this.FirstName;
			_tmp.Title = this.Title;
			_tmp.TitleOfCourtesy = this.TitleOfCourtesy;
			_tmp.BirthDate = this.BirthDate;
			_tmp.HireDate = this.HireDate;
			_tmp.Address = this.Address;
			_tmp.City = this.City;
			_tmp.Region = this.Region;
			_tmp.PostalCode = this.PostalCode;
			_tmp.Country = this.Country;
			_tmp.HomePhone = this.HomePhone;
			_tmp.Extension = this.Extension;
			_tmp.Photo = this.Photo;
			_tmp.Notes = this.Notes;
			_tmp.ReportsTo = this.ReportsTo;
			_tmp.PhotoPath = this.PhotoPath;
			
			#region Source Parent Composite Entities
			if (this.ReportsToSource != null && existingCopies.Contains(this.ReportsToSource))
				_tmp.ReportsToSource = existingCopies[this.ReportsToSource] as Employees;
			else
				_tmp.ReportsToSource = MakeCopyOf(this.ReportsToSource, existingCopies) as Employees;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.EmployeesCollection = (TList<Employees>) MakeCopyOf(this.EmployeesCollection, existingCopies); 
			_tmp.OrdersCollection = (TList<Orders>) MakeCopyOf(this.OrdersCollection, existingCopies); 
			_tmp.EmployeeTerritoriesCollection = (TList<EmployeeTerritories>) MakeCopyOf(this.EmployeeTerritoriesCollection, existingCopies); 
			_tmp.TerritoryIdTerritoriesCollection_From_EmployeeTerritories = (TList<Territories>) MakeCopyOf(this.TerritoryIdTerritoriesCollection_From_EmployeeTerritories, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(EmployeesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeesColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(EmployeesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(EmployeesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				EmployeesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EmployeesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmployeesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(EmployeesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EmployeesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EmployeesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EmployeesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Employees"/> object.
	/// </remarks>
	public class EmployeesEventArgs : System.EventArgs
	{
		private EmployeesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EmployeesEventArgs class.
		///</summary>
		public EmployeesEventArgs(EmployeesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EmployeesEventArgs class.
		///</summary>
		public EmployeesEventArgs(EmployeesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EmployeesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EmployeesColumn" />
		public EmployeesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Employees related events.
	///</summary>
	public delegate void EmployeesEventHandler(object sender, EmployeesEventArgs e);
	
	#region EmployeesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EmployeesComparer : System.Collections.Generic.IComparer<Employees>
	{
		EmployeesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EmployeesComparer"/> class.
        /// </summary>
		public EmployeesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EmployeesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EmployeesComparer(EmployeesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Employees"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Employees"/> to compare.</param>
        /// <param name="b">The second <c>Employees</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Employees a, Employees b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Employees entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Employees a, Employees b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EmployeesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EmployeesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Employees"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EmployeesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EmployeesKey class.
		/// </summary>
		public EmployeesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EmployeesKey class.
		/// </summary>
		public EmployeesKey(EmployeesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EmployeeId = entity.EmployeeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EmployeesKey class.
		/// </summary>
		public EmployeesKey(System.Int32 _employeeId)
		{
			#region Init Properties

			this.EmployeeId = _employeeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EmployeesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EmployeesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EmployeeId property
		private System.Int32 _employeeId;
		
		/// <summary>
		/// Gets or sets the EmployeeId property.
		/// </summary>
		public System.Int32 EmployeeId
		{
			get { return _employeeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EmployeeId = value;
				
				_employeeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EmployeeId = ( values["EmployeeId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["EmployeeId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EmployeeId", EmployeeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EmployeeId: {0}{1}",
								EmployeeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EmployeesColumn Enum
	
	/// <summary>
	/// Enumerate the Employees columns.
	/// </summary>
	[Serializable]
	public enum EmployeesColumn : int
	{
		/// <summary>
		/// EmployeeId : 
		/// </summary>
		[EnumTextValue("EmployeeID")]
		[ColumnEnum("EmployeeID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		EmployeeId = 1,
		/// <summary>
		/// LastName : 
		/// </summary>
		[EnumTextValue("LastName")]
		[ColumnEnum("LastName", typeof(System.String), System.Data.DbType.String, false, false, false, 20)]
		LastName = 2,
		/// <summary>
		/// FirstName : 
		/// </summary>
		[EnumTextValue("FirstName")]
		[ColumnEnum("FirstName", typeof(System.String), System.Data.DbType.String, false, false, false, 10)]
		FirstName = 3,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		Title = 4,
		/// <summary>
		/// TitleOfCourtesy : 
		/// </summary>
		[EnumTextValue("TitleOfCourtesy")]
		[ColumnEnum("TitleOfCourtesy", typeof(System.String), System.Data.DbType.String, false, false, true, 25)]
		TitleOfCourtesy = 5,
		/// <summary>
		/// BirthDate : 
		/// </summary>
		[EnumTextValue("BirthDate")]
		[ColumnEnum("BirthDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BirthDate = 6,
		/// <summary>
		/// HireDate : 
		/// </summary>
		[EnumTextValue("HireDate")]
		[ColumnEnum("HireDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		HireDate = 7,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 60)]
		Address = 8,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		City = 9,
		/// <summary>
		/// Region : 
		/// </summary>
		[EnumTextValue("Region")]
		[ColumnEnum("Region", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Region = 10,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		[EnumTextValue("PostalCode")]
		[ColumnEnum("PostalCode", typeof(System.String), System.Data.DbType.String, false, false, true, 10)]
		PostalCode = 11,
		/// <summary>
		/// Country : 
		/// </summary>
		[EnumTextValue("Country")]
		[ColumnEnum("Country", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		Country = 12,
		/// <summary>
		/// HomePhone : 
		/// </summary>
		[EnumTextValue("HomePhone")]
		[ColumnEnum("HomePhone", typeof(System.String), System.Data.DbType.String, false, false, true, 24)]
		HomePhone = 13,
		/// <summary>
		/// Extension : 
		/// </summary>
		[EnumTextValue("Extension")]
		[ColumnEnum("Extension", typeof(System.String), System.Data.DbType.String, false, false, true, 4)]
		Extension = 14,
		/// <summary>
		/// Photo : 
		/// </summary>
		[EnumTextValue("Photo")]
		[ColumnEnum("Photo", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		Photo = 15,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Notes = 16,
		/// <summary>
		/// ReportsTo : 
		/// </summary>
		[EnumTextValue("ReportsTo")]
		[ColumnEnum("ReportsTo", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ReportsTo = 17,
		/// <summary>
		/// PhotoPath : 
		/// </summary>
		[EnumTextValue("PhotoPath")]
		[ColumnEnum("PhotoPath", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		PhotoPath = 18
	}//End enum

	#endregion EmployeesColumn Enum

} // end namespace
