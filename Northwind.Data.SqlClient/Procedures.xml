<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database includeDrop="true">Northwind</database>
<procedures>
		
		<procedure owner="dbo" name="Orders_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Orders table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Orders_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Orders table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[OrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [OrderID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [OrderDate]'
				SET @SQL = @SQL + ', [RequiredDate]'
				SET @SQL = @SQL + ', [ShippedDate]'
				SET @SQL = @SQL + ', [ShipVia]'
				SET @SQL = @SQL + ', [Freight]'
				SET @SQL = @SQL + ', [ShipName]'
				SET @SQL = @SQL + ', [ShipAddress]'
				SET @SQL = @SQL + ', [ShipCity]'
				SET @SQL = @SQL + ', [ShipRegion]'
				SET @SQL = @SQL + ', [ShipPostalCode]'
				SET @SQL = @SQL + ', [ShipCountry]'
				SET @SQL = @SQL + ' FROM [dbo].[Orders]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [OrderID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [OrderDate],'
				SET @SQL = @SQL + ' [RequiredDate],'
				SET @SQL = @SQL + ' [ShippedDate],'
				SET @SQL = @SQL + ' [ShipVia],'
				SET @SQL = @SQL + ' [Freight],'
				SET @SQL = @SQL + ' [ShipName],'
				SET @SQL = @SQL + ' [ShipAddress],'
				SET @SQL = @SQL + ' [ShipCity],'
				SET @SQL = @SQL + ' [ShipRegion],'
				SET @SQL = @SQL + ' [ShipPostalCode],'
				SET @SQL = @SQL + ' [ShipCountry]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Orders]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Orders_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Orders table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RequiredDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShippedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShipVia" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ShipName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ShipAddress" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@ShipCity" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@ShipRegion" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@ShipPostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ShipCountry" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Orders]
					(
					[CustomerID]
					,[EmployeeID]
					,[OrderDate]
					,[RequiredDate]
					,[ShippedDate]
					,[ShipVia]
					,[Freight]
					,[ShipName]
					,[ShipAddress]
					,[ShipCity]
					,[ShipRegion]
					,[ShipPostalCode]
					,[ShipCountry]
					)
				VALUES
					(
					@CustomerId
					,@EmployeeId
					,@OrderDate
					,@RequiredDate
					,@ShippedDate
					,@ShipVia
					,@Freight
					,@ShipName
					,@ShipAddress
					,@ShipCity
					,@ShipRegion
					,@ShipPostalCode
					,@ShipCountry
					)
				
				-- Get the identity value
				SET @OrderId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Orders_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Orders table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@RequiredDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShippedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@ShipVia" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@ShipName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ShipAddress" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@ShipCity" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@ShipRegion" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@ShipPostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@ShipCountry" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Orders]
				SET
					[CustomerID] = @CustomerId
					,[EmployeeID] = @EmployeeId
					,[OrderDate] = @OrderDate
					,[RequiredDate] = @RequiredDate
					,[ShippedDate] = @ShippedDate
					,[ShipVia] = @ShipVia
					,[Freight] = @Freight
					,[ShipName] = @ShipName
					,[ShipAddress] = @ShipAddress
					,[ShipCity] = @ShipCity
					,[ShipRegion] = @ShipRegion
					,[ShipPostalCode] = @ShipPostalCode
					,[ShipCountry] = @ShipCountry
				WHERE
[OrderID] = @OrderId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Orders_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Orders table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Orders] WITH (ROWLOCK) 
				WHERE
					[OrderID] = @OrderId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Orders_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Orders table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Orders_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Orders table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
				WHERE
					[EmployeeID] = @EmployeeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Orders_GetByOrderDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Orders table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
				WHERE
					[OrderDate] = @OrderDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Orders_GetByOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Orders table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
				WHERE
					[OrderID] = @OrderId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Orders_GetByShippedDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Orders table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShippedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
				WHERE
					[ShippedDate] = @ShippedDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Orders_GetByShipVia" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Orders table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipVia" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
				WHERE
					[ShipVia] = @ShipVia
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Orders_GetByShipPostalCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Orders table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipPostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[CustomerID],
					[EmployeeID],
					[OrderDate],
					[RequiredDate],
					[ShippedDate],
					[ShipVia],
					[Freight],
					[ShipName],
					[ShipAddress],
					[ShipCity],
					[ShipRegion],
					[ShipPostalCode],
					[ShipCountry]
				FROM
					[dbo].[Orders]
				WHERE
					[ShipPostalCode] = @ShipPostalCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Orders_GetByProductIdFromOrderDetails" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Orders].[OrderID]
       ,dbo.[Orders].[CustomerID]
       ,dbo.[Orders].[EmployeeID]
       ,dbo.[Orders].[OrderDate]
       ,dbo.[Orders].[RequiredDate]
       ,dbo.[Orders].[ShippedDate]
       ,dbo.[Orders].[ShipVia]
       ,dbo.[Orders].[Freight]
       ,dbo.[Orders].[ShipName]
       ,dbo.[Orders].[ShipAddress]
       ,dbo.[Orders].[ShipCity]
       ,dbo.[Orders].[ShipRegion]
       ,dbo.[Orders].[ShipPostalCode]
       ,dbo.[Orders].[ShipCountry]
  FROM dbo.[Orders]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Order Details] 
                WHERE dbo.[Order Details].[ProductID] = @ProductId
                  AND dbo.[Order Details].[OrderID] = dbo.[Orders].[OrderID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="Orders_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Orders table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@OrderDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@RequiredDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ShippedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@ShipVia" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Freight" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@ShipName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@ShipAddress" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault="null"/>
				<parameter name="@ShipCity" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@ShipRegion" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@ShipPostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@ShipCountry" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [OrderID]
	, [CustomerID]
	, [EmployeeID]
	, [OrderDate]
	, [RequiredDate]
	, [ShippedDate]
	, [ShipVia]
	, [Freight]
	, [ShipName]
	, [ShipAddress]
	, [ShipCity]
	, [ShipRegion]
	, [ShipPostalCode]
	, [ShipCountry]
    FROM
	[dbo].[Orders]
    WHERE 
	 ([OrderID] = @OrderId OR @OrderId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([OrderDate] = @OrderDate OR @OrderDate IS NULL)
	AND ([RequiredDate] = @RequiredDate OR @RequiredDate IS NULL)
	AND ([ShippedDate] = @ShippedDate OR @ShippedDate IS NULL)
	AND ([ShipVia] = @ShipVia OR @ShipVia IS NULL)
	AND ([Freight] = @Freight OR @Freight IS NULL)
	AND ([ShipName] = @ShipName OR @ShipName IS NULL)
	AND ([ShipAddress] = @ShipAddress OR @ShipAddress IS NULL)
	AND ([ShipCity] = @ShipCity OR @ShipCity IS NULL)
	AND ([ShipRegion] = @ShipRegion OR @ShipRegion IS NULL)
	AND ([ShipPostalCode] = @ShipPostalCode OR @ShipPostalCode IS NULL)
	AND ([ShipCountry] = @ShipCountry OR @ShipCountry IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [OrderID]
	, [CustomerID]
	, [EmployeeID]
	, [OrderDate]
	, [RequiredDate]
	, [ShippedDate]
	, [ShipVia]
	, [Freight]
	, [ShipName]
	, [ShipAddress]
	, [ShipCity]
	, [ShipRegion]
	, [ShipPostalCode]
	, [ShipCountry]
    FROM
	[dbo].[Orders]
    WHERE 
	 ([OrderID] = @OrderId AND @OrderId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([OrderDate] = @OrderDate AND @OrderDate is not null)
	OR ([RequiredDate] = @RequiredDate AND @RequiredDate is not null)
	OR ([ShippedDate] = @ShippedDate AND @ShippedDate is not null)
	OR ([ShipVia] = @ShipVia AND @ShipVia is not null)
	OR ([Freight] = @Freight AND @Freight is not null)
	OR ([ShipName] = @ShipName AND @ShipName is not null)
	OR ([ShipAddress] = @ShipAddress AND @ShipAddress is not null)
	OR ([ShipCity] = @ShipCity AND @ShipCity is not null)
	OR ([ShipRegion] = @ShipRegion AND @ShipRegion is not null)
	OR ([ShipPostalCode] = @ShipPostalCode AND @ShipPostalCode is not null)
	OR ([ShipCountry] = @ShipCountry AND @ShipCountry is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Orders_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Orders table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [OrderID]
					, [CustomerID]
					, [EmployeeID]
					, [OrderDate]
					, [RequiredDate]
					, [ShippedDate]
					, [ShipVia]
					, [Freight]
					, [ShipName]
					, [ShipAddress]
					, [ShipCity]
					, [ShipRegion]
					, [ShipPostalCode]
					, [ShipCountry]
					FROM [dbo].[Orders] {0}
				)
				SELECT
				       [OrderID],
				       [CustomerID],
				       [EmployeeID],
				       [OrderDate],
				       [RequiredDate],
				       [ShippedDate],
				       [ShipVia],
				       [Freight],
				       [ShipName],
				       [ShipAddress],
				       [ShipCity],
				       [ShipRegion],
				       [ShipPostalCode],
				       [ShipCountry]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Orders] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Suppliers_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Suppliers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[SupplierID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax],
					[HomePage]
				FROM
					[dbo].[Suppliers]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Suppliers_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Suppliers table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[SupplierID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [SupplierID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [ContactName]'
				SET @SQL = @SQL + ', [ContactTitle]'
				SET @SQL = @SQL + ', [Address]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ', [HomePage]'
				SET @SQL = @SQL + ' FROM [dbo].[Suppliers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [SupplierID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [ContactName],'
				SET @SQL = @SQL + ' [ContactTitle],'
				SET @SQL = @SQL + ' [Address],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [Fax],'
				SET @SQL = @SQL + ' [HomePage]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Suppliers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Suppliers_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Suppliers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SupplierId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ContactName" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@ContactTitle" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@HomePage" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Suppliers]
					(
					[CompanyName]
					,[ContactName]
					,[ContactTitle]
					,[Address]
					,[City]
					,[Region]
					,[PostalCode]
					,[Country]
					,[Phone]
					,[Fax]
					,[HomePage]
					)
				VALUES
					(
					@CompanyName
					,@ContactName
					,@ContactTitle
					,@Address
					,@City
					,@Region
					,@PostalCode
					,@Country
					,@Phone
					,@Fax
					,@HomePage
					)
				
				-- Get the identity value
				SET @SupplierId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Suppliers_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Suppliers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ContactName" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@ContactTitle" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@HomePage" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Suppliers]
				SET
					[CompanyName] = @CompanyName
					,[ContactName] = @ContactName
					,[ContactTitle] = @ContactTitle
					,[Address] = @Address
					,[City] = @City
					,[Region] = @Region
					,[PostalCode] = @PostalCode
					,[Country] = @Country
					,[Phone] = @Phone
					,[Fax] = @Fax
					,[HomePage] = @HomePage
				WHERE
[SupplierID] = @SupplierId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Suppliers_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Suppliers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Suppliers] WITH (ROWLOCK) 
				WHERE
					[SupplierID] = @SupplierId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Suppliers_GetByCompanyName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Suppliers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SupplierID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax],
					[HomePage]
				FROM
					[dbo].[Suppliers]
				WHERE
					[CompanyName] = @CompanyName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Suppliers_GetBySupplierId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Suppliers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SupplierID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax],
					[HomePage]
				FROM
					[dbo].[Suppliers]
				WHERE
					[SupplierID] = @SupplierId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Suppliers_GetByPostalCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Suppliers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[SupplierID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax],
					[HomePage]
				FROM
					[dbo].[Suppliers]
				WHERE
					[PostalCode] = @PostalCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Suppliers_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Suppliers table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@ContactName" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@ContactTitle" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault="null"/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault="null"/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault="null"/>
				<parameter name="@HomePage" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [SupplierID]
	, [CompanyName]
	, [ContactName]
	, [ContactTitle]
	, [Address]
	, [City]
	, [Region]
	, [PostalCode]
	, [Country]
	, [Phone]
	, [Fax]
	, [HomePage]
    FROM
	[dbo].[Suppliers]
    WHERE 
	 ([SupplierID] = @SupplierId OR @SupplierId IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([ContactName] = @ContactName OR @ContactName IS NULL)
	AND ([ContactTitle] = @ContactTitle OR @ContactTitle IS NULL)
	AND ([Address] = @Address OR @Address IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([Region] = @Region OR @Region IS NULL)
	AND ([PostalCode] = @PostalCode OR @PostalCode IS NULL)
	AND ([Country] = @Country OR @Country IS NULL)
	AND ([Phone] = @Phone OR @Phone IS NULL)
	AND ([Fax] = @Fax OR @Fax IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [SupplierID]
	, [CompanyName]
	, [ContactName]
	, [ContactTitle]
	, [Address]
	, [City]
	, [Region]
	, [PostalCode]
	, [Country]
	, [Phone]
	, [Fax]
	, [HomePage]
    FROM
	[dbo].[Suppliers]
    WHERE 
	 ([SupplierID] = @SupplierId AND @SupplierId is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([ContactName] = @ContactName AND @ContactName is not null)
	OR ([ContactTitle] = @ContactTitle AND @ContactTitle is not null)
	OR ([Address] = @Address AND @Address is not null)
	OR ([City] = @City AND @City is not null)
	OR ([Region] = @Region AND @Region is not null)
	OR ([PostalCode] = @PostalCode AND @PostalCode is not null)
	OR ([Country] = @Country AND @Country is not null)
	OR ([Phone] = @Phone AND @Phone is not null)
	OR ([Fax] = @Fax AND @Fax is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Suppliers_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Suppliers table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [SupplierID]
					, [CompanyName]
					, [ContactName]
					, [ContactTitle]
					, [Address]
					, [City]
					, [Region]
					, [PostalCode]
					, [Country]
					, [Phone]
					, [Fax]
					, [HomePage]
					FROM [dbo].[Suppliers] {0}
				)
				SELECT
				       [SupplierID],
				       [CompanyName],
				       [ContactName],
				       [ContactTitle],
				       [Address],
				       [City],
				       [Region],
				       [PostalCode],
				       [Country],
				       [Phone],
				       [Fax],
				       [HomePage]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Suppliers] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Region_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Region table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[RegionID],
					[RegionDescription]
				FROM
					[dbo].[Region]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Region_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Region table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[RegionID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [RegionID]'
				SET @SQL = @SQL + ', [RegionDescription]'
				SET @SQL = @SQL + ' FROM [dbo].[Region]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [RegionID],'
				SET @SQL = @SQL + ' [RegionDescription]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Region]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Region_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Region table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RegionDescription" type="nchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Region]
					(
					[RegionID]
					,[RegionDescription]
					)
				VALUES
					(
					@RegionId
					,@RegionDescription
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Region_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Region table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalRegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@RegionDescription" type="nchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Region]
				SET
					[RegionID] = @RegionId
					,[RegionDescription] = @RegionDescription
				WHERE
[RegionID] = @OriginalRegionId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Region_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Region table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Region] WITH (ROWLOCK) 
				WHERE
					[RegionID] = @RegionId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Region_GetByRegionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Region table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[RegionID],
					[RegionDescription]
				FROM
					[dbo].[Region]
				WHERE
					[RegionID] = @RegionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Region_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Region table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@RegionDescription" type="nchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [RegionID]
	, [RegionDescription]
    FROM
	[dbo].[Region]
    WHERE 
	 ([RegionID] = @RegionId OR @RegionId IS NULL)
	AND ([RegionDescription] = @RegionDescription OR @RegionDescription IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [RegionID]
	, [RegionDescription]
    FROM
	[dbo].[Region]
    WHERE 
	 ([RegionID] = @RegionId AND @RegionId is not null)
	OR ([RegionDescription] = @RegionDescription AND @RegionDescription is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Region_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Region table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [RegionID]
					, [RegionDescription]
					FROM [dbo].[Region] {0}
				)
				SELECT
				       [RegionID],
				       [RegionDescription]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Region] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Categories_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Categories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CategoryID],
					[CategoryName],
					[Description],
					[Picture]
				FROM
					[dbo].[Categories]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Categories_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Categories table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CategoryID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CategoryID]'
				SET @SQL = @SQL + ', [CategoryName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Picture]'
				SET @SQL = @SQL + ' FROM [dbo].[Categories]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CategoryID],'
				SET @SQL = @SQL + ' [CategoryName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Picture]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Categories]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Categories_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Categories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CategoryId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CategoryName" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Description" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Picture" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Categories]
					(
					[CategoryName]
					,[Description]
					,[Picture]
					)
				VALUES
					(
					@CategoryName
					,@Description
					,@Picture
					)
				
				-- Get the identity value
				SET @CategoryId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Categories_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Categories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CategoryName" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Description" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Picture" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Categories]
				SET
					[CategoryName] = @CategoryName
					,[Description] = @Description
					,[Picture] = @Picture
				WHERE
[CategoryID] = @CategoryId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Categories_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Categories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Categories] WITH (ROWLOCK) 
				WHERE
					[CategoryID] = @CategoryId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Categories_GetByCategoryName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Categories table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CategoryName" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CategoryID],
					[CategoryName],
					[Description],
					[Picture]
				FROM
					[dbo].[Categories]
				WHERE
					[CategoryName] = @CategoryName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Categories_GetByCategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Categories table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CategoryID],
					[CategoryName],
					[Description],
					[Picture]
				FROM
					[dbo].[Categories]
				WHERE
					[CategoryID] = @CategoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Categories_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Categories table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CategoryName" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Description" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Picture" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CategoryID]
	, [CategoryName]
	, [Description]
	, [Picture]
    FROM
	[dbo].[Categories]
    WHERE 
	 ([CategoryID] = @CategoryId OR @CategoryId IS NULL)
	AND ([CategoryName] = @CategoryName OR @CategoryName IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CategoryID]
	, [CategoryName]
	, [Description]
	, [Picture]
    FROM
	[dbo].[Categories]
    WHERE 
	 ([CategoryID] = @CategoryId AND @CategoryId is not null)
	OR ([CategoryName] = @CategoryName AND @CategoryName is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Categories_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Categories table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CategoryID]
					, [CategoryName]
					, [Description]
					, [Picture]
					FROM [dbo].[Categories] {0}
				)
				SELECT
				       [CategoryID],
				       [CategoryName],
				       [Description],
				       [Picture]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Categories] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Shippers_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Shippers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ShipperID],
					[CompanyName],
					[Phone]
				FROM
					[dbo].[Shippers]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Shippers_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Shippers table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ShipperID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ShipperID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ' FROM [dbo].[Shippers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ShipperID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [Phone]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Shippers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Shippers_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Shippers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipperId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Shippers]
					(
					[CompanyName]
					,[Phone]
					)
				VALUES
					(
					@CompanyName
					,@Phone
					)
				
				-- Get the identity value
				SET @ShipperId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Shippers_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Shippers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipperId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Shippers]
				SET
					[CompanyName] = @CompanyName
					,[Phone] = @Phone
				WHERE
[ShipperID] = @ShipperId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Shippers_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Shippers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipperId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Shippers] WITH (ROWLOCK) 
				WHERE
					[ShipperID] = @ShipperId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Shippers_GetByShipperId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Shippers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ShipperId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ShipperID],
					[CompanyName],
					[Phone]
				FROM
					[dbo].[Shippers]
				WHERE
					[ShipperID] = @ShipperId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Shippers_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Shippers table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ShipperId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ShipperID]
	, [CompanyName]
	, [Phone]
    FROM
	[dbo].[Shippers]
    WHERE 
	 ([ShipperID] = @ShipperId OR @ShipperId IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([Phone] = @Phone OR @Phone IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ShipperID]
	, [CompanyName]
	, [Phone]
    FROM
	[dbo].[Shippers]
    WHERE 
	 ([ShipperID] = @ShipperId AND @ShipperId is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([Phone] = @Phone AND @Phone is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Shippers_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Shippers table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ShipperID]
					, [CompanyName]
					, [Phone]
					FROM [dbo].[Shippers] {0}
				)
				SELECT
				       [ShipperID],
				       [CompanyName],
				       [Phone]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Shippers] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="EmployeeTerritories_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the EmployeeTerritories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[TerritoryID]
				FROM
					[dbo].[EmployeeTerritories]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="EmployeeTerritories_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmployeeTerritories table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ' FROM [dbo].[EmployeeTerritories]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [TerritoryID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[EmployeeTerritories]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="EmployeeTerritories_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the EmployeeTerritories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[EmployeeTerritories]
					(
					[EmployeeID]
					,[TerritoryID]
					)
				VALUES
					(
					@EmployeeId
					,@TerritoryId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="EmployeeTerritories_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the EmployeeTerritories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalEmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@OriginalTerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[EmployeeTerritories]
				SET
					[EmployeeID] = @EmployeeId
					,[TerritoryID] = @TerritoryId
				WHERE
[EmployeeID] = @OriginalEmployeeId 
AND [TerritoryID] = @OriginalTerritoryId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="EmployeeTerritories_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the EmployeeTerritories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[EmployeeTerritories] WITH (ROWLOCK) 
				WHERE
					[EmployeeID] = @EmployeeId
					AND [TerritoryID] = @TerritoryId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="EmployeeTerritories_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmployeeTerritories table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[TerritoryID]
				FROM
					[dbo].[EmployeeTerritories]
				WHERE
					[EmployeeID] = @EmployeeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="EmployeeTerritories_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmployeeTerritories table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[TerritoryID]
				FROM
					[dbo].[EmployeeTerritories]
				WHERE
					[TerritoryID] = @TerritoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="EmployeeTerritories_GetByEmployeeIdTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmployeeTerritories table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[TerritoryID]
				FROM
					[dbo].[EmployeeTerritories]
				WHERE
					[EmployeeID] = @EmployeeId
					AND [TerritoryID] = @TerritoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="EmployeeTerritories_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the EmployeeTerritories table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [EmployeeID]
	, [TerritoryID]
    FROM
	[dbo].[EmployeeTerritories]
    WHERE 
	 ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [EmployeeID]
	, [TerritoryID]
    FROM
	[dbo].[EmployeeTerritories]
    WHERE 
	 ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="EmployeeTerritories_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmployeeTerritories table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [EmployeeID]
					, [TerritoryID]
					FROM [dbo].[EmployeeTerritories] {0}
				)
				SELECT
				       [EmployeeID],
				       [TerritoryID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[EmployeeTerritories] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Employees_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Employees table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EmployeeID],
					[LastName],
					[FirstName],
					[Title],
					[TitleOfCourtesy],
					[BirthDate],
					[HireDate],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[HomePhone],
					[Extension],
					[Photo],
					[Notes],
					[ReportsTo],
					[PhotoPath]
				FROM
					[dbo].[Employees]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Employees_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Employees table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[EmployeeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [LastName]'
				SET @SQL = @SQL + ', [FirstName]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [TitleOfCourtesy]'
				SET @SQL = @SQL + ', [BirthDate]'
				SET @SQL = @SQL + ', [HireDate]'
				SET @SQL = @SQL + ', [Address]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [HomePhone]'
				SET @SQL = @SQL + ', [Extension]'
				SET @SQL = @SQL + ', [Photo]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ReportsTo]'
				SET @SQL = @SQL + ', [PhotoPath]'
				SET @SQL = @SQL + ' FROM [dbo].[Employees]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [LastName],'
				SET @SQL = @SQL + ' [FirstName],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [TitleOfCourtesy],'
				SET @SQL = @SQL + ' [BirthDate],'
				SET @SQL = @SQL + ' [HireDate],'
				SET @SQL = @SQL + ' [Address],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [HomePhone],'
				SET @SQL = @SQL + ' [Extension],'
				SET @SQL = @SQL + ' [Photo],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ReportsTo],'
				SET @SQL = @SQL + ' [PhotoPath]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Employees]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Employees_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Employees table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@TitleOfCourtesy" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HireDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@HomePhone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@Extension" type="nvarchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault=""/>
				<parameter name="@Photo" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ReportsTo" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PhotoPath" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Employees]
					(
					[LastName]
					,[FirstName]
					,[Title]
					,[TitleOfCourtesy]
					,[BirthDate]
					,[HireDate]
					,[Address]
					,[City]
					,[Region]
					,[PostalCode]
					,[Country]
					,[HomePhone]
					,[Extension]
					,[Photo]
					,[Notes]
					,[ReportsTo]
					,[PhotoPath]
					)
				VALUES
					(
					@LastName
					,@FirstName
					,@Title
					,@TitleOfCourtesy
					,@BirthDate
					,@HireDate
					,@Address
					,@City
					,@Region
					,@PostalCode
					,@Country
					,@HomePhone
					,@Extension
					,@Photo
					,@Notes
					,@ReportsTo
					,@PhotoPath
					)
				
				-- Get the identity value
				SET @EmployeeId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Employees_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Employees table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@TitleOfCourtesy" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault=""/>
				<parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@HireDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@HomePhone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@Extension" type="nvarchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault=""/>
				<parameter name="@Photo" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Notes" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@ReportsTo" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PhotoPath" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Employees]
				SET
					[LastName] = @LastName
					,[FirstName] = @FirstName
					,[Title] = @Title
					,[TitleOfCourtesy] = @TitleOfCourtesy
					,[BirthDate] = @BirthDate
					,[HireDate] = @HireDate
					,[Address] = @Address
					,[City] = @City
					,[Region] = @Region
					,[PostalCode] = @PostalCode
					,[Country] = @Country
					,[HomePhone] = @HomePhone
					,[Extension] = @Extension
					,[Photo] = @Photo
					,[Notes] = @Notes
					,[ReportsTo] = @ReportsTo
					,[PhotoPath] = @PhotoPath
				WHERE
[EmployeeID] = @EmployeeId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Employees_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Employees table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Employees] WITH (ROWLOCK) 
				WHERE
					[EmployeeID] = @EmployeeId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Employees_GetByReportsTo" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Employees table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ReportsTo" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[EmployeeID],
					[LastName],
					[FirstName],
					[Title],
					[TitleOfCourtesy],
					[BirthDate],
					[HireDate],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[HomePhone],
					[Extension],
					[Photo],
					[Notes],
					[ReportsTo],
					[PhotoPath]
				FROM
					[dbo].[Employees]
				WHERE
					[ReportsTo] = @ReportsTo
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Employees_GetByLastName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Employees table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[LastName],
					[FirstName],
					[Title],
					[TitleOfCourtesy],
					[BirthDate],
					[HireDate],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[HomePhone],
					[Extension],
					[Photo],
					[Notes],
					[ReportsTo],
					[PhotoPath]
				FROM
					[dbo].[Employees]
				WHERE
					[LastName] = @LastName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Employees_GetByEmployeeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Employees table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[LastName],
					[FirstName],
					[Title],
					[TitleOfCourtesy],
					[BirthDate],
					[HireDate],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[HomePhone],
					[Extension],
					[Photo],
					[Notes],
					[ReportsTo],
					[PhotoPath]
				FROM
					[dbo].[Employees]
				WHERE
					[EmployeeID] = @EmployeeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Employees_GetByPostalCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Employees table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EmployeeID],
					[LastName],
					[FirstName],
					[Title],
					[TitleOfCourtesy],
					[BirthDate],
					[HireDate],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[HomePhone],
					[Extension],
					[Photo],
					[Notes],
					[ReportsTo],
					[PhotoPath]
				FROM
					[dbo].[Employees]
				WHERE
					[PostalCode] = @PostalCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Employees_GetByTerritoryIdFromEmployeeTerritories" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Employees].[EmployeeID]
       ,dbo.[Employees].[LastName]
       ,dbo.[Employees].[FirstName]
       ,dbo.[Employees].[Title]
       ,dbo.[Employees].[TitleOfCourtesy]
       ,dbo.[Employees].[BirthDate]
       ,dbo.[Employees].[HireDate]
       ,dbo.[Employees].[Address]
       ,dbo.[Employees].[City]
       ,dbo.[Employees].[Region]
       ,dbo.[Employees].[PostalCode]
       ,dbo.[Employees].[Country]
       ,dbo.[Employees].[HomePhone]
       ,dbo.[Employees].[Extension]
       ,dbo.[Employees].[Photo]
       ,dbo.[Employees].[Notes]
       ,dbo.[Employees].[ReportsTo]
       ,dbo.[Employees].[PhotoPath]
  FROM dbo.[Employees]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[EmployeeTerritories] 
                WHERE dbo.[EmployeeTerritories].[TerritoryID] = @TerritoryId
                  AND dbo.[EmployeeTerritories].[EmployeeID] = dbo.[Employees].[EmployeeID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="Employees_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Employees table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@LastName" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@FirstName" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Title" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@TitleOfCourtesy" type="nvarchar" direction="Input" size="25" precision="0" scale="0" param="(25)" nulldefault="null"/>
				<parameter name="@BirthDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@HireDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault="null"/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@HomePhone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault="null"/>
				<parameter name="@Extension" type="nvarchar" direction="Input" size="4" precision="0" scale="0" param="(4)" nulldefault="null"/>
				<parameter name="@Photo" type="image" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Notes" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReportsTo" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PhotoPath" type="nvarchar" direction="Input" size="255" precision="0" scale="0" param="(255)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [EmployeeID]
	, [LastName]
	, [FirstName]
	, [Title]
	, [TitleOfCourtesy]
	, [BirthDate]
	, [HireDate]
	, [Address]
	, [City]
	, [Region]
	, [PostalCode]
	, [Country]
	, [HomePhone]
	, [Extension]
	, [Photo]
	, [Notes]
	, [ReportsTo]
	, [PhotoPath]
    FROM
	[dbo].[Employees]
    WHERE 
	 ([EmployeeID] = @EmployeeId OR @EmployeeId IS NULL)
	AND ([LastName] = @LastName OR @LastName IS NULL)
	AND ([FirstName] = @FirstName OR @FirstName IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([TitleOfCourtesy] = @TitleOfCourtesy OR @TitleOfCourtesy IS NULL)
	AND ([BirthDate] = @BirthDate OR @BirthDate IS NULL)
	AND ([HireDate] = @HireDate OR @HireDate IS NULL)
	AND ([Address] = @Address OR @Address IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([Region] = @Region OR @Region IS NULL)
	AND ([PostalCode] = @PostalCode OR @PostalCode IS NULL)
	AND ([Country] = @Country OR @Country IS NULL)
	AND ([HomePhone] = @HomePhone OR @HomePhone IS NULL)
	AND ([Extension] = @Extension OR @Extension IS NULL)
	AND ([ReportsTo] = @ReportsTo OR @ReportsTo IS NULL)
	AND ([PhotoPath] = @PhotoPath OR @PhotoPath IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [EmployeeID]
	, [LastName]
	, [FirstName]
	, [Title]
	, [TitleOfCourtesy]
	, [BirthDate]
	, [HireDate]
	, [Address]
	, [City]
	, [Region]
	, [PostalCode]
	, [Country]
	, [HomePhone]
	, [Extension]
	, [Photo]
	, [Notes]
	, [ReportsTo]
	, [PhotoPath]
    FROM
	[dbo].[Employees]
    WHERE 
	 ([EmployeeID] = @EmployeeId AND @EmployeeId is not null)
	OR ([LastName] = @LastName AND @LastName is not null)
	OR ([FirstName] = @FirstName AND @FirstName is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([TitleOfCourtesy] = @TitleOfCourtesy AND @TitleOfCourtesy is not null)
	OR ([BirthDate] = @BirthDate AND @BirthDate is not null)
	OR ([HireDate] = @HireDate AND @HireDate is not null)
	OR ([Address] = @Address AND @Address is not null)
	OR ([City] = @City AND @City is not null)
	OR ([Region] = @Region AND @Region is not null)
	OR ([PostalCode] = @PostalCode AND @PostalCode is not null)
	OR ([Country] = @Country AND @Country is not null)
	OR ([HomePhone] = @HomePhone AND @HomePhone is not null)
	OR ([Extension] = @Extension AND @Extension is not null)
	OR ([ReportsTo] = @ReportsTo AND @ReportsTo is not null)
	OR ([PhotoPath] = @PhotoPath AND @PhotoPath is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Employees_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Employees table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [EmployeeID]
					, [LastName]
					, [FirstName]
					, [Title]
					, [TitleOfCourtesy]
					, [BirthDate]
					, [HireDate]
					, [Address]
					, [City]
					, [Region]
					, [PostalCode]
					, [Country]
					, [HomePhone]
					, [Extension]
					, [Photo]
					, [Notes]
					, [ReportsTo]
					, [PhotoPath]
					FROM [dbo].[Employees] {0}
				)
				SELECT
				       [EmployeeID],
				       [LastName],
				       [FirstName],
				       [Title],
				       [TitleOfCourtesy],
				       [BirthDate],
				       [HireDate],
				       [Address],
				       [City],
				       [Region],
				       [PostalCode],
				       [Country],
				       [HomePhone],
				       [Extension],
				       [Photo],
				       [Notes],
				       [ReportsTo],
				       [PhotoPath]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Employees] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Territories_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Territories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TerritoryID],
					[TerritoryDescription],
					[RegionID]
				FROM
					[dbo].[Territories]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Territories_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Territories table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TerritoryID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TerritoryID]'
				SET @SQL = @SQL + ', [TerritoryDescription]'
				SET @SQL = @SQL + ', [RegionID]'
				SET @SQL = @SQL + ' FROM [dbo].[Territories]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TerritoryID],'
				SET @SQL = @SQL + ' [TerritoryDescription],'
				SET @SQL = @SQL + ' [RegionID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Territories]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Territories_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Territories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@TerritoryDescription" type="nchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Territories]
					(
					[TerritoryID]
					,[TerritoryDescription]
					,[RegionID]
					)
				VALUES
					(
					@TerritoryId
					,@TerritoryDescription
					,@RegionId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Territories_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Territories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@OriginalTerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@TerritoryDescription" type="nchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault=""/>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Territories]
				SET
					[TerritoryID] = @TerritoryId
					,[TerritoryDescription] = @TerritoryDescription
					,[RegionID] = @RegionId
				WHERE
[TerritoryID] = @OriginalTerritoryId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Territories_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Territories table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Territories] WITH (ROWLOCK) 
				WHERE
					[TerritoryID] = @TerritoryId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Territories_GetByRegionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Territories table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[TerritoryID],
					[TerritoryDescription],
					[RegionID]
				FROM
					[dbo].[Territories]
				WHERE
					[RegionID] = @RegionId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Territories_GetByTerritoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Territories table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TerritoryID],
					[TerritoryDescription],
					[RegionID]
				FROM
					[dbo].[Territories]
				WHERE
					[TerritoryID] = @TerritoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Territories_GetByEmployeeIdFromEmployeeTerritories" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EmployeeId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Territories].[TerritoryID]
       ,dbo.[Territories].[TerritoryDescription]
       ,dbo.[Territories].[RegionID]
  FROM dbo.[Territories]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[EmployeeTerritories] 
                WHERE dbo.[EmployeeTerritories].[EmployeeID] = @EmployeeId
                  AND dbo.[EmployeeTerritories].[TerritoryID] = dbo.[Territories].[TerritoryID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="Territories_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Territories table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TerritoryId" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@TerritoryDescription" type="nchar" direction="Input" size="50" precision="0" scale="0" param="(50)" nulldefault="null"/>
				<parameter name="@RegionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TerritoryID]
	, [TerritoryDescription]
	, [RegionID]
    FROM
	[dbo].[Territories]
    WHERE 
	 ([TerritoryID] = @TerritoryId OR @TerritoryId IS NULL)
	AND ([TerritoryDescription] = @TerritoryDescription OR @TerritoryDescription IS NULL)
	AND ([RegionID] = @RegionId OR @RegionId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TerritoryID]
	, [TerritoryDescription]
	, [RegionID]
    FROM
	[dbo].[Territories]
    WHERE 
	 ([TerritoryID] = @TerritoryId AND @TerritoryId is not null)
	OR ([TerritoryDescription] = @TerritoryDescription AND @TerritoryDescription is not null)
	OR ([RegionID] = @RegionId AND @RegionId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Territories_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Territories table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [TerritoryID]
					, [TerritoryDescription]
					, [RegionID]
					FROM [dbo].[Territories] {0}
				)
				SELECT
				       [TerritoryID],
				       [TerritoryDescription],
				       [RegionID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Territories] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="CustomerDemographics_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerDemographics table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerTypeID],
					[CustomerDesc]
				FROM
					[dbo].[CustomerDemographics]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="CustomerDemographics_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerDemographics table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerTypeID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerTypeID]'
				SET @SQL = @SQL + ', [CustomerDesc]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerDemographics]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerTypeID],'
				SET @SQL = @SQL + ' [CustomerDesc]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerDemographics]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="CustomerDemographics_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerDemographics table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerDesc" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[CustomerDemographics]
					(
					[CustomerTypeID]
					,[CustomerDesc]
					)
				VALUES
					(
					@CustomerTypeId
					,@CustomerDesc
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerDemographics_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerDemographics table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@OriginalCustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@CustomerDesc" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerDemographics]
				SET
					[CustomerTypeID] = @CustomerTypeId
					,[CustomerDesc] = @CustomerDesc
				WHERE
[CustomerTypeID] = @OriginalCustomerTypeId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerDemographics_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerDemographics table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CustomerDemographics] WITH (ROWLOCK) 
				WHERE
					[CustomerTypeID] = @CustomerTypeId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerDemographics_GetByCustomerTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDemographics table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerTypeID],
					[CustomerDesc]
				FROM
					[dbo].[CustomerDemographics]
				WHERE
					[CustomerTypeID] = @CustomerTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="CustomerDemographics_GetByCustomerIdFromCustomerCustomerDemo" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[CustomerDemographics].[CustomerTypeID]
       ,dbo.[CustomerDemographics].[CustomerDesc]
  FROM dbo.[CustomerDemographics]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[CustomerCustomerDemo] 
                WHERE dbo.[CustomerCustomerDemo].[CustomerID] = @CustomerId
                  AND dbo.[CustomerCustomerDemo].[CustomerTypeID] = dbo.[CustomerDemographics].[CustomerTypeID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerDemographics_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerDemographics table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@CustomerDesc" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerTypeID]
	, [CustomerDesc]
    FROM
	[dbo].[CustomerDemographics]
    WHERE 
	 ([CustomerTypeID] = @CustomerTypeId OR @CustomerTypeId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerTypeID]
	, [CustomerDesc]
    FROM
	[dbo].[CustomerDemographics]
    WHERE 
	 ([CustomerTypeID] = @CustomerTypeId AND @CustomerTypeId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="CustomerDemographics_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerDemographics table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerTypeID]
					, [CustomerDesc]
					FROM [dbo].[CustomerDemographics] {0}
				)
				SELECT
				       [CustomerTypeID],
				       [CustomerDesc]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CustomerDemographics] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Customers_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Customers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax]
				FROM
					[dbo].[Customers]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Customers_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customers table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [ContactName]'
				SET @SQL = @SQL + ', [ContactTitle]'
				SET @SQL = @SQL + ', [Address]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Phone]'
				SET @SQL = @SQL + ', [Fax]'
				SET @SQL = @SQL + ' FROM [dbo].[Customers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [ContactName],'
				SET @SQL = @SQL + ' [ContactTitle],'
				SET @SQL = @SQL + ' [Address],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Phone],'
				SET @SQL = @SQL + ' [Fax]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Customers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Customers_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Customers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ContactName" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@ContactTitle" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Customers]
					(
					[CustomerID]
					,[CompanyName]
					,[ContactName]
					,[ContactTitle]
					,[Address]
					,[City]
					,[Region]
					,[PostalCode]
					,[Country]
					,[Phone]
					,[Fax]
					)
				VALUES
					(
					@CustomerId
					,@CompanyName
					,@ContactName
					,@ContactTitle
					,@Address
					,@City
					,@Region
					,@PostalCode
					,@Country
					,@Phone
					,@Fax
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Customers_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Customers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@ContactName" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@ContactTitle" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Customers]
				SET
					[CustomerID] = @CustomerId
					,[CompanyName] = @CompanyName
					,[ContactName] = @ContactName
					,[ContactTitle] = @ContactTitle
					,[Address] = @Address
					,[City] = @City
					,[Region] = @Region
					,[PostalCode] = @PostalCode
					,[Country] = @Country
					,[Phone] = @Phone
					,[Fax] = @Fax
				WHERE
[CustomerID] = @OriginalCustomerId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Customers_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Customers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Customers] WITH (ROWLOCK) 
				WHERE
					[CustomerID] = @CustomerId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Customers_GetByCity" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax]
				FROM
					[dbo].[Customers]
				WHERE
					[City] = @City
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Customers_GetByCompanyName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax]
				FROM
					[dbo].[Customers]
				WHERE
					[CompanyName] = @CompanyName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Customers_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax]
				FROM
					[dbo].[Customers]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Customers_GetByPostalCode" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax]
				FROM
					[dbo].[Customers]
				WHERE
					[PostalCode] = @PostalCode
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Customers_GetByRegion" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[CompanyName],
					[ContactName],
					[ContactTitle],
					[Address],
					[City],
					[Region],
					[PostalCode],
					[Country],
					[Phone],
					[Fax]
				FROM
					[dbo].[Customers]
				WHERE
					[Region] = @Region
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Customers_GetByCustomerTypeIdFromCustomerCustomerDemo" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Customers].[CustomerID]
       ,dbo.[Customers].[CompanyName]
       ,dbo.[Customers].[ContactName]
       ,dbo.[Customers].[ContactTitle]
       ,dbo.[Customers].[Address]
       ,dbo.[Customers].[City]
       ,dbo.[Customers].[Region]
       ,dbo.[Customers].[PostalCode]
       ,dbo.[Customers].[Country]
       ,dbo.[Customers].[Phone]
       ,dbo.[Customers].[Fax]
  FROM dbo.[Customers]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[CustomerCustomerDemo] 
                WHERE dbo.[CustomerCustomerDemo].[CustomerTypeID] = @CustomerTypeId
                  AND dbo.[CustomerCustomerDemo].[CustomerID] = dbo.[Customers].[CustomerID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="Customers_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Customers table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@ContactName" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@ContactTitle" type="nvarchar" direction="Input" size="30" precision="0" scale="0" param="(30)" nulldefault="null"/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="60" precision="0" scale="0" param="(60)" nulldefault="null"/>
				<parameter name="@City" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Region" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@PostalCode" type="nvarchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="15" precision="0" scale="0" param="(15)" nulldefault="null"/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault="null"/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="24" precision="0" scale="0" param="(24)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerID]
	, [CompanyName]
	, [ContactName]
	, [ContactTitle]
	, [Address]
	, [City]
	, [Region]
	, [PostalCode]
	, [Country]
	, [Phone]
	, [Fax]
    FROM
	[dbo].[Customers]
    WHERE 
	 ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([ContactName] = @ContactName OR @ContactName IS NULL)
	AND ([ContactTitle] = @ContactTitle OR @ContactTitle IS NULL)
	AND ([Address] = @Address OR @Address IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([Region] = @Region OR @Region IS NULL)
	AND ([PostalCode] = @PostalCode OR @PostalCode IS NULL)
	AND ([Country] = @Country OR @Country IS NULL)
	AND ([Phone] = @Phone OR @Phone IS NULL)
	AND ([Fax] = @Fax OR @Fax IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerID]
	, [CompanyName]
	, [ContactName]
	, [ContactTitle]
	, [Address]
	, [City]
	, [Region]
	, [PostalCode]
	, [Country]
	, [Phone]
	, [Fax]
    FROM
	[dbo].[Customers]
    WHERE 
	 ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([ContactName] = @ContactName AND @ContactName is not null)
	OR ([ContactTitle] = @ContactTitle AND @ContactTitle is not null)
	OR ([Address] = @Address AND @Address is not null)
	OR ([City] = @City AND @City is not null)
	OR ([Region] = @Region AND @Region is not null)
	OR ([PostalCode] = @PostalCode AND @PostalCode is not null)
	OR ([Country] = @Country AND @Country is not null)
	OR ([Phone] = @Phone AND @Phone is not null)
	OR ([Fax] = @Fax AND @Fax is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Customers_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customers table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerID]
					, [CompanyName]
					, [ContactName]
					, [ContactTitle]
					, [Address]
					, [City]
					, [Region]
					, [PostalCode]
					, [Country]
					, [Phone]
					, [Fax]
					FROM [dbo].[Customers] {0}
				)
				SELECT
				       [CustomerID],
				       [CompanyName],
				       [ContactName],
				       [ContactTitle],
				       [Address],
				       [City],
				       [Region],
				       [PostalCode],
				       [Country],
				       [Phone],
				       [Fax]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Customers] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Products_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Products table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ProductID],
					[ProductName],
					[SupplierID],
					[CategoryID],
					[QuantityPerUnit],
					[UnitPrice],
					[UnitsInStock],
					[UnitsOnOrder],
					[ReorderLevel],
					[Discontinued]
				FROM
					[dbo].[Products]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Products_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Products table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductName]'
				SET @SQL = @SQL + ', [SupplierID]'
				SET @SQL = @SQL + ', [CategoryID]'
				SET @SQL = @SQL + ', [QuantityPerUnit]'
				SET @SQL = @SQL + ', [UnitPrice]'
				SET @SQL = @SQL + ', [UnitsInStock]'
				SET @SQL = @SQL + ', [UnitsOnOrder]'
				SET @SQL = @SQL + ', [ReorderLevel]'
				SET @SQL = @SQL + ', [Discontinued]'
				SET @SQL = @SQL + ' FROM [dbo].[Products]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductName],'
				SET @SQL = @SQL + ' [SupplierID],'
				SET @SQL = @SQL + ' [CategoryID],'
				SET @SQL = @SQL + ' [QuantityPerUnit],'
				SET @SQL = @SQL + ' [UnitPrice],'
				SET @SQL = @SQL + ' [UnitsInStock],'
				SET @SQL = @SQL + ' [UnitsOnOrder],'
				SET @SQL = @SQL + ' [ReorderLevel],'
				SET @SQL = @SQL + ' [Discontinued]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Products]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Products_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Products table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuantityPerUnit" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@UnitsInStock" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitsOnOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ReorderLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Discontinued" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Products]
					(
					[ProductName]
					,[SupplierID]
					,[CategoryID]
					,[QuantityPerUnit]
					,[UnitPrice]
					,[UnitsInStock]
					,[UnitsOnOrder]
					,[ReorderLevel]
					,[Discontinued]
					)
				VALUES
					(
					@ProductName
					,@SupplierId
					,@CategoryId
					,@QuantityPerUnit
					,@UnitPrice
					,@UnitsInStock
					,@UnitsOnOrder
					,@ReorderLevel
					,@Discontinued
					)
				
				-- Get the identity value
				SET @ProductId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Products_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Products table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuantityPerUnit" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@UnitsInStock" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitsOnOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@ReorderLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Discontinued" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Products]
				SET
					[ProductName] = @ProductName
					,[SupplierID] = @SupplierId
					,[CategoryID] = @CategoryId
					,[QuantityPerUnit] = @QuantityPerUnit
					,[UnitPrice] = @UnitPrice
					,[UnitsInStock] = @UnitsInStock
					,[UnitsOnOrder] = @UnitsOnOrder
					,[ReorderLevel] = @ReorderLevel
					,[Discontinued] = @Discontinued
				WHERE
[ProductID] = @ProductId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Products_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Products table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Products] WITH (ROWLOCK) 
				WHERE
					[ProductID] = @ProductId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Products_GetByCategoryId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Products table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[ProductName],
					[SupplierID],
					[CategoryID],
					[QuantityPerUnit],
					[UnitPrice],
					[UnitsInStock],
					[UnitsOnOrder],
					[ReorderLevel],
					[Discontinued]
				FROM
					[dbo].[Products]
				WHERE
					[CategoryID] = @CategoryId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Products_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Products table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[ProductName],
					[SupplierID],
					[CategoryID],
					[QuantityPerUnit],
					[UnitPrice],
					[UnitsInStock],
					[UnitsOnOrder],
					[ReorderLevel],
					[Discontinued]
				FROM
					[dbo].[Products]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Products_GetByProductName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Products table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[ProductName],
					[SupplierID],
					[CategoryID],
					[QuantityPerUnit],
					[UnitPrice],
					[UnitsInStock],
					[UnitsOnOrder],
					[ReorderLevel],
					[Discontinued]
				FROM
					[dbo].[Products]
				WHERE
					[ProductName] = @ProductName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Products_GetBySupplierId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Products table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ProductID],
					[ProductName],
					[SupplierID],
					[CategoryID],
					[QuantityPerUnit],
					[UnitPrice],
					[UnitsInStock],
					[UnitsOnOrder],
					[ReorderLevel],
					[Discontinued]
				FROM
					[dbo].[Products]
				WHERE
					[SupplierID] = @SupplierId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Products_GetByOrderIdFromOrderDetails" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[Products].[ProductID]
       ,dbo.[Products].[ProductName]
       ,dbo.[Products].[SupplierID]
       ,dbo.[Products].[CategoryID]
       ,dbo.[Products].[QuantityPerUnit]
       ,dbo.[Products].[UnitPrice]
       ,dbo.[Products].[UnitsInStock]
       ,dbo.[Products].[UnitsOnOrder]
       ,dbo.[Products].[ReorderLevel]
       ,dbo.[Products].[Discontinued]
  FROM dbo.[Products]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Order Details] 
                WHERE dbo.[Order Details].[OrderID] = @OrderId
                  AND dbo.[Order Details].[ProductID] = dbo.[Products].[ProductID]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="Products_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Products table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductName" type="nvarchar" direction="Input" size="40" precision="0" scale="0" param="(40)" nulldefault="null"/>
				<parameter name="@SupplierId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CategoryId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@QuantityPerUnit" type="nvarchar" direction="Input" size="20" precision="0" scale="0" param="(20)" nulldefault="null"/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@UnitsInStock" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@UnitsOnOrder" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@ReorderLevel" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Discontinued" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ProductID]
	, [ProductName]
	, [SupplierID]
	, [CategoryID]
	, [QuantityPerUnit]
	, [UnitPrice]
	, [UnitsInStock]
	, [UnitsOnOrder]
	, [ReorderLevel]
	, [Discontinued]
    FROM
	[dbo].[Products]
    WHERE 
	 ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([ProductName] = @ProductName OR @ProductName IS NULL)
	AND ([SupplierID] = @SupplierId OR @SupplierId IS NULL)
	AND ([CategoryID] = @CategoryId OR @CategoryId IS NULL)
	AND ([QuantityPerUnit] = @QuantityPerUnit OR @QuantityPerUnit IS NULL)
	AND ([UnitPrice] = @UnitPrice OR @UnitPrice IS NULL)
	AND ([UnitsInStock] = @UnitsInStock OR @UnitsInStock IS NULL)
	AND ([UnitsOnOrder] = @UnitsOnOrder OR @UnitsOnOrder IS NULL)
	AND ([ReorderLevel] = @ReorderLevel OR @ReorderLevel IS NULL)
	AND ([Discontinued] = @Discontinued OR @Discontinued IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ProductID]
	, [ProductName]
	, [SupplierID]
	, [CategoryID]
	, [QuantityPerUnit]
	, [UnitPrice]
	, [UnitsInStock]
	, [UnitsOnOrder]
	, [ReorderLevel]
	, [Discontinued]
    FROM
	[dbo].[Products]
    WHERE 
	 ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([ProductName] = @ProductName AND @ProductName is not null)
	OR ([SupplierID] = @SupplierId AND @SupplierId is not null)
	OR ([CategoryID] = @CategoryId AND @CategoryId is not null)
	OR ([QuantityPerUnit] = @QuantityPerUnit AND @QuantityPerUnit is not null)
	OR ([UnitPrice] = @UnitPrice AND @UnitPrice is not null)
	OR ([UnitsInStock] = @UnitsInStock AND @UnitsInStock is not null)
	OR ([UnitsOnOrder] = @UnitsOnOrder AND @UnitsOnOrder is not null)
	OR ([ReorderLevel] = @ReorderLevel AND @ReorderLevel is not null)
	OR ([Discontinued] = @Discontinued AND @Discontinued is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Products_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Products table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [ProductID]
					, [ProductName]
					, [SupplierID]
					, [CategoryID]
					, [QuantityPerUnit]
					, [UnitPrice]
					, [UnitsInStock]
					, [UnitsOnOrder]
					, [ReorderLevel]
					, [Discontinued]
					FROM [dbo].[Products] {0}
				)
				SELECT
				       [ProductID],
				       [ProductName],
				       [SupplierID],
				       [CategoryID],
				       [QuantityPerUnit],
				       [UnitPrice],
				       [UnitsInStock],
				       [UnitsOnOrder],
				       [ReorderLevel],
				       [Discontinued]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Products] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="OrderDetails_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Order Details] table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[OrderID],
					[ProductID],
					[UnitPrice],
					[Quantity],
					[Discount]
				FROM
					[dbo].[Order Details]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="OrderDetails_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Order Details] table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[OrderID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [OrderID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [UnitPrice]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [Discount]'
				SET @SQL = @SQL + ' FROM [dbo].[Order Details]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [OrderID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [UnitPrice],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [Discount]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Order Details]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="OrderDetails_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the [Order Details] table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Quantity" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Discount" type="real" direction="Input" size="4" precision="24" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Order Details]
					(
					[OrderID]
					,[ProductID]
					,[UnitPrice]
					,[Quantity]
					,[Discount]
					)
				VALUES
					(
					@OrderId
					,@ProductId
					,@UnitPrice
					,@Quantity
					,@Discount
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="OrderDetails_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the [Order Details] table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalOrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault=""/>
				<parameter name="@Quantity" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault=""/>
				<parameter name="@Discount" type="real" direction="Input" size="4" precision="24" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Order Details]
				SET
					[OrderID] = @OrderId
					,[ProductID] = @ProductId
					,[UnitPrice] = @UnitPrice
					,[Quantity] = @Quantity
					,[Discount] = @Discount
				WHERE
[OrderID] = @OriginalOrderId 
AND [ProductID] = @OriginalProductId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="OrderDetails_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the [Order Details] table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Order Details] WITH (ROWLOCK) 
				WHERE
					[OrderID] = @OrderId
					AND [ProductID] = @ProductId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="OrderDetails_GetByOrderId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Order Details table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[ProductID],
					[UnitPrice],
					[Quantity],
					[Discount]
				FROM
					[dbo].[Order Details]
				WHERE
					[OrderID] = @OrderId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="OrderDetails_GetByOrderIdProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Order Details table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[ProductID],
					[UnitPrice],
					[Quantity],
					[Discount]
				FROM
					[dbo].[Order Details]
				WHERE
					[OrderID] = @OrderId
					AND [ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="OrderDetails_GetByProductId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Order Details table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[OrderID],
					[ProductID],
					[UnitPrice],
					[Quantity],
					[Discount]
				FROM
					[dbo].[Order Details]
				WHERE
					[ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="OrderDetails_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the [Order Details] table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@OrderId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@ProductId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UnitPrice" type="money" direction="Input" size="8" precision="19" scale="4" param="" nulldefault="null"/>
				<parameter name="@Quantity" type="smallint" direction="Input" size="2" precision="5" scale="0" param="" nulldefault="null"/>
				<parameter name="@Discount" type="real" direction="Input" size="4" precision="24" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [OrderID]
	, [ProductID]
	, [UnitPrice]
	, [Quantity]
	, [Discount]
    FROM
	[dbo].[Order Details]
    WHERE 
	 ([OrderID] = @OrderId OR @OrderId IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([UnitPrice] = @UnitPrice OR @UnitPrice IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([Discount] = @Discount OR @Discount IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [OrderID]
	, [ProductID]
	, [UnitPrice]
	, [Quantity]
	, [Discount]
    FROM
	[dbo].[Order Details]
    WHERE 
	 ([OrderID] = @OrderId AND @OrderId is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([UnitPrice] = @UnitPrice AND @UnitPrice is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([Discount] = @Discount AND @Discount is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="OrderDetails_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Order Details] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [OrderID]
					, [ProductID]
					, [UnitPrice]
					, [Quantity]
					, [Discount]
					FROM [dbo].[Order Details] {0}
				)
				SELECT
				       [OrderID],
				       [ProductID],
				       [UnitPrice],
				       [Quantity],
				       [Discount]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Order Details] {0};
				
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="CustomerCustomerDemo_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerCustomerDemo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CustomerID],
					[CustomerTypeID]
				FROM
					[dbo].[CustomerCustomerDemo]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="CustomerCustomerDemo_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerCustomerDemo table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(MAX)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [CustomerTypeID]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerCustomerDemo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [CustomerTypeID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerCustomerDemo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="CustomerCustomerDemo_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerCustomerDemo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[CustomerCustomerDemo]
					(
					[CustomerID]
					,[CustomerTypeID]
					)
				VALUES
					(
					@CustomerId
					,@CustomerTypeId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerCustomerDemo_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerCustomerDemo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@OriginalCustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
				<parameter name="@OriginalCustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerCustomerDemo]
				SET
					[CustomerID] = @CustomerId
					,[CustomerTypeID] = @CustomerTypeId
				WHERE
[CustomerID] = @OriginalCustomerId 
AND [CustomerTypeID] = @OriginalCustomerTypeId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerCustomerDemo_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerCustomerDemo table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CustomerCustomerDemo] WITH (ROWLOCK) 
				WHERE
					[CustomerID] = @CustomerId
					AND [CustomerTypeID] = @CustomerTypeId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerCustomerDemo_GetByCustomerTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerCustomerDemo table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CustomerID],
					[CustomerTypeID]
				FROM
					[dbo].[CustomerCustomerDemo]
				WHERE
					[CustomerTypeID] = @CustomerTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerCustomerDemo_GetByCustomerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerCustomerDemo table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CustomerID],
					[CustomerTypeID]
				FROM
					[dbo].[CustomerCustomerDemo]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CustomerCustomerDemo_GetByCustomerIdCustomerTypeId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerCustomerDemo table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault=""/>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CustomerID],
					[CustomerTypeID]
				FROM
					[dbo].[CustomerCustomerDemo]
				WHERE
					[CustomerID] = @CustomerId
					AND [CustomerTypeID] = @CustomerTypeId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="CustomerCustomerDemo_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerCustomerDemo table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CustomerId" type="nchar" direction="Input" size="5" precision="0" scale="0" param="(5)" nulldefault="null"/>
				<parameter name="@CustomerTypeId" type="nchar" direction="Input" size="10" precision="0" scale="0" param="(10)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CustomerID]
	, [CustomerTypeID]
    FROM
	[dbo].[CustomerCustomerDemo]
    WHERE 
	 ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([CustomerTypeID] = @CustomerTypeId OR @CustomerTypeId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CustomerID]
	, [CustomerTypeID]
    FROM
	[dbo].[CustomerCustomerDemo]
    WHERE 
	 ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([CustomerTypeID] = @CustomerTypeId AND @CustomerTypeId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="CustomerCustomerDemo_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerCustomerDemo table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				WITH PageIndex AS (
					SELECT TOP {3} row_number() over (order by {1}) AS RowIndex
					, [CustomerID]
					, [CustomerTypeID]
					FROM [dbo].[CustomerCustomerDemo] {0}
				)
				SELECT
				       [CustomerID],
				       [CustomerTypeID]
				  FROM PageIndex
				 WHERE RowIndex > {2}
				   AND RowIndex <= {3}
				ORDER BY {1};
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CustomerCustomerDemo] {0};
				
				END
			]]></body>
		</procedure>
		
            <procedure owner="dbo" name="Alphabeticallistofproducts_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Alphabetical list of products] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [ProductID],
                        [ProductName],
                        [SupplierID],
                        [CategoryID],
                        [QuantityPerUnit],
                        [UnitPrice],
                        [UnitsInStock],
                        [UnitsOnOrder],
                        [ReorderLevel],
                        [Discontinued],
                        [CategoryName]
                    FROM
                        [dbo].[Alphabetical list of products]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="Alphabeticallistofproducts_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Alphabetical list of products] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[ProductID]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [ProductID]'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ', [SupplierID]'
                    SET @SQL = @SQL + ', [CategoryID]'
                    SET @SQL = @SQL + ', [QuantityPerUnit]'
                    SET @SQL = @SQL + ', [UnitPrice]'
                    SET @SQL = @SQL + ', [UnitsInStock]'
                    SET @SQL = @SQL + ', [UnitsOnOrder]'
                    SET @SQL = @SQL + ', [ReorderLevel]'
                    SET @SQL = @SQL + ', [Discontinued]'
                    SET @SQL = @SQL + ', [CategoryName]'
                    SET @SQL = @SQL + ' FROM [dbo].[Alphabetical list of products]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [ProductID],'
                    SET @SQL = @SQL + ' [ProductName],'
                    SET @SQL = @SQL + ' [SupplierID],'
                    SET @SQL = @SQL + ' [CategoryID],'
                    SET @SQL = @SQL + ' [QuantityPerUnit],'
                    SET @SQL = @SQL + ' [UnitPrice],'
                    SET @SQL = @SQL + ' [UnitsInStock],'
                    SET @SQL = @SQL + ' [UnitsOnOrder],'
                    SET @SQL = @SQL + ' [ReorderLevel],'
                    SET @SQL = @SQL + ' [Discontinued],'
                    SET @SQL = @SQL + ' [CategoryName]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Alphabetical list of products]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="Alphabeticallistofproducts_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Alphabetical list of products] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [ProductID]
                        , [ProductName]
                        , [SupplierID]
                        , [CategoryID]
                        , [QuantityPerUnit]
                        , [UnitPrice]
                        , [UnitsInStock]
                        , [UnitsOnOrder]
                        , [ReorderLevel]
                        , [Discontinued]
                        , [CategoryName]
                        FROM [dbo].[Alphabetical list of products] {0}
                    )
                    SELECT
                        [ProductID],
                        [ProductName],
                        [SupplierID],
                        [CategoryID],
                        [QuantityPerUnit],
                        [UnitPrice],
                        [UnitsInStock],
                        [UnitsOnOrder],
                        [ReorderLevel],
                        [Discontinued],
                        [CategoryName]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Alphabetical list of products] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="CategorySalesfor1997_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Category Sales for 1997] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [CategoryName],
                        [CategorySales]
                    FROM
                        [dbo].[Category Sales for 1997]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="CategorySalesfor1997_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Category Sales for 1997] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[CategoryName]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [CategoryName]'
                    SET @SQL = @SQL + ', [CategorySales]'
                    SET @SQL = @SQL + ' FROM [dbo].[Category Sales for 1997]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [CategoryName],'
                    SET @SQL = @SQL + ' [CategorySales]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Category Sales for 1997]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="CategorySalesfor1997_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Category Sales for 1997] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [CategoryName]
                        , [CategorySales]
                        FROM [dbo].[Category Sales for 1997] {0}
                    )
                    SELECT
                        [CategoryName],
                        [CategorySales]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Category Sales for 1997] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="CurrentProductList_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Current Product List] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [ProductID],
                        [ProductName]
                    FROM
                        [dbo].[Current Product List]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="CurrentProductList_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Current Product List] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[ProductID]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [ProductID]'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ' FROM [dbo].[Current Product List]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [ProductID],'
                    SET @SQL = @SQL + ' [ProductName]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Current Product List]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="CurrentProductList_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Current Product List] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [ProductID]
                        , [ProductName]
                        FROM [dbo].[Current Product List] {0}
                    )
                    SELECT
                        [ProductID],
                        [ProductName]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Current Product List] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="CustomerandSuppliersbyCity_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Customer and Suppliers by City] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [City],
                        [CompanyName],
                        [ContactName],
                        [Relationship]
                    FROM
                        [dbo].[Customer and Suppliers by City]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="CustomerandSuppliersbyCity_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Customer and Suppliers by City] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[City]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [City]'
                    SET @SQL = @SQL + ', [CompanyName]'
                    SET @SQL = @SQL + ', [ContactName]'
                    SET @SQL = @SQL + ', [Relationship]'
                    SET @SQL = @SQL + ' FROM [dbo].[Customer and Suppliers by City]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [City],'
                    SET @SQL = @SQL + ' [CompanyName],'
                    SET @SQL = @SQL + ' [ContactName],'
                    SET @SQL = @SQL + ' [Relationship]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Customer and Suppliers by City]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="CustomerandSuppliersbyCity_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Customer and Suppliers by City] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [City]
                        , [CompanyName]
                        , [ContactName]
                        , [Relationship]
                        FROM [dbo].[Customer and Suppliers by City] {0}
                    )
                    SELECT
                        [City],
                        [CompanyName],
                        [ContactName],
                        [Relationship]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Customer and Suppliers by City] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="Invoices_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Invoices view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [ShipName],
                        [ShipAddress],
                        [ShipCity],
                        [ShipRegion],
                        [ShipPostalCode],
                        [ShipCountry],
                        [CustomerID],
                        [CustomerName],
                        [Address],
                        [City],
                        [Region],
                        [PostalCode],
                        [Country],
                        [Salesperson],
                        [OrderID],
                        [OrderDate],
                        [RequiredDate],
                        [ShippedDate],
                        [ShipperName],
                        [ProductID],
                        [ProductName],
                        [UnitPrice],
                        [Quantity],
                        [Discount],
                        [ExtendedPrice],
                        [Freight]
                    FROM
                        [dbo].[Invoices]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="Invoices_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Invoices view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[ShipName]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [ShipName]'
                    SET @SQL = @SQL + ', [ShipAddress]'
                    SET @SQL = @SQL + ', [ShipCity]'
                    SET @SQL = @SQL + ', [ShipRegion]'
                    SET @SQL = @SQL + ', [ShipPostalCode]'
                    SET @SQL = @SQL + ', [ShipCountry]'
                    SET @SQL = @SQL + ', [CustomerID]'
                    SET @SQL = @SQL + ', [CustomerName]'
                    SET @SQL = @SQL + ', [Address]'
                    SET @SQL = @SQL + ', [City]'
                    SET @SQL = @SQL + ', [Region]'
                    SET @SQL = @SQL + ', [PostalCode]'
                    SET @SQL = @SQL + ', [Country]'
                    SET @SQL = @SQL + ', [Salesperson]'
                    SET @SQL = @SQL + ', [OrderID]'
                    SET @SQL = @SQL + ', [OrderDate]'
                    SET @SQL = @SQL + ', [RequiredDate]'
                    SET @SQL = @SQL + ', [ShippedDate]'
                    SET @SQL = @SQL + ', [ShipperName]'
                    SET @SQL = @SQL + ', [ProductID]'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ', [UnitPrice]'
                    SET @SQL = @SQL + ', [Quantity]'
                    SET @SQL = @SQL + ', [Discount]'
                    SET @SQL = @SQL + ', [ExtendedPrice]'
                    SET @SQL = @SQL + ', [Freight]'
                    SET @SQL = @SQL + ' FROM [dbo].[Invoices]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [ShipName],'
                    SET @SQL = @SQL + ' [ShipAddress],'
                    SET @SQL = @SQL + ' [ShipCity],'
                    SET @SQL = @SQL + ' [ShipRegion],'
                    SET @SQL = @SQL + ' [ShipPostalCode],'
                    SET @SQL = @SQL + ' [ShipCountry],'
                    SET @SQL = @SQL + ' [CustomerID],'
                    SET @SQL = @SQL + ' [CustomerName],'
                    SET @SQL = @SQL + ' [Address],'
                    SET @SQL = @SQL + ' [City],'
                    SET @SQL = @SQL + ' [Region],'
                    SET @SQL = @SQL + ' [PostalCode],'
                    SET @SQL = @SQL + ' [Country],'
                    SET @SQL = @SQL + ' [Salesperson],'
                    SET @SQL = @SQL + ' [OrderID],'
                    SET @SQL = @SQL + ' [OrderDate],'
                    SET @SQL = @SQL + ' [RequiredDate],'
                    SET @SQL = @SQL + ' [ShippedDate],'
                    SET @SQL = @SQL + ' [ShipperName],'
                    SET @SQL = @SQL + ' [ProductID],'
                    SET @SQL = @SQL + ' [ProductName],'
                    SET @SQL = @SQL + ' [UnitPrice],'
                    SET @SQL = @SQL + ' [Quantity],'
                    SET @SQL = @SQL + ' [Discount],'
                    SET @SQL = @SQL + ' [ExtendedPrice],'
                    SET @SQL = @SQL + ' [Freight]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Invoices]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="Invoices_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Invoices table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [ShipName]
                        , [ShipAddress]
                        , [ShipCity]
                        , [ShipRegion]
                        , [ShipPostalCode]
                        , [ShipCountry]
                        , [CustomerID]
                        , [CustomerName]
                        , [Address]
                        , [City]
                        , [Region]
                        , [PostalCode]
                        , [Country]
                        , [Salesperson]
                        , [OrderID]
                        , [OrderDate]
                        , [RequiredDate]
                        , [ShippedDate]
                        , [ShipperName]
                        , [ProductID]
                        , [ProductName]
                        , [UnitPrice]
                        , [Quantity]
                        , [Discount]
                        , [ExtendedPrice]
                        , [Freight]
                        FROM [dbo].[Invoices] {0}
                    )
                    SELECT
                        [ShipName],
                        [ShipAddress],
                        [ShipCity],
                        [ShipRegion],
                        [ShipPostalCode],
                        [ShipCountry],
                        [CustomerID],
                        [CustomerName],
                        [Address],
                        [City],
                        [Region],
                        [PostalCode],
                        [Country],
                        [Salesperson],
                        [OrderID],
                        [OrderDate],
                        [RequiredDate],
                        [ShippedDate],
                        [ShipperName],
                        [ProductID],
                        [ProductName],
                        [UnitPrice],
                        [Quantity],
                        [Discount],
                        [ExtendedPrice],
                        [Freight]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Invoices] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="OrderDetailsExtended_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Order Details Extended] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [OrderID],
                        [ProductID],
                        [ProductName],
                        [UnitPrice],
                        [Quantity],
                        [Discount],
                        [ExtendedPrice]
                    FROM
                        [dbo].[Order Details Extended]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="OrderDetailsExtended_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Order Details Extended] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[OrderID]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [OrderID]'
                    SET @SQL = @SQL + ', [ProductID]'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ', [UnitPrice]'
                    SET @SQL = @SQL + ', [Quantity]'
                    SET @SQL = @SQL + ', [Discount]'
                    SET @SQL = @SQL + ', [ExtendedPrice]'
                    SET @SQL = @SQL + ' FROM [dbo].[Order Details Extended]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [OrderID],'
                    SET @SQL = @SQL + ' [ProductID],'
                    SET @SQL = @SQL + ' [ProductName],'
                    SET @SQL = @SQL + ' [UnitPrice],'
                    SET @SQL = @SQL + ' [Quantity],'
                    SET @SQL = @SQL + ' [Discount],'
                    SET @SQL = @SQL + ' [ExtendedPrice]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Order Details Extended]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="OrderDetailsExtended_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Order Details Extended] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [OrderID]
                        , [ProductID]
                        , [ProductName]
                        , [UnitPrice]
                        , [Quantity]
                        , [Discount]
                        , [ExtendedPrice]
                        FROM [dbo].[Order Details Extended] {0}
                    )
                    SELECT
                        [OrderID],
                        [ProductID],
                        [ProductName],
                        [UnitPrice],
                        [Quantity],
                        [Discount],
                        [ExtendedPrice]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Order Details Extended] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="OrderSubtotals_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Order Subtotals] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [OrderID],
                        [Subtotal]
                    FROM
                        [dbo].[Order Subtotals]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="OrderSubtotals_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Order Subtotals] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[OrderID]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [OrderID]'
                    SET @SQL = @SQL + ', [Subtotal]'
                    SET @SQL = @SQL + ' FROM [dbo].[Order Subtotals]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [OrderID],'
                    SET @SQL = @SQL + ' [Subtotal]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Order Subtotals]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="OrderSubtotals_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Order Subtotals] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [OrderID]
                        , [Subtotal]
                        FROM [dbo].[Order Subtotals] {0}
                    )
                    SELECT
                        [OrderID],
                        [Subtotal]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Order Subtotals] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="OrdersQry_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Orders Qry] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [OrderID],
                        [CustomerID],
                        [EmployeeID],
                        [OrderDate],
                        [RequiredDate],
                        [ShippedDate],
                        [ShipVia],
                        [Freight],
                        [ShipName],
                        [ShipAddress],
                        [ShipCity],
                        [ShipRegion],
                        [ShipPostalCode],
                        [ShipCountry],
                        [CompanyName],
                        [Address],
                        [City],
                        [Region],
                        [PostalCode],
                        [Country]
                    FROM
                        [dbo].[Orders Qry]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="OrdersQry_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Orders Qry] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[OrderID]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [OrderID]'
                    SET @SQL = @SQL + ', [CustomerID]'
                    SET @SQL = @SQL + ', [EmployeeID]'
                    SET @SQL = @SQL + ', [OrderDate]'
                    SET @SQL = @SQL + ', [RequiredDate]'
                    SET @SQL = @SQL + ', [ShippedDate]'
                    SET @SQL = @SQL + ', [ShipVia]'
                    SET @SQL = @SQL + ', [Freight]'
                    SET @SQL = @SQL + ', [ShipName]'
                    SET @SQL = @SQL + ', [ShipAddress]'
                    SET @SQL = @SQL + ', [ShipCity]'
                    SET @SQL = @SQL + ', [ShipRegion]'
                    SET @SQL = @SQL + ', [ShipPostalCode]'
                    SET @SQL = @SQL + ', [ShipCountry]'
                    SET @SQL = @SQL + ', [CompanyName]'
                    SET @SQL = @SQL + ', [Address]'
                    SET @SQL = @SQL + ', [City]'
                    SET @SQL = @SQL + ', [Region]'
                    SET @SQL = @SQL + ', [PostalCode]'
                    SET @SQL = @SQL + ', [Country]'
                    SET @SQL = @SQL + ' FROM [dbo].[Orders Qry]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [OrderID],'
                    SET @SQL = @SQL + ' [CustomerID],'
                    SET @SQL = @SQL + ' [EmployeeID],'
                    SET @SQL = @SQL + ' [OrderDate],'
                    SET @SQL = @SQL + ' [RequiredDate],'
                    SET @SQL = @SQL + ' [ShippedDate],'
                    SET @SQL = @SQL + ' [ShipVia],'
                    SET @SQL = @SQL + ' [Freight],'
                    SET @SQL = @SQL + ' [ShipName],'
                    SET @SQL = @SQL + ' [ShipAddress],'
                    SET @SQL = @SQL + ' [ShipCity],'
                    SET @SQL = @SQL + ' [ShipRegion],'
                    SET @SQL = @SQL + ' [ShipPostalCode],'
                    SET @SQL = @SQL + ' [ShipCountry],'
                    SET @SQL = @SQL + ' [CompanyName],'
                    SET @SQL = @SQL + ' [Address],'
                    SET @SQL = @SQL + ' [City],'
                    SET @SQL = @SQL + ' [Region],'
                    SET @SQL = @SQL + ' [PostalCode],'
                    SET @SQL = @SQL + ' [Country]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Orders Qry]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="OrdersQry_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Orders Qry] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [OrderID]
                        , [CustomerID]
                        , [EmployeeID]
                        , [OrderDate]
                        , [RequiredDate]
                        , [ShippedDate]
                        , [ShipVia]
                        , [Freight]
                        , [ShipName]
                        , [ShipAddress]
                        , [ShipCity]
                        , [ShipRegion]
                        , [ShipPostalCode]
                        , [ShipCountry]
                        , [CompanyName]
                        , [Address]
                        , [City]
                        , [Region]
                        , [PostalCode]
                        , [Country]
                        FROM [dbo].[Orders Qry] {0}
                    )
                    SELECT
                        [OrderID],
                        [CustomerID],
                        [EmployeeID],
                        [OrderDate],
                        [RequiredDate],
                        [ShippedDate],
                        [ShipVia],
                        [Freight],
                        [ShipName],
                        [ShipAddress],
                        [ShipCity],
                        [ShipRegion],
                        [ShipPostalCode],
                        [ShipCountry],
                        [CompanyName],
                        [Address],
                        [City],
                        [Region],
                        [PostalCode],
                        [Country]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Orders Qry] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="ProductSalesfor1997_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Product Sales for 1997] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [CategoryName],
                        [ProductName],
                        [ProductSales]
                    FROM
                        [dbo].[Product Sales for 1997]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="ProductSalesfor1997_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Product Sales for 1997] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[CategoryName]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [CategoryName]'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ', [ProductSales]'
                    SET @SQL = @SQL + ' FROM [dbo].[Product Sales for 1997]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [CategoryName],'
                    SET @SQL = @SQL + ' [ProductName],'
                    SET @SQL = @SQL + ' [ProductSales]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Product Sales for 1997]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="ProductSalesfor1997_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Product Sales for 1997] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [CategoryName]
                        , [ProductName]
                        , [ProductSales]
                        FROM [dbo].[Product Sales for 1997] {0}
                    )
                    SELECT
                        [CategoryName],
                        [ProductName],
                        [ProductSales]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Product Sales for 1997] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="ProductsAboveAveragePrice_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Products Above Average Price] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [ProductName],
                        [UnitPrice]
                    FROM
                        [dbo].[Products Above Average Price]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="ProductsAboveAveragePrice_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Products Above Average Price] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[ProductName]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ', [UnitPrice]'
                    SET @SQL = @SQL + ' FROM [dbo].[Products Above Average Price]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [ProductName],'
                    SET @SQL = @SQL + ' [UnitPrice]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Products Above Average Price]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="ProductsAboveAveragePrice_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Products Above Average Price] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [ProductName]
                        , [UnitPrice]
                        FROM [dbo].[Products Above Average Price] {0}
                    )
                    SELECT
                        [ProductName],
                        [UnitPrice]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Products Above Average Price] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="ProductsbyCategory_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Products by Category] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [CategoryName],
                        [ProductName],
                        [QuantityPerUnit],
                        [UnitsInStock],
                        [Discontinued]
                    FROM
                        [dbo].[Products by Category]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="ProductsbyCategory_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Products by Category] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[CategoryName]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [CategoryName]'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ', [QuantityPerUnit]'
                    SET @SQL = @SQL + ', [UnitsInStock]'
                    SET @SQL = @SQL + ', [Discontinued]'
                    SET @SQL = @SQL + ' FROM [dbo].[Products by Category]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [CategoryName],'
                    SET @SQL = @SQL + ' [ProductName],'
                    SET @SQL = @SQL + ' [QuantityPerUnit],'
                    SET @SQL = @SQL + ' [UnitsInStock],'
                    SET @SQL = @SQL + ' [Discontinued]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Products by Category]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="ProductsbyCategory_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Products by Category] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [CategoryName]
                        , [ProductName]
                        , [QuantityPerUnit]
                        , [UnitsInStock]
                        , [Discontinued]
                        FROM [dbo].[Products by Category] {0}
                    )
                    SELECT
                        [CategoryName],
                        [ProductName],
                        [QuantityPerUnit],
                        [UnitsInStock],
                        [Discontinued]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Products by Category] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="QuarterlyOrders_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Quarterly Orders] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [CustomerID],
                        [CompanyName],
                        [City],
                        [Country]
                    FROM
                        [dbo].[Quarterly Orders]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="QuarterlyOrders_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Quarterly Orders] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[CustomerID]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [CustomerID]'
                    SET @SQL = @SQL + ', [CompanyName]'
                    SET @SQL = @SQL + ', [City]'
                    SET @SQL = @SQL + ', [Country]'
                    SET @SQL = @SQL + ' FROM [dbo].[Quarterly Orders]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [CustomerID],'
                    SET @SQL = @SQL + ' [CompanyName],'
                    SET @SQL = @SQL + ' [City],'
                    SET @SQL = @SQL + ' [Country]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Quarterly Orders]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="QuarterlyOrders_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Quarterly Orders] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [CustomerID]
                        , [CompanyName]
                        , [City]
                        , [Country]
                        FROM [dbo].[Quarterly Orders] {0}
                    )
                    SELECT
                        [CustomerID],
                        [CompanyName],
                        [City],
                        [Country]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Quarterly Orders] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SalesbyCategory_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Sales by Category] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [CategoryID],
                        [CategoryName],
                        [ProductName],
                        [ProductSales]
                    FROM
                        [dbo].[Sales by Category]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SalesbyCategory_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Sales by Category] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[CategoryID]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [CategoryID]'
                    SET @SQL = @SQL + ', [CategoryName]'
                    SET @SQL = @SQL + ', [ProductName]'
                    SET @SQL = @SQL + ', [ProductSales]'
                    SET @SQL = @SQL + ' FROM [dbo].[Sales by Category]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [CategoryID],'
                    SET @SQL = @SQL + ' [CategoryName],'
                    SET @SQL = @SQL + ' [ProductName],'
                    SET @SQL = @SQL + ' [ProductSales]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Sales by Category]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="SalesbyCategory_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Sales by Category] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [CategoryID]
                        , [CategoryName]
                        , [ProductName]
                        , [ProductSales]
                        FROM [dbo].[Sales by Category] {0}
                    )
                    SELECT
                        [CategoryID],
                        [CategoryName],
                        [ProductName],
                        [ProductSales]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Sales by Category] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SalesTotalsbyAmount_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Sales Totals by Amount] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [SaleAmount],
                        [OrderID],
                        [CompanyName],
                        [ShippedDate]
                    FROM
                        [dbo].[Sales Totals by Amount]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SalesTotalsbyAmount_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Sales Totals by Amount] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[SaleAmount]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [SaleAmount]'
                    SET @SQL = @SQL + ', [OrderID]'
                    SET @SQL = @SQL + ', [CompanyName]'
                    SET @SQL = @SQL + ', [ShippedDate]'
                    SET @SQL = @SQL + ' FROM [dbo].[Sales Totals by Amount]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [SaleAmount],'
                    SET @SQL = @SQL + ' [OrderID],'
                    SET @SQL = @SQL + ' [CompanyName],'
                    SET @SQL = @SQL + ' [ShippedDate]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Sales Totals by Amount]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="SalesTotalsbyAmount_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Sales Totals by Amount] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [SaleAmount]
                        , [OrderID]
                        , [CompanyName]
                        , [ShippedDate]
                        FROM [dbo].[Sales Totals by Amount] {0}
                    )
                    SELECT
                        [SaleAmount],
                        [OrderID],
                        [CompanyName],
                        [ShippedDate]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Sales Totals by Amount] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SummaryofSalesbyQuarter_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Summary of Sales by Quarter] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [ShippedDate],
                        [OrderID],
                        [Subtotal]
                    FROM
                        [dbo].[Summary of Sales by Quarter]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SummaryofSalesbyQuarter_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Summary of Sales by Quarter] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[ShippedDate]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [ShippedDate]'
                    SET @SQL = @SQL + ', [OrderID]'
                    SET @SQL = @SQL + ', [Subtotal]'
                    SET @SQL = @SQL + ' FROM [dbo].[Summary of Sales by Quarter]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [ShippedDate],'
                    SET @SQL = @SQL + ' [OrderID],'
                    SET @SQL = @SQL + ' [Subtotal]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Summary of Sales by Quarter]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="SummaryofSalesbyQuarter_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Summary of Sales by Quarter] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [ShippedDate]
                        , [OrderID]
                        , [Subtotal]
                        FROM [dbo].[Summary of Sales by Quarter] {0}
                    )
                    SELECT
                        [ShippedDate],
                        [OrderID],
                        [Subtotal]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Summary of Sales by Quarter] {0};
                    
                    END
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SummaryofSalesbyYear_Get_List" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the [Summary of Sales by Year] view
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    SELECT
                        [ShippedDate],
                        [OrderID],
                        [Subtotal]
                    FROM
                        [dbo].[Summary of Sales by Year]
                        
                    SELECT @@ROWCOUNT			
                ]]></body>
            </procedure>
            
            <procedure owner="dbo" name="SummaryofSalesbyYear_Get" >
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Summary of Sales by Year] view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters>
                    <parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
                    <parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>			
                    <parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
                    <parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
                </parameters>
                <body><![CDATA[
                    
                    BEGIN
    
                    DECLARE @PageLowerBound int
                    DECLARE @PageUpperBound int
                    
                    -- Set the page bounds
                    SET @PageLowerBound = @PageSize * @PageIndex
                    SET @PageUpperBound = @PageLowerBound + @PageSize
    
                    IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
                    BEGIN
                        -- default order by to first column
                        SET @OrderBy = '[ShippedDate]'
                    END
    
                    -- SQL Server 2005 Paging
                    DECLARE @SQL AS nvarchar(MAX)
                    SET @SQL = 'WITH PageIndex AS ('
                    SET @SQL = @SQL + ' SELECT'
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
                    SET @SQL = @SQL + ', [ShippedDate]'
                    SET @SQL = @SQL + ', [OrderID]'
                    SET @SQL = @SQL + ', [Subtotal]'
                    SET @SQL = @SQL + ' FROM [dbo].[Summary of Sales by Year]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    SET @SQL = @SQL + ' ) SELECT'
                    SET @SQL = @SQL + ' [ShippedDate],'
                    SET @SQL = @SQL + ' [OrderID],'
                    SET @SQL = @SQL + ' [Subtotal]'
                    SET @SQL = @SQL + ' FROM PageIndex'
                    SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
                    IF @PageSize > 0
                    BEGIN
                        SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
                    END
                    IF LEN(@OrderBy) > 0
                    BEGIN
                        SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
                    END
                    EXEC sp_executesql @SQL
    
                    -- get row count
                    SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
                    SET @SQL = @SQL + ' FROM [dbo].[Summary of Sales by Year]'
                    IF LEN(@WhereClause) > 0
                    BEGIN
                        SET @SQL = @SQL + ' WHERE ' + @WhereClause
                    END
                    EXEC sp_executesql @SQL
                    
                    END
                ]]></body>
            </procedure>
            
            
            <procedure owner="dbo" name="SummaryofSalesbyYear_Find_Dynamic"  skip="true">
                <comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the [Summary of Sales by Year] table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
                <parameters/>
                <body><![CDATA[
                    
                    BEGIN
                    
                    WITH PageIndex AS (
                        SELECT TOP {3} row_number() OVER (ORDER BY {1}) AS RowIndex
                        , [ShippedDate]
                        , [OrderID]
                        , [Subtotal]
                        FROM [dbo].[Summary of Sales by Year] {0}
                    )
                    SELECT
                        [ShippedDate],
                        [OrderID],
                        [Subtotal]
                    FROM PageIndex
                    WHERE RowIndex > {2}
                    AND RowIndex <= {3}
                    ORDER BY {1};
                    
                    -- get total count
                    SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Summary of Sales by Year] {0};
                    
                    END
                ]]></body>
            </procedure>
            
</procedures>
</root>
