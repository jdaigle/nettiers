<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Northwind.Data</name>
    </assembly>
    <members>
        <member name="T:Northwind.Data.SqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a SQL WHERE clause.
            </summary>
        </member>
        <member name="T:Northwind.Data.ExpressionParserBase">
            <summary>
            Provides the base functionality required to parse search terms.
            </summary>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.#ctor(System.String,Northwind.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ExpressionParserBase class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.ParseCore(System.String)">
            <summary>
            Appends the specified search text to the current expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.ParseQuotes(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses quoted search terms.
            </summary>
            <param name="searchText"></param>
            <param name="quotedValues"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.IsKeyWord(System.String)">
            <summary>
            Determines whether the specified word is a reserved keyword.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.AppendOr">
            <summary>
            Appends an OR expression.
            </summary>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.AppendAnd">
            <summary>
            Appends an AND expression.
            </summary>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.AppendSpace">
            <summary>
            Appends an expression separator.
            </summary>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.OpenGrouping">
            <summary>
            Appends a group opened expression.
            </summary>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.CloseGrouping">
            <summary>
            Appends a group closed expression.
            </summary>
        </member>
        <member name="M:Northwind.Data.ExpressionParserBase.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="F:Northwind.Data.ExpressionParserBase.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.ExpressionParserBase.propertyName">
            <summary>
            The PropertyName member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.ExpressionParserBase.comparisonType">
            <summary>
            The ComparisonType member variable.
            </summary>
        </member>
        <member name="P:Northwind.Data.ExpressionParserBase.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:Northwind.Data.ExpressionParserBase.PropertyName">
            <summary>
            Gets or sets the PropertyName property.
            </summary>
        </member>
        <member name="P:Northwind.Data.ExpressionParserBase.ComparisonType">
            <summary>
            Gets or sets the ComparisonType property.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.#ctor(System.String,Northwind.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.#ctor(System.String,Northwind.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.AppendOr">
            <summary>
            Appends "OR" to the SQL statement.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.AppendAnd">
            <summary>
            Appends "AND" to the SQL statement.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.AppendSpace">
            <summary>
            Appends a space to the SQL statement.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.OpenGrouping">
            <summary>
            Appends a left parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.CloseGrouping">
            <summary>
            Appends a right parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the SQL statement.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.WrapWithSQL(System.String,System.String,System.Boolean)">
            <summary>
            Converts the search text into a valid search expression.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlExpressionParser.Parse(System.String)">
            <summary>
            Parses the specified value into separate search terms.
            </summary>
            <param name="value">The search text.</param>
            <returns>Returns a parsed search phrase.</returns>
        </member>
        <member name="T:Northwind.Data.ParameterizedSqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a parameterized SQL WHERE clause.
            </summary>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.#ctor(System.String,Northwind.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.#ctor(System.String,Northwind.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="F:Northwind.Data.ParameterizedSqlExpressionParser.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:Northwind.Data.ParameterizedSqlExpressionParser.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.NetTiersServiceSection">
            <summary>
            The class that hold the configuration section for the NetTiers Service.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersServiceSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:Northwind.Data.Bases.NetTiersProvider">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.NetTiersProviderBase">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.INetTiersProvider">
            <summary>
            Interface for NetTiersProvider
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.CreateTransaction">
            <summary>
            Creates the transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteDataSet(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteDataSet(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteDataSet(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteNonQuery(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteNonQuery(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteNonQuery(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteReader(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteReader(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteReader(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteScalar(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteScalar(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteScalar(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.INetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="config">The config.</param>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.CurrentLoadPolicy">
            <summary>
            Gets or sets the current load policy.
            </summary>
            <value>The current load policy.</value>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            </summary>
            <value>The default command timeout.</value>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.EnableEntityTracking">
            <summary>
            Gets or sets a value indicating whether [enable entity tracking].
            </summary>
            <value>
            	<c>true</c> if [enable entity tracking]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.EnableListTracking">
            <summary>
            Gets or sets a value indicating whether [enable list tracking].
            </summary>
            <value><c>true</c> if [enable list tracking]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.EnableMethodAuthorization">
            <summary>
            Gets or sets a value indicating whether [enable method authorization].
            </summary>
            <value>
            	<c>true</c> if [enable method authorization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.EntityCreationalFactoryType">
            <summary>
            Gets or sets the type of the entity creational factory.
            </summary>
            <value>The type of the entity creational factory.</value>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.IsTransactionSupported">
            <summary>
            Gets a value indicating whether this instance is transaction supported.
            </summary>
            <value>
            	<c>true</c> if this instance is transaction supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Northwind.Data.Bases.INetTiersProvider.UseEntityFactory">
            <summary>
            Gets or sets a value indicating whether [use entity factory].
            </summary>
            <value><c>true</c> if [use entity factory]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.CreateTransaction">
            <summary>
            Creates a new <see cref="T:Northwind.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteNonQuery(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteReader(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteReader(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteReader(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteDataSet(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteDataSet(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteDataSet(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteScalar(Northwind.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteScalar(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderBase.ExecuteScalar(Northwind.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.EntityCreationalFactoryType">
            <summary>
            Gets or sets the Creational Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.EnableEntityTracking">
            <summary>
            Gets or sets the ability to track entities.
            </summary>
            <value>true/false.</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.EnableListTracking">
            <summary>
            Gets or sets the Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.UseEntityFactory">
            <summary>
            Gets or sets the use entity factory property to enable the usage of the EntityFactory and it's type cache.
            </summary>
            <value>bool value</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.EnableMethodAuthorization">
            <summary>
            Gets or sets the use Enable Method Authorization to enable the usage of the Microsoft Patterns and Practices 
            IAuthorizationRuleProvider for code level authorization.
            </summary>
            <value>A bool value.</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.DefaultCommandTimeout">
            <summary>
            Gets or sets the default timeout for every command
            </summary>
            <value>integer value in seconds.</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.CurrentLoadPolicy">
            <summary>
            Get or set the current LoadPolicy in effect
            </summary>
            <value>A <see cref="T:Northwind.Data.Bases.LoadPolicy"/> enumeration member.</value>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderBase.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:Northwind.Data.Bases.NetTiersProvider"/> implementation is supporting Transactions.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.RegionProvider">
            <summary>
             Current RegionProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.TerritoriesProvider">
            <summary>
             Current TerritoriesProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.EmployeesProvider">
            <summary>
             Current EmployeesProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.SuppliersProvider">
            <summary>
             Current SuppliersProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.CustomersProvider">
            <summary>
             Current CustomersProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.CategoriesProvider">
            <summary>
             Current CategoriesProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.CustomerDemographicsProvider">
            <summary>
             Current CustomerDemographicsProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.CustomerCustomerDemoProvider">
            <summary>
             Current CustomerCustomerDemoProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.ShippersProvider">
            <summary>
             Current ShippersProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.ProductsProvider">
            <summary>
             Current ProductsProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.OrdersProvider">
            <summary>
             Current OrdersProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.EmployeeTerritoriesProvider">
            <summary>
             Current EmployeeTerritoriesProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.OrderDetailsProvider">
            <summary>
             Current OrderDetailsProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.AlphabeticalListOfProductsProvider">
            <summary>
             Current AlphabeticalListOfProductsProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.CategorySalesFor1997Provider">
            <summary>
             Current CategorySalesFor1997ProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.CurrentProductListProvider">
            <summary>
             Current CurrentProductListProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.CustomerAndSuppliersByCityProvider">
            <summary>
             Current CustomerAndSuppliersByCityProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.InvoicesProvider">
            <summary>
             Current InvoicesProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.OrderDetailsExtendedProvider">
            <summary>
             Current OrderDetailsExtendedProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.OrderSubtotalsProvider">
            <summary>
             Current OrderSubtotalsProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.OrdersQryProvider">
            <summary>
             Current OrdersQryProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.ProductSalesFor1997Provider">
            <summary>
             Current ProductSalesFor1997ProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.ProductsAboveAveragePriceProvider">
            <summary>
             Current ProductsAboveAveragePriceProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.ProductsByCategoryProvider">
            <summary>
             Current ProductsByCategoryProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.QuarterlyOrdersProvider">
            <summary>
             Current QuarterlyOrdersProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.SalesByCategoryProvider">
            <summary>
             Current SalesByCategoryProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.SalesTotalsByAmountProvider">
            <summary>
             Current SalesTotalsByAmountProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.SummaryOfSalesByQuarterProvider">
            <summary>
             Current SummaryOfSalesByQuarterProviderBase instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProvider.SummaryOfSalesByYearProvider">
            <summary>
             Current SummaryOfSalesByYearProviderBase instance.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrdersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrdersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EntityProviderBase`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:Northwind.Data.Bases.EntityProviderBaseCore`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="T:Northwind.Data.IEntityProvider`2">
            <summary>
            Defines the common data access methods that can be used by the
            ProviderDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.Get(Northwind.Data.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.GetAll(Northwind.Data.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.GetPaged(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.Insert(Northwind.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.Update(Northwind.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.Delete(Northwind.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.Save(Northwind.Data.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Northwind.Data.IEntityProvider`2.DeepSave(Northwind.Data.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Get(Northwind.Data.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Get(`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Get(Northwind.Data.TransactionManager,`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetAll(Northwind.Data.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetAll(Northwind.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetAll(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetPaged(Northwind.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetPaged(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetPaged(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(Northwind.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.TransactionManager,System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.IFilterParameterCollection,Northwind.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sortColumn conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Northwind.Data.SqlSortColumn"/> or <see cref="T:Northwind.Data.SqlSortBuilder`1"/> objects</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection,Northwind.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sortColumn conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Northwind.Data.SqlSortColumn"/> or <see cref="T:Northwind.Data.SqlSortBuilder`1"/> objects</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.IFilterParameterCollection,Northwind.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sortColumn conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Northwind.Data.SqlSortColumn"/> or <see cref="T:Northwind.Data.SqlSortBuilder`1"/> objects</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> or <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Insert(Northwind.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Insert(Northwind.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Insert(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.BulkInsert(Northwind.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.BulkInsert(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Update(Northwind.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Update(Northwind.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Update(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Save(Northwind.Data.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Save(Northwind.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Save(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Delete(Northwind.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Delete(`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Delete(Northwind.Data.TransactionManager,`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Delete(Northwind.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.Delete(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean,Northwind.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,`0,System.Boolean,Northwind.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,`0,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0},System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">The Entity List object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Entities.TList{`0},System.Boolean,Northwind.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0},System.Boolean,Northwind.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Data.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0,Northwind.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Data.TransactionManager,`0,Northwind.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Data.TransactionManager,`0,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A <c>DeepSession</c> of child types for easy access.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Entities.TList{`0},Northwind.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0},Northwind.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.TList{`0},Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">The transaction manager.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.CanDeepLoad(Northwind.Entities.IEntity,System.String,Northwind.Data.DeepLoadType,Northwind.Data.Bases.DeepSession)">
            <summary>
             Enforces the rules set in order to load this property for a given type.
            </summary>
             <param name="entity">The entity.</param>
             <param name="key">The key.</param>
             <param name="deepLoadType">Type of the deep load.</param>
             <param name="innerList">The inner list.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.CanDeepSave(System.Object,System.String,Northwind.Data.DeepSaveType,Northwind.Data.Bases.DeepSession)">
            <summary>
            Enforces the rules set in order to save this property for a given type.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <param name="deepSaveType">Type of the deep save.</param>
            <param name="innerList">The inner list.</param>
            <returns>
            	<c>true</c> if this instance [can deep save] the specified entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.GetDeepSessionArgs(Northwind.Data.Bases.DeepSession,System.Enum,System.Object,System.String)">
            <summary>
            Gets the DeepSession Arguments for an event.
            </summary>
            <param name="deepSession">the current DeepSession.</param>
            <param name="deepTypeValue"> The Deep Type Value</param>
            <param name="obj">The current entity or list.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>DeepSessionEventArgs</c> if the item being run is a valid entity or list.
            </returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.OnDataRequesting(Northwind.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just before accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.OnDataRequested(Northwind.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.OnDeepLoading(Northwind.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EntityProviderBaseCore`2.OnDeepSaving(Northwind.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="E:Northwind.Data.Bases.EntityProviderBaseCore`2.DataRequesting">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:Northwind.Data.Bases.EntityProviderBaseCore`2.DataRequested">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoading">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSaving">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EntityProviderBaseCore`2.DataRequestingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EntityProviderBaseCore`2.DataRequestedEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepLoadingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EntityProviderBaseCore`2.DeepSavingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByProductIdFromOrderDetails(System.Int32)">
            <summary>
            	Gets Orders objects from the datasource by ProductID in the
            	Order Details table. Table Orders is related to table Products
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="_productId"></param>
            <returns>Returns a typed collection of Orders objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByProductIdFromOrderDetails(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Northwind.Entities.Orders objects from the datasource by ProductID in the
            	Order Details table. Table Orders is related to table Products
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Orders objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByProductIdFromOrderDetails(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Orders objects from the datasource by ProductID in the
            	Order Details table. Table Orders is related to table Products
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Orders objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByProductIdFromOrderDetails(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Orders objects from the datasource by ProductID in the
            	Order Details table. Table Orders is related to table Products
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Orders objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByProductIdFromOrderDetails(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Orders objects from the datasource by ProductID in the
            	Order Details table. Table Orders is related to table Products
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Orders objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByProductIdFromOrderDetails(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Orders objects from the datasource by ProductID in the
            	Order Details table. Table Orders is related to table Products
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Orders objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.OrdersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_orderId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.OrdersKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByCustomerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByCustomerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByCustomerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerID index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CustomerID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByEmployeeId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key EmployeeID index.
            </summary>
            <param name="_employeeId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByEmployeeId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EmployeeID index.
            </summary>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the EmployeeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the EmployeeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByEmployeeId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmployeeID index.
            </summary>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the EmployeeID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key OrderDate index.
            </summary>
            <param name="_orderDate"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the OrderDate index.
            </summary>
            <param name="_orderDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderDate(Northwind.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the OrderDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderDate(Northwind.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the OrderDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the OrderDate index.
            </summary>
            <param name="_orderDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderDate(Northwind.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the OrderDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Orders index.
            </summary>
            <param name="_orderId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Orders index.
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Orders index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Orders index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Orders index.
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByOrderId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Orders index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Orders"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShippedDate(System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the primary key ShippedDate index.
            </summary>
            <param name="_shippedDate"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShippedDate(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ShippedDate index.
            </summary>
            <param name="_shippedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShippedDate(Northwind.Data.TransactionManager,System.Nullable{System.DateTime})">
            <summary>
            	Gets rows from the datasource based on the ShippedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shippedDate"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShippedDate(Northwind.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ShippedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shippedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShippedDate(System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ShippedDate index.
            </summary>
            <param name="_shippedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShippedDate(Northwind.Data.TransactionManager,System.Nullable{System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ShippedDate index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shippedDate"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipVia(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key ShippersOrders index.
            </summary>
            <param name="_shipVia"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipVia(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ShippersOrders index.
            </summary>
            <param name="_shipVia"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipVia(Northwind.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the ShippersOrders index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipVia"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipVia(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ShippersOrders index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipVia"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipVia(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ShippersOrders index.
            </summary>
            <param name="_shipVia"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipVia(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ShippersOrders index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipVia"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipPostalCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key ShipPostalCode index.
            </summary>
            <param name="_shipPostalCode"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipPostalCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ShipPostalCode index.
            </summary>
            <param name="_shipPostalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipPostalCode(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the ShipPostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipPostalCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ShipPostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipPostalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipPostalCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ShipPostalCode index.
            </summary>
            <param name="_shipPostalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.GetByShipPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ShipPostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipPostalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Orders},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Orders&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Orders)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Orders"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Orders"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Orders)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Orders"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Orders"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Orders,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Orders"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Orders Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Orders,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Orders object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Orders instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Orders Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.QuarterlyOrdersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.QuarterlyOrdersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.QuarterlyOrdersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.QuarterlyOrdersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EntityViewProviderBase`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:Northwind.Data.Bases.EntityViewProviderBaseCore`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="T:Northwind.Data.IEntityViewProvider`1">
            <summary>
            Defines the common data access methods that can be used by the
            ReadOnlyDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:Northwind.Data.IEntityViewProvider`1.Get(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityViewProvider`1.GetPaged(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityViewProvider`1.GetAll(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.IEntityViewProvider`1.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetAll">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetAll(Northwind.Data.TransactionManager)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetAll(Northwind.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetAll(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(Northwind.Data.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(Northwind.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(Northwind.Data.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Get(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(Northwind.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(Northwind.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.IFilterParameterCollection,Northwind.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Northwind.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection,Northwind.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Northwind.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.IFilterParameterCollection,Northwind.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sort conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:Northwind.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EntityViewProviderBaseCore`1.Find(Northwind.Data.TransactionManager,Northwind.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.QuarterlyOrders},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.QuarterlyOrders)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.QuarterlyOrders"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.QuarterlyOrders"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerAndSuppliersByCityProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomerAndSuppliersByCityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.CustomerAndSuppliersByCity},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.CustomerAndSuppliersByCity)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerAndSuppliersByCityFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.SqlFilterBuilder`1">
            <summary>
            Allows for building SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:Northwind.Data.SqlStringBuilder">
            <summary>
            Represents a SQL filter expression.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.Append(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.Append(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIn(System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIn(System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotIn(System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotIn(System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIsNull(System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIsNull(System.String,System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIsNotNull(System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendIsNotNull(System.String,System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendLessThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendStartsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendEndsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendContains(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotContains(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendLike(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotLike(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendNotLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="column">The column.</param>
            <param name="compare">The compare.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.AppendInternal(System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.Clear">
            <summary>
            Clears the internal string buffer.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.ToString(System.String)">
            <summary>
            Converts the value of this instance to a System.String and
            prepends the specified junction if the expression is not empty.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values">Comma string with the in parameters already in one string</param>
            <param name="encode">tells whether or not to enclose the parameters with ' and to replace ' with '' within the parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.GetInQueryValues(System.String[],System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values">String Array with the in parameters</param>
            <param name="encode">tells whether or not to enclose the parameters with ' and to replace ' with '' within the parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.BeginGroup">
            <summary>
            Begins a new group of parameters by adding an open parenthesis "("
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.BeginGroup(System.String)">
            <summary>
            Begins a new groups of parameters using the specified junction operator
            </summary>
            <param name="junction">The junction operator to be used</param>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.EndGroup">
            <summary>
            Ends a group of parameters by add a closing parenthesis ")"
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlStringBuilder.EnsureGroups">
            <summary>
            Makes sure that all groups have been ended (each call to BeginGroup has a corresponding EndGroup)
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlStringBuilder.junction">
            <summary>
            The Junction member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlStringBuilder.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlStringBuilder.Junction">
            <summary>
            Gets or sets the Junction property.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlStringBuilder.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlStringBuilder.Length">
            <summary>
            Gets or sets the length of the internal StringBuilder object.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.Append(`0,System.String)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.Append(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIn(`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIn(`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIsNull(`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIsNull(System.String,`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIsNotNull(`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendIsNotNull(System.String,`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendGreaterThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendLessThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendStartsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendEndsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendContains(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotContains(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendLike(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotLike(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.AppendNotLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlFilterBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerAndSuppliersByCityParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.ParameterizedSqlFilterBuilder`1">
            <summary>
            Allows for building parameterized SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:Northwind.Data.IFilterParameterCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:Northwind.Data.SqlFilterParameterCollection"/> 
              objects to use dynamic and parameterized filters.
            </summary>
        </member>
        <member name="M:Northwind.Data.IFilterParameterCollection.GetParameters">
            <summary>
            Gets a collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects
            </summary>
            <returns><see cref="T:Northwind.Data.SqlFilterParameterCollection"/> object</returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendNotContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.GetParameters">
            <summary>
            Gets the current collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Northwind.Data.ParameterizedSqlFilterBuilder`1.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="M:Northwind.Data.ParameterizedSqlFilterBuilder`1.Northwind#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwind.Data.ParameterizedSqlFilterBuilder`1.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCityParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerAndSuppliersByCitySortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.SqlSortBuilder`1">
            <summary>
            Allows for building SQL OrderBy expressions using strongly-typed column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:Northwind.Data.ISortColumnCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:Northwind.Data.SqlSortColumnCollection"/> 
              objects to generate an OrderBy clause.
            </summary>
        </member>
        <member name="M:Northwind.Data.ISortColumnCollection.GetSortColumns">
            <summary>
            Gets a collection of <see cref="T:Northwind.Data.SqlSortColumn"/> objects
            </summary>
            <returns><see cref="T:Northwind.Data.SqlSortColumnCollection"/> object</returns>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.Append(System.Enum,Northwind.Data.SqlSortDirection)">
            <summary>
            Appends the specified column and sorts it by the specified SqlSortDirection 
            </summary>
            <param name="column">The column to sort</param>
            <param name="sortDirection">The specified column's sort direction</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.AppendASC(System.Enum)">
            <summary>
            Appends the specified column and sorts it Ascending
            </summary>
            <param name="column">The column to sort</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.AppendDESC(System.Enum)">
            <summary>
            Appends the specified column and sorts it Descending
            </summary>
            <param name="column">The column to sort</param>
            <returns></returns>
        </member>
        <member name="F:Northwind.Data.SqlSortBuilder`1.sortColumns">
            <summary>
            The Sort Columns member variable.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.AddColumn(System.Enum,Northwind.Data.SqlSortDirection)">
            <summary>
            Adds a column to the sort builder
            </summary>
            <param name="column">The entity's column to sort by</param>
            <param name="sortDirection">The sort direction</param>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.ToString">
            <summary>
            Provides the actual SQL sort string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.GetSortColumns">
            <summary>
            Gets the current collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlSortBuilder`1.Northwind#Data#ISortColumnCollection#GetSortColumns">
            <summary>
            Gets a collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwind.Data.SqlSortBuilder`1.SortColumns">
            <summary>
            Gets or sets the SortColumns property.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerAndSuppliersByCitySortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCitySqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.ITransactionManager">
            <summary>
            TransactionManager interface
            </summary>
        </member>
        <member name="M:Northwind.Data.ITransactionManager.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:Northwind.Data.ITransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:Northwind.Data.ITransactionManager.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="M:Northwind.Data.ITransactionManager.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Northwind.Data.ITransactionManager.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="P:Northwind.Data.ITransactionManager.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Northwind.Data.ITransactionManager.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:Northwind.Data.ITransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:Northwind.Data.ITransactionManager.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Northwind.Data.ITransactionManager.TransactionObject">
            <summary>
            Gets the transaction object.
            </summary>
            <value>The transaction object.</value>
        </member>
        <member name="T:Northwind.Data.SqlUtil">
            <summary>
            Provides utility methods for generating SQL expressions.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.AND">
            <summary>
            SQL AND keyword.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.OR">
            <summary>
            SQL OR keyword.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.ASC">
            <summary>
            SQL ASC keyword.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.DESC">
            <summary>
            SQL DESC keyword.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.NULL">
            <summary>
            SQL NULL keyword.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.TOKEN">
            <summary>
            Used to represent quoted search terms.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.QUOTE">
            <summary>
            Delimiter for quoted search terms.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.STAR">
            <summary>
            Used as wildcard character within search text.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.WILD">
            <summary>
            SQL wildcard character.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.LEFT">
            <summary>
            SQL grouping open character.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.RIGHT">
            <summary>
            SQL grouping close character.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.COMMA">
            <summary>
            Delimiter for optional search terms.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlUtil.PAGE_INDEX">
            <summary>
            PageIndex Temp Table
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Equals(System.String,System.String)">
            <summary>
            Creates an <see cref="F:Northwind.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="F:Northwind.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Equals(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="F:Northwind.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Equals(System.String)">
            <summary>
            Encodes the value for a <see cref="F:Northwind.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Contains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Contains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:Northwind.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotContains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotContains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotContains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotContains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:Northwind.Data.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.StartsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.StartsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:Northwind.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.EndsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.EndsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:Northwind.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Like(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Like(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Like(System.String)">
            <summary>
            Encodes the value for a <see cref="F:Northwind.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotLike(System.String,System.String)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotLike(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotLike(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:Northwind.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.NotLike(System.String)">
            <summary>
            Encodes the value for a <see cref="F:Northwind.Data.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.IsNull(System.String)">
            <summary>
            Creates an IS NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.IsNotNull(System.String)">
            <summary>
            Creates an IS NOT NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Encode(System.String)">
            <summary>
            Encodes the specified value for use in SQL expressions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Encode(System.String,System.Boolean)">
            <summary>
            Encodes the specified value for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="value"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Encode(System.String[])">
            <summary>
            Encodes the specified values for use in SQL expressions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.Encode(System.String[],System.Boolean)">
            <summary>
            Encodes the specified values for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="values"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.GetLikeFormat(System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.GetLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.GetNotLikeFormat(System.Boolean)">
            <summary>
            Gets the not like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.GetNotLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the not like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.GetEqualFormat(System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.SqlUtil.GetEqualFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="T:Northwind.Data.SqlComparisonType">
            <summary>
            Enumeration of SQL expression comparison types.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlComparisonType.Equals">
            <summary>
            Represents = value.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlComparisonType.StartsWith">
            <summary>
            Represents LIKE value%.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlComparisonType.EndsWith">
            <summary>
            Represents LIKE %value.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlComparisonType.Contains">
            <summary>
            Represents LIKE %value%.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlComparisonType.NotContains">
            <summary>
            Represents NOT LIKE %value%.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlComparisonType.Like">
            <summary>
            Represents LIKE value.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlComparisonType.NotLike">
            <summary>
            Represents NOT LIKE value.
            </summary>
        </member>
        <member name="T:Northwind.Data.SqlFilterType">
            <summary>
            Enumeration of SQL Filter Types.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlFilterType.Word">
            <summary>
            Represents an Individual Word filter
            </summary>
            <example>(if using <see cref="F:Northwind.Data.SqlComparisonType.Contains"/>) CompanyName LIKE "%Acme" AND CompanyName LIKE "Company%"</example>
        </member>
        <member name="F:Northwind.Data.SqlFilterType.Phrase">
            <summary>
            Represents a Phrase filter
            </summary>
            <example>(if using <see cref="F:Northwind.Data.SqlComparisonType.Contains"/>) CompanyName LIKE "%Acme Company%"</example>
        </member>
        <member name="T:Northwind.Data.SqlSortDirection">
            <summary>
            Enumeration of SQL expression Sort Directions
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlSortDirection.ASC">
            <summary>
            Database Ascending
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlSortDirection.DESC">
            <summary>
            Database Descending
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CurrentProductListProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CurrentProductListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CurrentProductListProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CurrentProductListProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.CurrentProductList},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.CurrentProductList)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.CurrentProductList"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CurrentProductList"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.TerritoriesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.TerritoriesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByEmployeeIdFromEmployeeTerritories(System.Int32)">
            <summary>
            	Gets Territories objects from the datasource by EmployeeID in the
            	EmployeeTerritories table. Table Territories is related to table Employees
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="_employeeId"></param>
            <returns>Returns a typed collection of Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByEmployeeIdFromEmployeeTerritories(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Northwind.Entities.Territories objects from the datasource by EmployeeID in the
            	EmployeeTerritories table. Table Territories is related to table Employees
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_employeeId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByEmployeeIdFromEmployeeTerritories(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Territories objects from the datasource by EmployeeID in the
            	EmployeeTerritories table. Table Territories is related to table Employees
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByEmployeeIdFromEmployeeTerritories(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Territories objects from the datasource by EmployeeID in the
            	EmployeeTerritories table. Table Territories is related to table Employees
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByEmployeeIdFromEmployeeTerritories(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Territories objects from the datasource by EmployeeID in the
            	EmployeeTerritories table. Table Territories is related to table Employees
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByEmployeeIdFromEmployeeTerritories(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Territories objects from the datasource by EmployeeID in the
            	EmployeeTerritories table. Table Territories is related to table Employees
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_employeeId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.TerritoriesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_territoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByRegionId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Territories_Region key.
            	FK_Territories_Region Description: 
            </summary>
            <param name="_regionId"></param>
            <returns>Returns a typed collection of Northwind.Entities.Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByRegionId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Territories_Region key.
            	FK_Territories_Region Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_regionId"></param>
            <returns>Returns a typed collection of Northwind.Entities.Territories objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByRegionId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Territories_Region key.
            	FK_Territories_Region Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_regionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByRegionId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Territories_Region key.
            	fkTerritoriesRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_regionId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByRegionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Territories_Region key.
            	fkTerritoriesRegion Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_regionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByRegionId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Territories_Region key.
            	FK_Territories_Region Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_regionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of Northwind.Entities.Territories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.TerritoriesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByTerritoryId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Territories index.
            </summary>
            <param name="_territoryId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Territories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByTerritoryId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Territories index.
            </summary>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Territories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByTerritoryId(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_Territories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Territories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByTerritoryId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Territories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Territories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByTerritoryId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Territories index.
            </summary>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Territories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.GetByTerritoryId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Territories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Territories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Territories},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Territories&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Territories)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Territories"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Territories"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Territories)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Territories"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Territories"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Territories,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Territories"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Territories Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Territories,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Territories object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Territories instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Territories Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.TerritoriesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Territories</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.TerritoriesChildEntityTypes.Region">
            <summary>
             Composite Property for <c>Region</c> at RegionIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.TerritoriesChildEntityTypes.EmployeeIdEmployeesCollection_From_EmployeeTerritories">
            <summary>
             Collection of <c>Territories</c> as ManyToMany for EmployeesCollection_From_EmployeeTerritories
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.TerritoriesChildEntityTypes.EmployeeTerritoriesCollection">
            <summary>
             Collection of <c>Territories</c> as OneToMany for EmployeeTerritoriesCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.TerritoriesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Territories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TerritoriesFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.TerritoriesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Territories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TerritoriesParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.TerritoriesSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Territories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.TerritoriesSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the TerritoriesSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.RegionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.RegionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.RegionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.RegionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.RegionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_regionId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_regionId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.RegionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.GetByRegionId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Region index.
            </summary>
            <param name="_regionId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Region"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.GetByRegionId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Region index.
            </summary>
            <param name="_regionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Region"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.GetByRegionId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Region index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_regionId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Region"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.GetByRegionId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Region index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_regionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Region"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.GetByRegionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Region index.
            </summary>
            <param name="_regionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Region"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.GetByRegionId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Region index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_regionId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Region"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Region},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Region&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Region)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Region"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Region"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Region)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Region"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Region"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Region,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Region"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Region Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.RegionProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Region,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Region object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Region instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Region Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByYearProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SummaryOfSalesByYearProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByYearProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SummaryOfSalesByYearProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.SummaryOfSalesByYear},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.SummaryOfSalesByYear)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductSalesFor1997ProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductSalesFor1997ProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997ProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.ProductSalesFor1997},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997ProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.ProductSalesFor1997)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.ProductSalesFor1997"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.ProductSalesFor1997"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductSalesFor1997FilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductSalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997FilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductSalesFor1997FilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997FilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997FilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997FilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997FilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductSalesFor1997ParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductSalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997ParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductSalesFor1997ParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997ParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997ParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997ParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997ParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductSalesFor1997SortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductSalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductSalesFor1997SortBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductSalesFor1997SqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersQryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrdersQryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersQryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrdersQryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.OrdersQry},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.OrdersQry)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.OrdersQry"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.OrdersQry"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesTotalsByAmountProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SalesTotalsByAmountProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.SalesTotalsByAmount},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.SalesTotalsByAmount)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesTotalsByAmountFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesTotalsByAmountParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesTotalsByAmountSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesTotalsByAmountSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsByCategoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductsByCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.ProductsByCategory},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.ProductsByCategory)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.ProductsByCategory"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.ProductsByCategory"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsByCategoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsByCategoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsByCategoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsByCategoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsByCategorySortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsByCategorySortBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsByCategorySqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsAboveAveragePriceProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductsAboveAveragePriceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsAboveAveragePriceProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductsAboveAveragePriceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.ProductsAboveAveragePrice},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.ProductsAboveAveragePrice)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.EmployeeTerritoriesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.EmployeeTerritoriesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.Delete(System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_employeeId">. Primary Key.</param>
            <param name="_territoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId">. Primary Key.</param>
            <param name="_territoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Employees key.
            	FK_EmployeeTerritories_Employees Description: 
            </summary>
            <param name="_employeeId"></param>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Employees key.
            	FK_EmployeeTerritories_Employees Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Employees key.
            	FK_EmployeeTerritories_Employees Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Employees key.
            	fkEmployeeTerritoriesEmployees Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_employeeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Employees key.
            	fkEmployeeTerritoriesEmployees Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_employeeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Employees key.
            	FK_EmployeeTerritories_Employees Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByTerritoryId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Territories key.
            	FK_EmployeeTerritories_Territories Description: 
            </summary>
            <param name="_territoryId"></param>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByTerritoryId(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Territories key.
            	FK_EmployeeTerritories_Territories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByTerritoryId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Territories key.
            	FK_EmployeeTerritories_Territories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByTerritoryId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Territories key.
            	fkEmployeeTerritoriesTerritories Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_territoryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByTerritoryId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Territories key.
            	fkEmployeeTerritoriesTerritories Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_territoryId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByTerritoryId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_EmployeeTerritories_Territories key.
            	FK_EmployeeTerritories_Territories Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of Northwind.Entities.EmployeeTerritories objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.EmployeeTerritoriesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeIdTerritoryId(System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_EmployeeTerritories index.
            </summary>
            <param name="_employeeId"></param>
            <param name="_territoryId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.EmployeeTerritories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeIdTerritoryId(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeeTerritories index.
            </summary>
            <param name="_employeeId"></param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.EmployeeTerritories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeIdTerritoryId(Northwind.Data.TransactionManager,System.Int32,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeeTerritories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="_territoryId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.EmployeeTerritories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeIdTerritoryId(Northwind.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeeTerritories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.EmployeeTerritories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeIdTerritoryId(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeeTerritories index.
            </summary>
            <param name="_employeeId"></param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.EmployeeTerritories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.GetByEmployeeIdTerritoryId(Northwind.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_EmployeeTerritories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.EmployeeTerritories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.EmployeeTerritories},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;EmployeeTerritories&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.EmployeeTerritories)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.EmployeeTerritories"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.EmployeeTerritories"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.EmployeeTerritories)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.EmployeeTerritories"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.EmployeeTerritories"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.EmployeeTerritories,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.EmployeeTerritories"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.EmployeeTerritories Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.EmployeeTerritories,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.EmployeeTerritories object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.EmployeeTerritories instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.EmployeeTerritories Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeeTerritoriesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.EmployeeTerritories</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.EmployeeTerritoriesChildEntityTypes.Employees">
            <summary>
             Composite Property for <c>Employees</c> at EmployeeIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.EmployeeTerritoriesChildEntityTypes.Territories">
            <summary>
             Composite Property for <c>Territories</c> at TerritoryIdSource
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeeTerritoriesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.EmployeeTerritories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeeTerritoriesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.EmployeeTerritories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeeTerritoriesSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.EmployeeTerritories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeeTerritoriesSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.EmployeesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.EmployeesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByTerritoryIdFromEmployeeTerritories(System.String)">
            <summary>
            	Gets Employees objects from the datasource by TerritoryID in the
            	EmployeeTerritories table. Table Employees is related to table Territories
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="_territoryId"></param>
            <returns>Returns a typed collection of Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByTerritoryIdFromEmployeeTerritories(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets Northwind.Entities.Employees objects from the datasource by TerritoryID in the
            	EmployeeTerritories table. Table Employees is related to table Territories
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_territoryId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByTerritoryIdFromEmployeeTerritories(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets Employees objects from the datasource by TerritoryID in the
            	EmployeeTerritories table. Table Employees is related to table Territories
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByTerritoryIdFromEmployeeTerritories(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets Employees objects from the datasource by TerritoryID in the
            	EmployeeTerritories table. Table Employees is related to table Territories
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByTerritoryIdFromEmployeeTerritories(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Employees objects from the datasource by TerritoryID in the
            	EmployeeTerritories table. Table Employees is related to table Territories
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="_territoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByTerritoryIdFromEmployeeTerritories(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Employees objects from the datasource by TerritoryID in the
            	EmployeeTerritories table. Table Employees is related to table Territories
            	through the (M:N) relationship defined in the EmployeeTerritories table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_territoryId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.EmployeesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_employeeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByReportsTo(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Employees_Employees key.
            	FK_Employees_Employees Description: 
            </summary>
            <param name="_reportsTo"></param>
            <returns>Returns a typed collection of Northwind.Entities.Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByReportsTo(Northwind.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the FK_Employees_Employees key.
            	FK_Employees_Employees Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_reportsTo"></param>
            <returns>Returns a typed collection of Northwind.Entities.Employees objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByReportsTo(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Employees_Employees key.
            	FK_Employees_Employees Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_reportsTo"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByReportsTo(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_Employees_Employees key.
            	fkEmployeesEmployees Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_reportsTo"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByReportsTo(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Employees_Employees key.
            	fkEmployeesEmployees Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_reportsTo"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByReportsTo(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Employees_Employees key.
            	FK_Employees_Employees Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_reportsTo"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of Northwind.Entities.Employees objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.EmployeesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByLastName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key LastName index.
            </summary>
            <param name="_lastName"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByLastName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LastName index.
            </summary>
            <param name="_lastName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByLastName(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the LastName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_lastName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByLastName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the LastName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_lastName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByLastName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LastName index.
            </summary>
            <param name="_lastName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByLastName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LastName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_lastName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByEmployeeId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Employees index.
            </summary>
            <param name="_employeeId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Employees"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByEmployeeId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Employees index.
            </summary>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Employees"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Employees index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Employees"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Employees index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Employees"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByEmployeeId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Employees index.
            </summary>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Employees"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByEmployeeId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Employees index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_employeeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Employees"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByPostalCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByPostalCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByPostalCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Employees},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Employees&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Employees)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Employees"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Employees"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Employees)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Employees"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Employees"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Employees,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Employees"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Employees Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Employees,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Employees object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Employees instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Employees Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByQuarterProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SummaryOfSalesByQuarterProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.SummaryOfSalesByQuarter},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.SummaryOfSalesByQuarter)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByQuarterFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByQuarterParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByQuarterSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByQuarterSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByQuarterProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SummaryOfSalesByQuarterProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsByCategoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductsByCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsExtendedProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrderDetailsExtendedProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsExtendedProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrderDetailsExtendedProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.OrderDetailsExtended},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.OrderDetailsExtended)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.OrderDetailsExtended"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.OrderDetailsExtended"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerAndSuppliersByCityProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomerAndSuppliersByCityProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.AlphabeticalListOfProductsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.AlphabeticalListOfProductsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.AlphabeticalListOfProductsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.AlphabeticalListOfProductsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.AlphabeticalListOfProducts},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.AlphabeticalListOfProducts)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerCustomerDemoProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomerCustomerDemoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomerCustomerDemoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.CustomerCustomerDemoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerId">. Primary Key.</param>
            <param name="_customerTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId">. Primary Key.</param>
            <param name="_customerTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerTypeId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo key.
            	FK_CustomerCustomerDemo Description: 
            </summary>
            <param name="_customerTypeId"></param>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerTypeId(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo key.
            	FK_CustomerCustomerDemo Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerTypeId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo key.
            	FK_CustomerCustomerDemo Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerTypeId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo key.
            	fkCustomerCustomerDemo Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerTypeId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo key.
            	fkCustomerCustomerDemo Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerTypeId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerTypeId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo key.
            	FK_CustomerCustomerDemo Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo_Customers key.
            	FK_CustomerCustomerDemo_Customers Description: 
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo_Customers key.
            	FK_CustomerCustomerDemo_Customers Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo_Customers key.
            	FK_CustomerCustomerDemo_Customers Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo_Customers key.
            	fkCustomerCustomerDemoCustomers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo_Customers key.
            	fkCustomerCustomerDemoCustomers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerCustomerDemo_Customers key.
            	FK_CustomerCustomerDemo_Customers Description: 
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of Northwind.Entities.CustomerCustomerDemo objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.CustomerCustomerDemoKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerIdCustomerTypeId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_CustomerCustomerDemo index.
            </summary>
            <param name="_customerId"></param>
            <param name="_customerTypeId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerIdCustomerTypeId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerCustomerDemo index.
            </summary>
            <param name="_customerId"></param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerIdCustomerTypeId(Northwind.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerCustomerDemo index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_customerTypeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerIdCustomerTypeId(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerCustomerDemo index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerIdCustomerTypeId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerCustomerDemo index.
            </summary>
            <param name="_customerId"></param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.GetByCustomerIdCustomerTypeId(Northwind.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerCustomerDemo index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.CustomerCustomerDemo},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;CustomerCustomerDemo&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.CustomerCustomerDemo)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.CustomerCustomerDemo)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.CustomerCustomerDemo,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.CustomerCustomerDemo Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.CustomerCustomerDemo,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.CustomerCustomerDemo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.CustomerCustomerDemo instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.CustomerCustomerDemo Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerTypeIdFromCustomerCustomerDemo(System.String)">
            <summary>
            	Gets Customers objects from the datasource by CustomerTypeID in the
            	CustomerCustomerDemo table. Table Customers is related to table CustomerDemographics
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="_customerTypeId"></param>
            <returns>Returns a typed collection of Customers objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerTypeIdFromCustomerCustomerDemo(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets Northwind.Entities.Customers objects from the datasource by CustomerTypeID in the
            	CustomerCustomerDemo table. Table Customers is related to table CustomerDemographics
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerTypeId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Customers objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerTypeIdFromCustomerCustomerDemo(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets Customers objects from the datasource by CustomerTypeID in the
            	CustomerCustomerDemo table. Table Customers is related to table CustomerDemographics
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Customers objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerTypeIdFromCustomerCustomerDemo(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets Customers objects from the datasource by CustomerTypeID in the
            	CustomerCustomerDemo table. Table Customers is related to table CustomerDemographics
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Customers objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerTypeIdFromCustomerCustomerDemo(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Customers objects from the datasource by CustomerTypeID in the
            	CustomerCustomerDemo table. Table Customers is related to table CustomerDemographics
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Customers objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerTypeIdFromCustomerCustomerDemo(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Customers objects from the datasource by CustomerTypeID in the
            	CustomerCustomerDemo table. Table Customers is related to table CustomerDemographics
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_customerTypeId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Customers objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.CustomersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.CustomersKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCity(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key City index.
            </summary>
            <param name="_city"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCity(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the City index.
            </summary>
            <param name="_city"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCity(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the City index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_city"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCity(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the City index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_city"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCity(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the City index.
            </summary>
            <param name="_city"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCity(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the City index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_city"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCompanyName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key CompanyName index.
            </summary>
            <param name="_companyName"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCompanyName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCompanyName(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_companyName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCompanyName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCompanyName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCompanyName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Customers index.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Customers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Customers index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Customers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_Customers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Customers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Customers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Customers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Customers index.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Customers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByCustomerId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Customers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Customers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByPostalCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByPostalCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByPostalCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByRegion(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key Region index.
            </summary>
            <param name="_region"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByRegion(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Region index.
            </summary>
            <param name="_region"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByRegion(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the Region index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_region"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByRegion(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the Region index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_region"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByRegion(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Region index.
            </summary>
            <param name="_region"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.GetByRegion(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the Region index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_region"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Customers},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Customers&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Customers)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Customers"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Customers"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Customers)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Customers"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Customers"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Customers,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Customers"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Customers Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Customers,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Customers object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Customers instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Customers Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.TerritoriesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.TerritoriesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CategorySalesFor1997ProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CategorySalesFor1997ProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997ProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.CategorySalesFor1997},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997ProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.CategorySalesFor1997)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.CategorySalesFor1997"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CategorySalesFor1997"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CategorySalesFor1997FilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CategorySalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997FilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategorySalesFor1997FilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997FilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997FilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997FilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997FilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CategorySalesFor1997ParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CategorySalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997ParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategorySalesFor1997ParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997ParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997ParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997ParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997ParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CategorySalesFor1997SortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CategorySalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategorySalesFor1997SortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategorySalesFor1997SqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SalesByCategoryProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SalesByCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.SalesByCategory},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.SalesByCategory)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.SalesByCategory"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.SalesByCategory"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesByCategoryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesByCategoryFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesByCategoryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesByCategoryParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategoryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesByCategorySortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SalesByCategorySortBuilder.#ctor">
            <summary>
            Initializes a new instance of the SalesByCategorySqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrderDetailsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrderDetailsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.OrderDetailsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.Delete(System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_orderId">. Primary Key.</param>
            <param name="_productId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId">. Primary Key.</param>
            <param name="_productId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.OrderDetailsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key OrderID index.
            </summary>
            <param name="_orderId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the OrderID index.
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the OrderID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the OrderID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the OrderID index.
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the OrderID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderIdProductId(System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Order_Details index.
            </summary>
            <param name="_orderId"></param>
            <param name="_productId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.OrderDetails"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderIdProductId(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Order_Details index.
            </summary>
            <param name="_orderId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.OrderDetails"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderIdProductId(Northwind.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Order_Details index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.OrderDetails"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderIdProductId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Order_Details index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.OrderDetails"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderIdProductId(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Order_Details index.
            </summary>
            <param name="_orderId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.OrderDetails"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByOrderIdProductId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Order_Details index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.OrderDetails"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductID index.
            </summary>
            <param name="_productId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductID index.
            </summary>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByProductId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByProductId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductID index.
            </summary>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.GetByProductId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.OrderDetails},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;OrderDetails&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.OrderDetails)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.OrderDetails"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.OrderDetails"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.OrderDetails)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.OrderDetails"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.OrderDetails"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.OrderDetails,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.OrderDetails"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.OrderDetails Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.OrderDetails,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.OrderDetails object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.OrderDetails instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.OrderDetails Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByOrderIdFromOrderDetails(System.Int32)">
            <summary>
            	Gets Products objects from the datasource by OrderID in the
            	Order Details table. Table Products is related to table Orders
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="_orderId"></param>
            <returns>Returns a typed collection of Products objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByOrderIdFromOrderDetails(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Northwind.Entities.Products objects from the datasource by OrderID in the
            	Order Details table. Table Products is related to table Orders
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_orderId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Products objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByOrderIdFromOrderDetails(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets Products objects from the datasource by OrderID in the
            	Order Details table. Table Products is related to table Orders
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of Products objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByOrderIdFromOrderDetails(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets Products objects from the datasource by OrderID in the
            	Order Details table. Table Products is related to table Orders
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Products objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByOrderIdFromOrderDetails(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Products objects from the datasource by OrderID in the
            	Order Details table. Table Products is related to table Orders
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="_orderId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Products objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByOrderIdFromOrderDetails(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets Products objects from the datasource by OrderID in the
            	Order Details table. Table Products is related to table Orders
            	through the (M:N) relationship defined in the Order Details table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_orderId"></param>
            <remarks></remarks>
            <returns>Returns a TList of Products objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.ProductsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_productId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.ProductsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByCategoryId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key CategoriesProducts index.
            </summary>
            <param name="_categoryId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByCategoryId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CategoriesProducts index.
            </summary>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByCategoryId(Northwind.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the CategoriesProducts index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByCategoryId(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CategoriesProducts index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByCategoryId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CategoriesProducts index.
            </summary>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByCategoryId(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CategoriesProducts index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Products index.
            </summary>
            <param name="_productId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Products"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Products index.
            </summary>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Products"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Products index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Products"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Products index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Products"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Products index.
            </summary>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Products"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Products index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Products"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key ProductName index.
            </summary>
            <param name="_productName"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductName index.
            </summary>
            <param name="_productName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductName(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the ProductName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the ProductName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductName index.
            </summary>
            <param name="_productName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetByProductName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ProductName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_productName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetBySupplierId(System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the primary key SupplierID index.
            </summary>
            <param name="_supplierId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetBySupplierId(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SupplierID index.
            </summary>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetBySupplierId(Northwind.Data.TransactionManager,System.Nullable{System.Int32})">
            <summary>
            	Gets rows from the datasource based on the SupplierID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_supplierId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetBySupplierId(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the SupplierID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetBySupplierId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SupplierID index.
            </summary>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.GetBySupplierId(Northwind.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the SupplierID index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Products},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Products&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Products)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Products"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Products"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Products)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Products"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Products"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Products,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Products"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Products Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Products,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Products object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Products instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Products Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Products</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.ProductsChildEntityTypes.Categories">
            <summary>
             Composite Property for <c>Categories</c> at CategoryIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.ProductsChildEntityTypes.Suppliers">
            <summary>
             Composite Property for <c>Suppliers</c> at SupplierIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.ProductsChildEntityTypes.OrderDetailsCollection">
            <summary>
             Collection of <c>Products</c> as OneToMany for OrderDetailsCollection
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.ProductsChildEntityTypes.OrderIdOrdersCollection_From_OrderDetails">
            <summary>
             Collection of <c>Products</c> as ManyToMany for OrdersCollection_From_OrderDetails
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Products"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Products"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Products"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ShippersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ShippersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.ShippersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_shipperId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipperId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.ShippersKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.GetByShipperId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Shippers index.
            </summary>
            <param name="_shipperId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Shippers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.GetByShipperId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Shippers index.
            </summary>
            <param name="_shipperId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Shippers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.GetByShipperId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Shippers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipperId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Shippers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.GetByShipperId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Shippers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipperId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Shippers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.GetByShipperId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Shippers index.
            </summary>
            <param name="_shipperId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Shippers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.GetByShipperId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Shippers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_shipperId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Shippers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Shippers},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Shippers&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Shippers)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Shippers"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Shippers"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Shippers)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Shippers"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Shippers"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Shippers,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Shippers"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Shippers Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Shippers,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Shippers object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Shippers instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Shippers Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ShippersChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Shippers</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.ShippersChildEntityTypes.OrdersCollection">
            <summary>
             Collection of <c>Shippers</c> as OneToMany for OrdersCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ShippersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Shippers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippersFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ShippersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Shippers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippersParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ShippersSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Shippers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ShippersSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the ShippersSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomersChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Customers</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CustomersChildEntityTypes.OrdersCollection">
            <summary>
             Collection of <c>Customers</c> as OneToMany for OrdersCollection
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CustomersChildEntityTypes.CustomerTypeIdCustomerDemographicsCollection_From_CustomerCustomerDemo">
            <summary>
             Collection of <c>Customers</c> as ManyToMany for CustomerDemographicsCollection_From_CustomerCustomerDemo
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CustomersChildEntityTypes.CustomerCustomerDemoCollection">
            <summary>
             Collection of <c>Customers</c> as OneToMany for CustomerCustomerDemoCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Customers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomersFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Customers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomersParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomersSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Customers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomersSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomersSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByYearFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByYearParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SummaryOfSalesByYearSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SummaryOfSalesByYearSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersQryFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrdersQry"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrdersQryFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersQryParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrdersQry"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrdersQryParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQryParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersQrySortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrdersQry"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersQrySortBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrdersQrySqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsExtendedFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetailsExtended"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsExtendedParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetailsExtended"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsExtendedSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetailsExtended"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsExtendedSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CategorySalesFor1997ProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CategorySalesFor1997ProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.LoadPolicy">
            <summary>
            Possibel load policies that can be applied when a provider Load method is called. Determines 
            how entities with EntityState.Unchanged and EntityState.Changed are treated during a Load
            when entity tracking is enabled.
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.LoadPolicy.PreserveChanges">
            <summary>
            Refresh entities with EntityState.Unchanged if entity tracking is enabled. Entities with 
            EntityState.Changed will not be refreshed with information from the database.
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.LoadPolicy.DiscardChanges">
            <summary>
            Refresh entities with EntityState.Changed as well as EntityState.Unchanged i.e. discard any
            unsaved changes.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerDemographicsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomerDemographicsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CustomerDemographicsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerIdFromCustomerCustomerDemo(System.String)">
            <summary>
            	Gets CustomerDemographics objects from the datasource by CustomerID in the
            	CustomerCustomerDemo table. Table CustomerDemographics is related to table Customers
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="_customerId"></param>
            <returns>Returns a typed collection of CustomerDemographics objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerIdFromCustomerCustomerDemo(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets Northwind.Entities.CustomerDemographics objects from the datasource by CustomerID in the
            	CustomerCustomerDemo table. Table CustomerDemographics is related to table Customers
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a TList of CustomerDemographics objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerIdFromCustomerCustomerDemo(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets CustomerDemographics objects from the datasource by CustomerID in the
            	CustomerCustomerDemo table. Table CustomerDemographics is related to table Customers
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of CustomerDemographics objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerIdFromCustomerCustomerDemo(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets CustomerDemographics objects from the datasource by CustomerID in the
            	CustomerCustomerDemo table. Table CustomerDemographics is related to table Customers
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CustomerDemographics objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerIdFromCustomerCustomerDemo(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CustomerDemographics objects from the datasource by CustomerID in the
            	CustomerCustomerDemo table. Table CustomerDemographics is related to table Customers
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="_customerId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CustomerDemographics objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerIdFromCustomerCustomerDemo(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CustomerDemographics objects from the datasource by CustomerID in the
            	CustomerCustomerDemo table. Table CustomerDemographics is related to table Customers
            	through the (M:N) relationship defined in the CustomerCustomerDemo table.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="_customerId"></param>
            <remarks></remarks>
            <returns>Returns a TList of CustomerDemographics objects.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.CustomerDemographicsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_customerTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.CustomerDemographicsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerTypeId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_CustomerDemographics index.
            </summary>
            <param name="_customerTypeId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerDemographics"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerTypeId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerDemographics index.
            </summary>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerDemographics"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerTypeId(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerDemographics index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerDemographics"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerTypeId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerDemographics index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerDemographics"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerTypeId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerDemographics index.
            </summary>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerDemographics"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.GetByCustomerTypeId(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerDemographics index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_customerTypeId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.CustomerDemographics"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.CustomerDemographics},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;CustomerDemographics&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.CustomerDemographics)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.CustomerDemographics"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CustomerDemographics"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.CustomerDemographics)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.CustomerDemographics"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CustomerDemographics"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.CustomerDemographics,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.CustomerDemographics"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.CustomerDemographics Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.CustomerDemographics,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.CustomerDemographics object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.CustomerDemographics instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.CustomerDemographics Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SalesByCategoryProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SalesByCategoryProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.AlphabeticalListOfProductsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.AlphabeticalListOfProductsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.AlphabeticalListOfProductsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.AlphabeticalListOfProductsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeeTerritoriesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.EmployeeTerritoriesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ShippersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ShippersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string
            into substrings using a set of delimiters.
            </summary>
            <remarks>
            C# version of the java.util.StringTokenizer class.
            Basicly it's a wrapper class around the <c>String.Split</c> method.<pare/>
            It implements all of it's Java equivalent methods apart from those only needed by the Enumeration interface.
            All implemented Java-compilant methods have their C# equivalents in properties. They however differ in names
            since Java uses the (Hungarian-like) notation <c>runMe()</c> while C# uses Camel-cased <c>RunMe()</c> and thus
            Java's <c>nextToken()</c> method is just an alias of the <c>NextToken</c> property.
            </remarks>
        </member>
        <member name="F:Northwind.Data.StringTokenizer.DefaultDelimiters">
            <summary>
            String conatining the default set of delimiters which are <c>" \t\n\r\f"</c>:
            the space character, the tab character, the newline character, the carriage-return character, and the form-feed character.
            </summary>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
        </member>
        <member name="M:Northwind.Data.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Northwind.Data.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken"/> property will successfully return a token.
            </summary>
            <value>
            	<c>true</c> if more tokens are available; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Northwind.Data.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:Northwind.Data.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:Northwind.Data.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:Northwind.Data.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="P:Northwind.Data.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerCustomerDemoChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.CustomerCustomerDemo</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CustomerCustomerDemoChildEntityTypes.CustomerDemographics">
            <summary>
             Composite Property for <c>CustomerDemographics</c> at CustomerTypeIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CustomerCustomerDemoChildEntityTypes.Customers">
            <summary>
             Composite Property for <c>Customers</c> at CustomerIdSource
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerCustomerDemoFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerCustomerDemoParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerCustomerDemoSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerCustomerDemoSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CategoriesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CategoriesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.CategoriesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_categoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.CategoriesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key CategoryName index.
            </summary>
            <param name="_categoryName"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CategoryName index.
            </summary>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryName(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the CategoryName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CategoryName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CategoryName index.
            </summary>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CategoryName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Categories index.
            </summary>
            <param name="_categoryId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Categories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Categories index.
            </summary>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Categories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Categories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Categories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Categories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Categories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Categories index.
            </summary>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Categories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.GetByCategoryId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Categories index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_categoryId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Categories"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Categories},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Categories&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Categories)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Categories"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Categories"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Categories)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Categories"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Categories"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Categories,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Categories"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Categories Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Categories,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Categories object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Categories instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Categories Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CategoriesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Categories</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CategoriesChildEntityTypes.ProductsCollection">
            <summary>
             Collection of <c>Categories</c> as OneToMany for ProductsCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CategoriesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Categories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategoriesFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CategoriesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Categories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategoriesParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.CategoriesSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Categories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CategoriesSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CategoriesSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CategoriesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.CategoriesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SuppliersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SuppliersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.Delete(Northwind.Data.TransactionManager,Northwind.Entities.SuppliersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_supplierId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.Delete(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_supplierId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.Get(Northwind.Data.TransactionManager,Northwind.Entities.SuppliersKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:Northwind.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByCompanyName(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key CompanyName index.
            </summary>
            <param name="_companyName"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByCompanyName(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByCompanyName(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_companyName"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByCompanyName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByCompanyName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByCompanyName(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the CompanyName index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_companyName"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetBySupplierId(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_Suppliers index.
            </summary>
            <param name="_supplierId"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Suppliers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetBySupplierId(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Suppliers index.
            </summary>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Suppliers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetBySupplierId(Northwind.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Suppliers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_supplierId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Suppliers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetBySupplierId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_Suppliers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Suppliers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetBySupplierId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Suppliers index.
            </summary>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Suppliers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetBySupplierId(Northwind.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Suppliers index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_supplierId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.Suppliers"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByPostalCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByPostalCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByPostalCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.GetByPostalCode(Northwind.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PostalCode index.
            </summary>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="_postalCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:Northwind.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.TList{Northwind.Entities.Suppliers},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Suppliers&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:Northwind.Entities.TList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Suppliers)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Suppliers"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Suppliers"/> object to refresh.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.RefreshEntity(System.Data.DataSet,Northwind.Entities.Suppliers)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Suppliers"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Suppliers"/> object.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.DeepLoad(Northwind.Data.TransactionManager,Northwind.Entities.Suppliers,System.Boolean,Northwind.Data.DeepLoadType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:Northwind.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:Northwind.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:Northwind.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Suppliers"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Northwind.Entities.Suppliers Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersProviderBaseCore.DeepSave(Northwind.Data.TransactionManager,Northwind.Entities.Suppliers,Northwind.Data.DeepSaveType,System.Type[],Northwind.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the Northwind.Entities.Suppliers object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">Northwind.Entities.Suppliers instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Northwind.Entities.Suppliers Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SuppliersChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Suppliers</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.SuppliersChildEntityTypes.ProductsCollection">
            <summary>
             Collection of <c>Suppliers</c> as OneToMany for ProductsCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SuppliersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Suppliers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SuppliersFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SuppliersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Suppliers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SuppliersParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.SuppliersSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Suppliers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.SuppliersSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the SuppliersSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Employees</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.EmployeesChildEntityTypes.Employees">
            <summary>
             Composite Property for <c>Employees</c> at ReportsToSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.EmployeesChildEntityTypes.EmployeesCollection">
            <summary>
             Collection of <c>Employees</c> as OneToMany for EmployeesCollection
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.EmployeesChildEntityTypes.OrdersCollection">
            <summary>
             Collection of <c>Employees</c> as OneToMany for OrdersCollection
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.EmployeesChildEntityTypes.EmployeeTerritoriesCollection">
            <summary>
             Collection of <c>Employees</c> as OneToMany for EmployeeTerritoriesCollection
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.EmployeesChildEntityTypes.TerritoryIdTerritoriesCollection_From_EmployeeTerritories">
            <summary>
             Collection of <c>Employees</c> as ManyToMany for TerritoriesCollection_From_EmployeeTerritories
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Employees"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmployeesFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Employees"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmployeesParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.EmployeesSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Employees"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.EmployeesSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the EmployeesSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.InvoicesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.InvoicesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.Invoices},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.Invoices)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.Invoices"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.Invoices"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.InvoicesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Invoices"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoicesFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.InvoicesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Invoices"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoicesParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.InvoicesSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Invoices"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.InvoicesSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the InvoicesSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.InvoicesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.InvoicesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.TransactionManager">
            <summary>
            TransactionManager is utility class that decorates a <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="M:Northwind.Data.TransactionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Northwind.Data.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:Northwind.Data.TransactionManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Northwind.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:Northwind.Data.TransactionManager.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Northwind.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="providerInvariantName">Name of the provider invariant.</param>
        </member>
        <member name="M:Northwind.Data.TransactionManager.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
            <remarks>The default <see cref="T:System.Data.IsolationLevel"/> mode is ReadCommitted</remarks>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
        </member>
        <member name="M:Northwind.Data.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> level of the transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
            <exception cref="T:System.Data.DataException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:Northwind.Data.TransactionManager.Commit">
            <summary>
            Commit the transaction to the datasource.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:Northwind.Data.TransactionManager.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:Northwind.Data.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Northwind.Data.TransactionManager.ConnectionString">
            <summary>
            Gets or sets the configuration key for database service.
            </summary>
            <remark>Do not change during a transaction.</remark>
            <exception cref="T:System.InvalidOperationException">
            If an attempt to set when the connection is currently open.
            </exception>
        </member>
        <member name="P:Northwind.Data.TransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:Northwind.Data.TransactionManager.Database">
            <summary>
            Gets the <see cref="P:Northwind.Data.TransactionManager.Database"/> instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Northwind.Data.TransactionManager.TransactionObject">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbTransaction"/> object.
            </summary>
        </member>
        <member name="P:Northwind.Data.TransactionManager.IsOpen">
            <summary>
            Gets a value that indicates if a transaction is currently open and operating. 
            </summary>
            <value>Return true if a transaction session is currently open and operating; otherwise false.</value>
        </member>
        <member name="T:Northwind.Data.StringBuilderExpression">
            <summary>
            Represents a SQL filter builder expression enumeration.
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.Append">
            <summary>
            Append
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendEquals">
            <summary>
            AppendEquals
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendNotEquals">
            <summary>
            AppendNotEquals
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendIn">
            <summary>
            AppendIn
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendNotIn">
            <summary>
            AppendNotIn
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendInQuery">
            <summary>
            AppendInQuery
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendNotInQuery">
            <summary>
            AppendNotInQuery
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendRange">
            <summary>
            AppendRange
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendNotRange">
            <summary>
            AppendNotRange
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendIsNull">
            <summary>
            AppendIsNull
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendIsNotNull">
            <summary>
            AppendIsNotNull
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendGreaterThan">
            <summary>
            AppendGreaterThan
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendGreaterThanOrEqual">
            <summary>
            AppendGreaterThanOrEqual
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendLessThan">
            <summary>
            AppendLessThan
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendLessThanOrEqual">
            <summary>
            AppendLessThanOrEqual
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendStartsWith">
            <summary>
            AppendStartsWith
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendEndsWith">
            <summary>
            AppendEndsWith
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendContains">
            <summary>
            AppendContains
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendNotContains">
            <summary>
            AppendNotContains
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendLike">
            <summary>
            AppendLike
            </summary>
        </member>
        <member name="F:Northwind.Data.StringBuilderExpression.AppendNotLike">
            <summary>
            AppendLike
            </summary>
        </member>
        <member name="T:Northwind.Data.SqlFilterParameterCollection">
            <summary>
            A collection of <see cref="T:Northwind.Data.SqlFilterParameter"/> objects.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlFilterParameterCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Northwind.Data.SqlFilterParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the next parameter name for the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:Northwind.Data.SqlFilterParameterCollection.currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlFilterParameterCollection.filterExpression">
            <summary>
            The FilterExpression member variable.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlFilterParameterCollection.Northwind#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameterCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameterCollection.FilterExpression">
            <summary>
            Gets or sets the FilterExpression property.
            </summary>
        </member>
        <member name="T:Northwind.Data.SqlFilterParameter">
            <summary>
            Represents the information needed for a database command parameter.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlFilterParameter.#ctor(System.Enum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SqlFilterParameter class.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:Northwind.Data.SqlFilterParameter.column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlFilterParameter.parameterValue">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlFilterParameter.parameterIndex">
            <summary>
            The Index member variable.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlFilterParameter.GetValue">
            <summary>
            Gets the current value converted to the appropriate <see cref="T:System.Type"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameter.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameter.Index">
            <summary>
            Gets the parameter index.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameter.DbType">
            <summary>
            Gets the <see cref="T:System.Data.SqlDbType"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlFilterParameter.SystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="T:Northwind.Data.SqlSortColumnCollection">
            <summary>
            A collection of <see cref="T:Northwind.Data.SqlSortColumn"/> objects.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlSortColumnCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:Northwind.Data.SqlSortColumnCollection.ToString">
            <summary>
            Provides the actual SQL sort string.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Northwind.Data.SqlSortColumnCollection._currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlSortColumnCollection.sortExpression">
            <summary>
            The SortExpression member variable.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlSortColumnCollection.Northwind#Data#ISortColumnCollection#GetSortColumns">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwind.Data.SqlSortColumnCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlSortColumnCollection.SortExpression">
            <summary>
            Gets or sets the SortExpression property.
            </summary>
        </member>
        <member name="T:Northwind.Data.SqlSortColumn">
            <summary>
            Represents the information of a sorted column.
            </summary>
        </member>
        <member name="M:Northwind.Data.SqlSortColumn.#ctor(System.Enum,Northwind.Data.SqlSortDirection)">
            <summary>
            Initializes a new instance of the SqlSortColumn class.
            </summary>
            <param name="column"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="F:Northwind.Data.SqlSortColumn._column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:Northwind.Data.SqlSortColumn._sortDirection">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlSortColumn.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:Northwind.Data.SqlSortColumn.SortDirection">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.NetTiersProviderCollection">
            <summary>
            Reprensents the strongly typed collection of NetTiersProvider.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.NetTiersProviderCollection.Add(Northwind.Data.Bases.NetTiersProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:Northwind.Data.Bases.NetTiersProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NetTiersProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:Northwind.Data.DataRepository">
            <summary>
            This class represents the Data source repository and gives access to all the underlying providers.
            </summary>
        </member>
        <member name="M:Northwind.Data.DataRepository.LoadProvider(Northwind.Data.Bases.NetTiersProvider)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
        </member>
        <member name="M:Northwind.Data.DataRepository.LoadProvider(Northwind.Data.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
            <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
        </member>
        <member name="M:Northwind.Data.DataRepository.LoadProviders">
            <summary>
             Configuration based provider loading, will load the providers on first call.
            </summary>
        </member>
        <member name="M:Northwind.Data.DataRepository.CreateTransaction">
            <summary>
            Creates a new <see cref="T:Northwind.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.DataRepository.AddConnection(System.String,System.String)">
            <summary>
            Adds the specified connection string to the map of connection strings.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="P:Northwind.Data.DataRepository.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:Northwind.Data.DataRepository.Providers">
            <summary>
            Gets the provider collection.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:Northwind.Data.DataRepository.NetTiersSection">
            <summary>
            Gets a reference to the configured NetTiersServiceSection object.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ConnectionStrings">
            <summary>
            Gets a reference to the ConnectionStringSettings collection.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.Connections">
            <summary>
            Gets the dictionary of connection providers.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.RegionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Region"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.TerritoriesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Territories"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.EmployeesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Employees"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.SuppliersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Suppliers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.CustomersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Customers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.CategoriesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Categories"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.CustomerDemographicsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.CustomerDemographics"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.CustomerCustomerDemoProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ShippersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Shippers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ProductsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Products"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.OrdersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Orders"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.EmployeeTerritoriesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.EmployeeTerritories"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.OrderDetailsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.OrderDetails"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.AlphabeticalListOfProductsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.CategorySalesFor1997Provider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.CategorySalesFor1997"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.CurrentProductListProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.CurrentProductList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.CustomerAndSuppliersByCityProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.InvoicesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.Invoices"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.OrderDetailsExtendedProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.OrderDetailsExtended"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.OrderSubtotalsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.OrderSubtotals"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.OrdersQryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.OrdersQry"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ProductSalesFor1997Provider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.ProductSalesFor1997"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ProductsAboveAveragePriceProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ProductsByCategoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.ProductsByCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.QuarterlyOrdersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.QuarterlyOrders"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.SalesByCategoryProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.SalesByCategory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.SalesTotalsByAmountProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.SummaryOfSalesByQuarterProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.SummaryOfSalesByYearProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.DataRepository.ConnectionProvider">
            <summary>
            Provides ability to switch connection string at runtime.
            </summary>
        </member>
        <member name="M:Northwind.Data.DataRepository.ConnectionProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="M:Northwind.Data.DataRepository.ConnectionProvider.LoadProviders">
            <summary>
            Instantiates the configured providers based on the supplied connection string.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ConnectionProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:Northwind.Data.DataRepository.ConnectionProvider.Providers">
            <summary>
            Gets the provider collection.
            </summary>
        </member>
        <member name="T:Northwind.Data.RegionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Region"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.RegionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Region"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.RegionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RegionFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.RegionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RegionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.RegionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RegionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.RegionFilters.#ctor">
            <summary>
            Initializes a new instance of the RegionFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.RegionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RegionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.RegionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RegionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.RegionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.RegionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Region"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.RegionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Region"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.RegionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the RegionParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.RegionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RegionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.RegionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RegionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.RegionQuery.#ctor">
            <summary>
            Initializes a new instance of the RegionQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.RegionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RegionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.RegionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the RegionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.TerritoriesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Territories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.TerritoriesFilters.#ctor">
            <summary>
            Initializes a new instance of the TerritoriesFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.TerritoriesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.TerritoriesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.TerritoriesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.TerritoriesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Territories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.TerritoriesQuery.#ctor">
            <summary>
            Initializes a new instance of the TerritoriesQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.TerritoriesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.TerritoriesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TerritoriesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.EmployeesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Employees"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeesFilters.#ctor">
            <summary>
            Initializes a new instance of the EmployeesFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.EmployeesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.EmployeesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.EmployeesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Employees"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeesQuery.#ctor">
            <summary>
            Initializes a new instance of the EmployeesQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.EmployeesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SuppliersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Suppliers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SuppliersFilters.#ctor">
            <summary>
            Initializes a new instance of the SuppliersFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SuppliersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SuppliersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SuppliersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.SuppliersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Suppliers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SuppliersQuery.#ctor">
            <summary>
            Initializes a new instance of the SuppliersQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SuppliersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SuppliersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SuppliersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Customers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomersFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomersFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.CustomersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Customers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomersQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomersQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CategoriesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Categories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategoriesFilters.#ctor">
            <summary>
            Initializes a new instance of the CategoriesFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategoriesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CategoriesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CategoriesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.CategoriesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Categories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategoriesQuery.#ctor">
            <summary>
            Initializes a new instance of the CategoriesQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategoriesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CategoriesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategoriesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomerDemographicsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerDemographics"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerDemographicsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerDemographics"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerDemographicsFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.CustomerDemographicsFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerDemographicsFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerDemographicsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomerDemographicsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomerDemographicsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.CustomerDemographicsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerDemographics"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerDemographicsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerDemographics"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerDemographicsParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.CustomerDemographicsQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerDemographicsQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerDemographicsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomerDemographicsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerDemographicsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomerCustomerDemoFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerCustomerDemoFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerCustomerDemoFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomerCustomerDemoFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomerCustomerDemoQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.CustomerCustomerDemoParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerCustomerDemo"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerCustomerDemoQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerCustomerDemoQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomerCustomerDemoQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerCustomerDemoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ShippersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Shippers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ShippersFilters.#ctor">
            <summary>
            Initializes a new instance of the ShippersFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ShippersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ShippersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ShippersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.ShippersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Shippers"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ShippersQuery.#ctor">
            <summary>
            Initializes a new instance of the ShippersQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ShippersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ShippersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ShippersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Products"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductsFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.ProductsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Products"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductsQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrdersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Orders"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Orders"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrdersFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.OrdersFilters.#ctor">
            <summary>
            Initializes a new instance of the OrdersFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrdersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrdersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrdersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.OrdersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Orders"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Orders"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrdersParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.OrdersQuery.#ctor">
            <summary>
            Initializes a new instance of the OrdersQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrdersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrdersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.EmployeeTerritoriesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.EmployeeTerritories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeeTerritoriesFilters.#ctor">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeeTerritoriesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.EmployeeTerritoriesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.EmployeeTerritoriesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.EmployeeTerritoriesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.EmployeeTerritories"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeeTerritoriesQuery.#ctor">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.EmployeeTerritoriesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.EmployeeTerritoriesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the EmployeeTerritoriesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrderDetailsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetails"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetails"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.OrderDetailsFilters.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderDetailsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrderDetailsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrderDetailsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.OrderDetailsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetails"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetails"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.OrderDetailsQuery.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderDetailsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrderDetailsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.AlphabeticalListOfProductsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.AlphabeticalListOfProductsFilters.#ctor">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.AlphabeticalListOfProductsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.AlphabeticalListOfProductsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.AlphabeticalListOfProductsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.AlphabeticalListOfProductsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.AlphabeticalListOfProducts"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.AlphabeticalListOfProductsQuery.#ctor">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.AlphabeticalListOfProductsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.AlphabeticalListOfProductsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AlphabeticalListOfProductsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CategorySalesFor1997Filters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CategorySalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategorySalesFor1997Filters.#ctor">
            <summary>
            Initializes a new instance of the CategorySalesFor1997Filters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategorySalesFor1997Filters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997Filters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CategorySalesFor1997Filters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997Filters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CategorySalesFor1997Query">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.CategorySalesFor1997ParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CategorySalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategorySalesFor1997Query.#ctor">
            <summary>
            Initializes a new instance of the CategorySalesFor1997Query class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CategorySalesFor1997Query.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997Query class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CategorySalesFor1997Query.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CategorySalesFor1997Query class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CurrentProductListFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CurrentProductList"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CurrentProductListFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CurrentProductList"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrentProductListFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.CurrentProductListFilters.#ctor">
            <summary>
            Initializes a new instance of the CurrentProductListFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CurrentProductListFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CurrentProductListFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CurrentProductListQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.CurrentProductListParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CurrentProductList"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CurrentProductListParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CurrentProductList"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrentProductListParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.CurrentProductListQuery.#ctor">
            <summary>
            Initializes a new instance of the CurrentProductListQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CurrentProductListQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CurrentProductListQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrentProductListQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomerAndSuppliersByCityFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerAndSuppliersByCityFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerAndSuppliersByCityFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomerAndSuppliersByCityFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.CustomerAndSuppliersByCityQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.CustomerAndSuppliersByCityParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerAndSuppliersByCity"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerAndSuppliersByCityQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.CustomerAndSuppliersByCityQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.CustomerAndSuppliersByCityQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerAndSuppliersByCityQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.InvoicesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Invoices"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.InvoicesFilters.#ctor">
            <summary>
            Initializes a new instance of the InvoicesFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.InvoicesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.InvoicesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.InvoicesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.InvoicesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Invoices"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.InvoicesQuery.#ctor">
            <summary>
            Initializes a new instance of the InvoicesQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.InvoicesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.InvoicesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the InvoicesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrderDetailsExtendedFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetailsExtended"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderDetailsExtendedFilters.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderDetailsExtendedFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrderDetailsExtendedFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrderDetailsExtendedQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.OrderDetailsExtendedParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetailsExtended"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderDetailsExtendedQuery.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderDetailsExtendedQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrderDetailsExtendedQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderDetailsExtendedQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrderSubtotalsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderSubtotals"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderSubtotalsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderSubtotals"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderSubtotalsFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.OrderSubtotalsFilters.#ctor">
            <summary>
            Initializes a new instance of the OrderSubtotalsFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderSubtotalsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrderSubtotalsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrderSubtotalsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.OrderSubtotalsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderSubtotals"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderSubtotalsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderSubtotals"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderSubtotalsParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.OrderSubtotalsQuery.#ctor">
            <summary>
            Initializes a new instance of the OrderSubtotalsQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrderSubtotalsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrderSubtotalsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderSubtotalsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrdersQryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrdersQry"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrdersQryFilters.#ctor">
            <summary>
            Initializes a new instance of the OrdersQryFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrdersQryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrdersQryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.OrdersQryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.OrdersQryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrdersQry"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrdersQryQuery.#ctor">
            <summary>
            Initializes a new instance of the OrdersQryQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.OrdersQryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.OrdersQryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OrdersQryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductSalesFor1997Filters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductSalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductSalesFor1997Filters.#ctor">
            <summary>
            Initializes a new instance of the ProductSalesFor1997Filters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductSalesFor1997Filters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997Filters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductSalesFor1997Filters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997Filters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductSalesFor1997Query">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.ProductSalesFor1997ParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductSalesFor1997"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductSalesFor1997Query.#ctor">
            <summary>
            Initializes a new instance of the ProductSalesFor1997Query class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductSalesFor1997Query.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997Query class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductSalesFor1997Query.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductSalesFor1997Query class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductsAboveAveragePriceFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsAboveAveragePriceFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.ProductsAboveAveragePriceFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsAboveAveragePriceFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductsAboveAveragePriceFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductsAboveAveragePriceQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.ProductsAboveAveragePriceParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsAboveAveragePriceParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.ProductsAboveAveragePriceQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsAboveAveragePriceQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductsAboveAveragePriceQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductsByCategoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsByCategoryFilters.#ctor">
            <summary>
            Initializes a new instance of the ProductsByCategoryFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsByCategoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductsByCategoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.ProductsByCategoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.ProductsByCategoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsByCategoryQuery.#ctor">
            <summary>
            Initializes a new instance of the ProductsByCategoryQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.ProductsByCategoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.ProductsByCategoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProductsByCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.QuarterlyOrdersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.QuarterlyOrders"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.QuarterlyOrdersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.QuarterlyOrders"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the QuarterlyOrdersFilterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.QuarterlyOrdersFilters.#ctor">
            <summary>
            Initializes a new instance of the QuarterlyOrdersFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.QuarterlyOrdersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.QuarterlyOrdersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.QuarterlyOrdersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.QuarterlyOrdersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.QuarterlyOrders"/> object.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.QuarterlyOrdersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.QuarterlyOrders"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the QuarterlyOrdersParameterBuilder class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:Northwind.Data.QuarterlyOrdersQuery.#ctor">
            <summary>
            Initializes a new instance of the QuarterlyOrdersQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.QuarterlyOrdersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.QuarterlyOrdersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuarterlyOrdersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SalesByCategoryFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesByCategoryFilters.#ctor">
            <summary>
            Initializes a new instance of the SalesByCategoryFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesByCategoryFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SalesByCategoryFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SalesByCategoryQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.SalesByCategoryParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesByCategory"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesByCategoryQuery.#ctor">
            <summary>
            Initializes a new instance of the SalesByCategoryQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesByCategoryQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SalesByCategoryQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesByCategoryQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SalesTotalsByAmountFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesTotalsByAmountFilters.#ctor">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesTotalsByAmountFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SalesTotalsByAmountFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SalesTotalsByAmountQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.SalesTotalsByAmountParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SalesTotalsByAmount"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesTotalsByAmountQuery.#ctor">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SalesTotalsByAmountQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SalesTotalsByAmountQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SalesTotalsByAmountQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SummaryOfSalesByQuarterFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByQuarterFilters.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByQuarterFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByQuarterFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SummaryOfSalesByQuarterQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.SummaryOfSalesByQuarterParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByQuarter"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByQuarterQuery.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByQuarterQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByQuarterQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByQuarterQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SummaryOfSalesByYearFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByYearFilters.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearFilters class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByYearFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByYearFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.SummaryOfSalesByYearQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.Bases.SummaryOfSalesByYearParameterBuilder"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.SummaryOfSalesByYear"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByYearQuery.#ctor">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearQuery class.
            </summary>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByYearQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:Northwind.Data.SummaryOfSalesByYearQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SummaryOfSalesByYearQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.QuarterlyOrdersSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.QuarterlyOrders"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.QuarterlyOrdersSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the QuarterlyOrdersSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CurrentProductListSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CurrentProductList"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CurrentProductListSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrentProductListSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.DeepLoadType">
            <summary>
            DeepLoad options for deep loading entities
            </summary>
        </member>
        <member name="F:Northwind.Data.DeepLoadType.IncludeChildren">
            <summary>
            Will Include a child property collection 1 Level Deep
            </summary>
        </member>
        <member name="F:Northwind.Data.DeepLoadType.ExcludeChildren">
            <summary>
            Will Exclude a child property collection
            </summary>
        </member>
        <member name="F:Northwind.Data.DeepLoadType.Ignore">
            <summary>
            Will ignore the request and return the entity.
            </summary>
        </member>
        <member name="T:Northwind.Data.DeepSaveType">
            <summary>
            DeepSave options for deep saving entities
            </summary>
        </member>
        <member name="F:Northwind.Data.DeepSaveType.IncludeChildren">
            <summary>Will Include a child property collection</summary>
        </member>
        <member name="F:Northwind.Data.DeepSaveType.ExcludeChildren">
            <summary>Will Exclude a child property collection</summary>
        </member>
        <member name="F:Northwind.Data.DeepSaveType.Ignore">
            <summary>Will ignore the request and return the entity.</summary>
        </member>
        <member name="T:Northwind.Data.Utility">
            <summary>
            Contains some helper function for SQL.
            </summary>
        </member>
        <member name="M:Northwind.Data.Utility.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:Northwind.Data.Utility.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Utility.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Utility.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Utility.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will 
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="M:Northwind.Data.Utility.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:Northwind.Data.Utility.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:Northwind.Data.Utility.ParseSortExpression(System.Type,System.String)">
            <summary>
            Parses the supplied sort expression parameter to verify that it
            matches the specifed column name enumeration.
            </summary>
            <param name="columnEnum"></param>
            <param name="sortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteReader(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteNonQuery(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteDataSet(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteScalar(Northwind.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the scalar object. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:Northwind.Data.Utility.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returnsthe scalar object. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:Northwind.Data.Bases.DeepSessionEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSessionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSessionEventArgs.#ctor(Northwind.Data.Bases.DeepSession,System.String,System.Enum,Northwind.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
            <param name="deepSession">The Current Deep Session.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSessionEventArgs.#ctor(Northwind.Data.Bases.DeepSession,System.String,System.Enum,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSessionEventArgs.#ctor(Northwind.Data.Bases.DeepSession,System.String,System.Enum,Northwind.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key.</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSessionEventArgs.DeepSession">
            <summary>
            Gets or sets the current DeepSession.
            </summary>
            <value>The DeepSession.</value>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSessionEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSessionEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSessionEventArgs.CurrentTypePropertyKey">
            <summary>
            Gets or Sets the name of the current type property key that 
            will be used to determine if the property will be run in the deep session.
            </summary>
            <value>A string value of the type property key.</value>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSessionEventArgs.DeepTypeValue">
            <summary>
             The current DeepType Value, Either <c>DeepLoadType</c>, or <c>DeepSaveType</c>.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSessionEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel property of the event.
            </summary>
            <value>Current Cancel Value.</value>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSessionEventArgs.Skip">
            <summary>
            Gets or sets the current Skip value.  
            Setting this property will skip the current Deep Property.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="T:Northwind.Data.Bases.CommandEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,Northwind.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Northwind.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,Northwind.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:Northwind.Data.Bases.CommandEventArgs.Command">
            <summary>
            Gets or sets the current command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Northwind.Data.Bases.CommandEventArgs.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:Northwind.Data.Bases.CommandEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Northwind.Data.Bases.CommandEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:Northwind.Data.Bases.DeepSession">
            <summary>
            Keeps a weak reference of the entire deep transaction for tracking purposes.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSession"/> class.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.GetSessionObjects">
            <summary>
            Gets the set of current loaded objects.
            </summary>
            <returns>a list of already run objects</returns>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.AddRun(System.Object,System.String)">
            <summary>
            Adds the specified entity property to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.ContainsType(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.ContainsTypeExcluded(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.HasRun(System.Object,System.String)">
            <summary>
            Determines whether the specified obj has run.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.GetReference(System.Object,System.String)">
            <summary>
            Get's the reference of the object that has run
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	object of the run reference
            </returns>
        </member>
        <member name="M:Northwind.Data.Bases.DeepSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSession.DeepSessionInnerList">
            <summary>
            Gets the Deep Session nner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSession.CancelSession">
            <summary>
            If set to true, any further requests for this deep session will be canceled.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.DeepSession.SkipChildren">
            <summary>
            If set to true, any further requests for this deep session requesting to Load a child collection will be skipped.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.DeepSaveHandle`1">
            <summary>
            Handler for the deep save
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.DeepSaveSingleHandle`1">
            <summary>
            Handler for the single deep save
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.DeepLoadHandle`1">
            <summary>
            Handler for the deep load
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.DeepLoadSingleHandle`1">
            <summary>
            Handler for the single deep load
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ChildEntityTypeAttribute">
            <summary>
             Attribute used to decorate enumerations with underlying system type.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ChildEntityTypeAttribute.#ctor(System.Type)">
            <summary>
             Marks the underlying type of a child entity property.
             </summary>
             <param name="entityType">Type of the property to load.</param>
        </member>
        <member name="M:Northwind.Data.Bases.ChildEntityTypeAttribute.GetType(System.Enum)">
            <summary>
            Gets the underlying system type for the specified enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:Northwind.Data.Bases.ChildEntityTypeAttribute.EntityType">
            <summary>
            The underlying type for the ChildEntityTypes enumerations.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.IChildEntityProperty">
            <summary>
            Provides a common property used to access the child entity type enumeration value.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.IChildEntityProperty.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ChildEntityProperty`1">
            <summary>
            A generic wrapper for the generated ChildEntityTypes enumerations.
            </summary>
            <typeparam name="ChildEntityTypesEnum"></typeparam>
        </member>
        <member name="F:Northwind.Data.Bases.ChildEntityProperty`1.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.ChildEntityProperty`1.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:Northwind.Data.Bases.ChildEntityProperty`1.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductSalesFor1997ProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.ProductSalesFor1997ProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SuppliersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SuppliersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.RegionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Region</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.RegionChildEntityTypes.TerritoriesCollection">
            <summary>
             Collection of <c>Region</c> as OneToMany for TerritoriesCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.RegionSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Region"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.RegionSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the RegionSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.OrderDetails</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.OrderDetailsChildEntityTypes.Orders">
            <summary>
             Composite Property for <c>Orders</c> at OrderIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.OrderDetailsChildEntityTypes.Products">
            <summary>
             Composite Property for <c>Products</c> at ProductIdSource
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderDetailsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderDetails"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderDetailsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderDetailsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.Orders</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.OrdersChildEntityTypes.Customers">
            <summary>
             Composite Property for <c>Customers</c> at CustomerIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.OrdersChildEntityTypes.Employees">
            <summary>
             Composite Property for <c>Employees</c> at EmployeeIdSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.OrdersChildEntityTypes.Shippers">
            <summary>
             Composite Property for <c>Shippers</c> at ShipViaSource
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.OrdersChildEntityTypes.ProductIdProductsCollection_From_OrderDetails">
            <summary>
             Collection of <c>Orders</c> as ManyToMany for ProductsCollection_From_OrderDetails
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.OrdersChildEntityTypes.OrderDetailsCollection">
            <summary>
             Collection of <c>Orders</c> as OneToMany for OrderDetailsCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrdersSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.Orders"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrdersSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrdersSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.SalesTotalsByAmountProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.SalesTotalsByAmountProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderSubtotalsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrderSubtotalsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsProviderBaseCore.Fill(System.Data.IDataReader,Northwind.Entities.VList{Northwind.Entities.OrderSubtotals},System.Int32,System.Int32)">
            <summary>
             Fill an <see cref="T:Northwind.Entities.VList`1"/> From a DataReader.
            </summary>
             <param name="reader">Datareader</param>
             <param name="rows">The collection to fill</param>
             <param name="start">Start row</param>
             <param name="pageLength">number of row.</param>
            <returns>a <see cref="T:Northwind.Entities.VList`1"/></returns>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsProviderBaseCore.RefreshEntity(System.Data.IDataReader,Northwind.Entities.OrderSubtotals)">
            <summary>
            Refreshes the <see cref="T:Northwind.Entities.OrderSubtotals"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:Northwind.Entities.OrderSubtotals"/> object to refresh.</param>
        </member>
        <member name="T:Northwind.Data.Bases.OrderSubtotalsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.OrderSubtotals"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.OrderSubtotalsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the OrderSubtotalsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.OrderSubtotalsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:Northwind.Data.Bases.OrderSubtotalsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerDemographicsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>Northwind.Entities.CustomerDemographics</c>
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CustomerDemographicsChildEntityTypes.CustomerIdCustomersCollection_From_CustomerCustomerDemo">
            <summary>
             Collection of <c>CustomerDemographics</c> as ManyToMany for CustomersCollection_From_CustomerCustomerDemo
            </summary>
        </member>
        <member name="F:Northwind.Data.Bases.CustomerDemographicsChildEntityTypes.CustomerCustomerDemoCollection">
            <summary>
             Collection of <c>CustomerDemographics</c> as OneToMany for CustomerCustomerDemoCollection
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.CustomerDemographicsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.CustomerDemographics"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.CustomerDemographicsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerDemographicsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:Northwind.Data.Bases.ProductsAboveAveragePriceSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:Northwind.Data.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:Northwind.Entities.ProductsAboveAveragePrice"/> object.
            </summary>
        </member>
        <member name="M:Northwind.Data.Bases.ProductsAboveAveragePriceSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the ProductsAboveAveragePriceSqlSortBuilder class.
            </summary>
        </member>
    </members>
</doc>
